@use '../../../theming/theming';
@use '../../token-utils';
@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mdc, linear-progress);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
//
// Tokens that are available in MDC, but not used in Angular Material should be mapped to `null`.
// `null` indicates that we are intentionally choosing not to emit a slot or value for the token in
// our CSS.
@function get-unthemable-tokens() {
  $height: 4px;

  @return (
    // The height of the progress bar. `active-indicator-height` applies to the
    // bar and `track-height` applies to the track.
    active-indicator-height: $height,
    track-height: $height,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($config) {
  $primary: theming.get-color-from-palette(map.get($config, primary));
  @return (
    // The color of the progress bar's active section.
    active-indicator-color: $primary,
    track-color: if(
      meta.type-of($primary) == color,
      color.adjust($primary, $alpha: -0.75),
      $primary
    )
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($config) {
  @return ();
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($config) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return map.merge(
    get-unthemable-tokens(),
    map.merge(
      get-color-tokens(token-utils.$placeholder-color-config),
      map.merge(
        get-typography-tokens(token-utils.$placeholder-typography-config),
        get-density-tokens(token-utils.$placeholder-density-config)
      )
    )
  );
}
