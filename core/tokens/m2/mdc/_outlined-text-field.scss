@use 'sass:map';
@use '../../../theming/theming';
@use '../../../style/sass-utils';
@use '../../../typography/typography-utils';
@use '../../token-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mdc, outlined-text-field);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
//
// Tokens that are available in MDC, but not used in Angular Material should be mapped to `null`.
// `null` indicates that we are intentionally choosing not to emit a slot or value for the token in
// our CSS.
@function get-unthemable-tokens() {
  @return (
    outline-width: 1px,
    focus-outline-width: 2px,
    container-shape: 4px,

    // =============================================================================================
    // = TOKENS NOT USED IN ANGULAR MATERIAL                                                       =
    // =============================================================================================
    error-focus-caret-color: null,
    error-hover-caret-color: null,
    focus-caret-color: null,
    hover-caret-color: null,
    disabled-outline-opacity: null,
    hover-outline-width: null,
    disabled-outline-width: null,
    label-text-type: null,
    label-text-populated-line-height: null,
    label-text-populated-size: null,
    hover-label-text-color: null,
    error-hover-label-text-color: null,
    disabled-label-text-opacity: null,
    disabled-supporting-text-color: null,
    disabled-supporting-text-opacity: null,
    error-focus-supporting-text-color: null,
    error-hover-supporting-text-color: null,
    error-supporting-text-color: null,
    focus-supporting-text-color: null,
    hover-supporting-text-color: null,
    supporting-text-color: null,
    supporting-text-font: null,
    supporting-text-line-height: null,
    supporting-text-size: null,
    supporting-text-tracking: null,
    supporting-text-type: null,
    supporting-text-weight: null,
    disabled-leading-icon-color: null,
    disabled-leading-icon-opacity: null,
    error-focus-leading-icon-color: null,
    error-hover-leading-icon-color: null,
    error-leading-icon-color: null,
    focus-leading-icon-color: null,
    hover-leading-icon-color: null,
    leading-icon-color: null,
    leading-icon-size: null,
    disabled-trailing-icon-color: null,
    disabled-trailing-icon-opacity: null,
    error-focus-trailing-icon-color: null,
    error-hover-trailing-icon-color: null,
    error-trailing-icon-color: null,
    focus-trailing-icon-color: null,
    hover-trailing-icon-color: null,
    trailing-icon-color: null,
    trailing-icon-size: null,
    input-text-prefix-color: null,
    input-text-type: null,
    container-height: null,
    input-text-suffix-color: null,
    input-text-font: null,
    input-text-line-height: null,
    input-text-size: null,
    input-text-tracking: null,
    input-text-weight: null,
    disabled-input-text-opacity: null,
    error-focus-input-text-color: null,
    error-hover-input-text-color: null,
    error-input-text-color: null,
    focus-input-text-color: null,
    hover-input-text-color: null,
    label-text-line-height: null, // We override the line height to `normal` so don't emit a slot.
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($config) {
  $foreground: map.get($config, foreground);
  $warn: map.get($config, warn);
  $is-dark: map.get($config, is-dark);
  $on-surface: if($is-dark, #fff, #000);
  $warn-color: theming.get-color-from-palette($warn);
  $color-tokens: private-get-color-palette-color-tokens($config, primary);

  @return map.merge($color-tokens, (
    label-text-color: rgba($on-surface, 0.6),
    disabled-label-text-color: rgba($on-surface, 0.38),

    input-text-color: rgba($on-surface, 0.87),
    disabled-input-text-color: rgba($on-surface, 0.38),
    input-text-placeholder-color: rgba($on-surface, 0.6),

    error-caret-color: $warn-color,
    error-focus-label-text-color: $warn-color,
    error-label-text-color: $warn-color,

    // Outline tokens
    outline-color: rgba($on-surface, 0.38),
    disabled-outline-color: rgba($on-surface, 0.06),
    hover-outline-color: rgba($on-surface, 0.87),
    error-focus-outline-color: $warn-color,
    error-hover-outline-color: $warn-color,
    error-outline-color: $warn-color,
  ));
}

// Generates the mapping for the properties that change based on the slide toggle color.
@function private-get-color-palette-color-tokens($config, $palette-name) {
  $palette: map.get($config, $palette-name);
  $palette-color: theming.get-color-from-palette($palette);

  @return (
    caret-color: $palette-color,
    focus-outline-color: $palette-color,
    focus-label-text-color: theming.get-color-from-palette($palette, default, 0.87),
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($config) {
  $fallback-font-family: typography-utils.font-family($config);

  @return (
    label-text-font: typography-utils.font-family($config, body-1) or $fallback-font-family,
    label-text-size: typography-utils.font-size($config, body-1),
    label-text-tracking: typography-utils.letter-spacing($config, body-1),
    label-text-weight: typography-utils.font-weight($config, body-1),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($config) {
  @return ();
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
      get-unthemable-tokens(),
      get-color-tokens(token-utils.$placeholder-color-config),
      get-typography-tokens(token-utils.$placeholder-typography-config),
      get-density-tokens(token-utils.$placeholder-density-config)
  );
}
