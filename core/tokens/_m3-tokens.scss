@use '../../autocomplete/m3-autocomplete';
@use '../../bottom-sheet/m3-bottom-sheet';
@use '../../button-toggle/m3-button-toggle';
@use '../../button/m3-button';
@use '../../button/m3-fab';
@use '../../button/m3-icon-button';
@use '../../card/m3-card';
@use '../../checkbox/m3-checkbox';
@use '../../chips/m3-chip';
@use '../../datepicker/m3-datepicker';
@use '../../dialog/m3-dialog';
@use '../../divider/m3-divider';
@use '../../expansion/m3-expansion';
@use '../../form-field/m3-form-field';
@use '../../grid-list/m3-grid-list';
@use '../../icon/m3-icon';
@use '../../list/m3-list';
@use '../../menu/m3-menu';
@use '../../paginator/m3-paginator';
@use '../../progress-bar/m3-progress-bar';
@use '../../progress-spinner/m3-progress-spinner';
@use '../../radio/m3-radio';
@use '../../select/m3-select';
@use '../../sidenav/m3-sidenav';
@use '../../slide-toggle/m3-slide-toggle';
@use '../../slider/m3-slider';
@use '../../snack-bar/m3-snack-bar';
@use '../../sort/m3-sort';
@use '../../stepper/m3-stepper';
@use '../../table/m3-table';
@use '../../tabs/m3-tabs';
@use '../../timepicker/m3-timepicker';
@use '../../toolbar/m3-toolbar';
@use '../../tooltip/m3-tooltip';
@use '../../tree/m3-tree';
@use '../m2' as m2-theming;
@use '../m3-app';
@use '../option/m3-optgroup';
@use '../option/m3-option';
@use '../ripple/m3-ripple';
@use '../selection/pseudo-checkbox/m3-pseudo-checkbox';
@use '../style/sass-utils';
@use './m2-tokens';
@use './m3';
@use 'sass:map';

$_cached-token-slots: null;

/// Determines the token slots for all components.
@function _get-token-slots() {
  // Cache the slots since they're constant and calculating
  // them appears to be expensive (see #29009).
  @if ($_cached-token-slots) {
    @return $_cached-token-slots;
  }

  // TODO(mmalerba): Refactor this to not depend on the legacy theme when moving out of
  //  material-experimental. This is a hack for now because there is no good way to get the token
  //  slots in material-experimental without exposing them all from material.
  $fake-theme: m2-theming.define-light-theme((
    color: (
      primary: m2-theming.define-palette(m2-theming.$red-palette),
      accent: m2-theming.define-palette(m2-theming.$red-palette),
      warn: m2-theming.define-palette(m2-theming.$red-palette),
    ),
    typography: m2-theming.define-typography-config(),
    density: 0
  ));
  $_cached-token-slots: m2-tokens.m2-tokens-from-theme($fake-theme) !global;
  @return $_cached-token-slots;
}

/// Generates a set of namespaced tokens for all components.
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $include-non-systemized Whether to include non-systemized tokens
/// @param {Boolean} $include-density Whether to include density tokens
/// @return {Map} A map of namespaced tokens
@function generate-tokens($systems, $include-non-systemized: false, $include-density: false) {
  $systems: map.merge((
    md-sys-color: (),
    md-sys-elevation: (),
    md-sys-motion: (),
    md-sys-shape: (),
    md-sys-state: (),
    md-sys-typescale: ()
  ), $systems);
  $exclude-hardcoded: not $include-non-systemized;

  $token-slots: _get-token-slots();

  // TODO(mmalerba): Fill in remaining tokens.
  $result: sass-utils.deep-merge-all(
    // Add the system color & typography tokens (so we can give users access via an API).
    (
      (mat, theme): map.get($systems, md-sys-color),
      (mat, typography): map.get($systems, md-sys-typescale),
    ),
    get-m3-tokens($systems, $exclude-hardcoded, $token-slots),
  );

  @return $result;
}

@function create-map($keys, $prefix) {
  $result: ();
  @each $key in $keys {
    $result: map.merge($result, ($key: var(--#{$prefix}-#{$key})));
  }
  @return $result;
}

@function get-sys-color($type, $palettes, $prefix) {
  $sys-color: if($type == dark,
    m3.md-sys-color-values-dark($palettes),
    m3.md-sys-color-values-light($palettes));

  @if (sass-utils.$use-system-color-variables) {
    $var-values: ();
    @each $key in map.keys($sys-color) {
      $var-values: map.set($var-values, $key, var(--#{$prefix}-#{$key}));
    }
    $var-values: map.set($var-values, shadow, map.get($sys-color, shadow));
    @return $var-values;
  }

  @return $sys-color;
}

@function get-sys-typeface($typography, $prefix) {
  $sys-typography: m3.md-sys-typescale-values($typography);
  @if (sass-utils.$use-system-typography-variables) {
    $var-values: ();
    @each $key in map.keys($sys-typography) {
      $var-values: map.set($var-values, $key, var(--#{$prefix}-#{$key}));
    }
    @return $var-values;
  }

  @return $sys-typography;
}

/// Generates a set of namespaced color tokens for all components.
/// @param {String} $type The type of theme system (light or dark)
/// @param {Map} $primary The primary palette
/// @param {Map} $tertiary The tertiary palette
/// @param {Map} $error The error palette
/// @param {String} $system-variables-prefix The prefix of system tokens
/// @return {Map} A map of namespaced color tokens
@function generate-color-tokens($type, $palettes, $system-variables-prefix) {
  $sys-color: get-sys-color($type, $palettes, $system-variables-prefix);

  @return generate-tokens((
    md-sys-color: $sys-color,
    md-ref-palette: (
      neutral-10: map.get($palettes, neutral, 10),
      neutral-variant20: map.get($palettes, neutral-variant, 20),
    ),
    // Because the elevation values are always combined with color values to create the box shadow,
    // elevation needs to be part of the color dimension.
    md-sys-elevation: m3.md-sys-elevation-values(),
    // Because the state values are sometimes combined with color values to create rgba colors,
    // state needs to be part of color dimension.
    // TODO(mmalerba): If at some point we remove the need for these combined values, we can move
    //  state to the base dimension.
    md-sys-state: m3.md-sys-state-values(),
  ));
}

/// Generates a set of namespaced color tokens for all components.
/// @param {String|List} $brand The brand font-family
/// @param {String|List} $plain The plain fort-family
/// @param {String|Number} $bold The bold font-weight
/// @param {String|Number} $medium The medium font-weight
/// @param {String|Number} $regular The regular font-weight
/// @param {String} $system-variables-prefix The prefix of system tokens
/// @return {Map} A map of namespaced typography tokens
@function generate-typography-tokens($typography, $system-variables-prefix) {
  $sys-typeface: get-sys-typeface($typography, $system-variables-prefix);
  @return generate-tokens((
    md-sys-typescale: $sys-typeface
  ));
}

/// Generates a set of namespaced tokens not related to color, typography, or density for all
/// components.
/// @return {Map} A map of namespaced tokens not related to color, typography, or density
@function generate-base-tokens() {
  // TODO(mmalerba): Exclude density tokens once implemented.
  @return generate-tokens((
    md-sys-motion: m3.md-sys-motion-values(),
    md-sys-shape: m3.md-sys-shape-values(),
  ), $include-non-systemized: true);
}

/// Gets the full set of M3 tokens for the given theme object.
/// @param {Map} $systems The MDC system tokens
/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values
/// @param {Map} $token-slots Possible token slots
/// @return {Map} Full set of M3 tokens
@function get-m3-tokens($systems, $exclude-hardcoded, $token-slots) {
  $tokens-list: (
    m3-app.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-autocomplete.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-bottom-sheet.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-button-toggle.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-button.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-card.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-checkbox.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-chip.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-datepicker.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-dialog.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-divider.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-expansion.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-fab.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-form-field.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-grid-list.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-icon-button.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-icon.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-list.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-menu.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-optgroup.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-option.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-paginator.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-progress-bar.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-progress-spinner.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-pseudo-checkbox.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-radio.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-ripple.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-tabs.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-select.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-sidenav.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-slide-toggle.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-slider.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-snack-bar.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-sort.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-stepper.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-table.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-timepicker.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-toolbar.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-tooltip.get-tokens($systems, $exclude-hardcoded, $token-slots),
    m3-tree.get-tokens($systems, $exclude-hardcoded, $token-slots),
  );

  $merged-tokens: ();
  @each $tokens in $tokens-list {
    $merged-tokens: map.deep-merge($merged-tokens, $tokens);
  }

  @return $merged-tokens;
}
