{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material/paginator/testing/paginator-harness.ts","../../../../../../../src/material/paginator/testing/public-api.ts","../../../../../../../src/material/paginator/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AsyncFactoryFn,\n  ComponentHarness,\n  HarnessPredicate,\n  TestElement,\n} from '@angular/cdk/testing';\nimport {MatSelectHarness} from '@angular/material/select/testing';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {PaginatorHarnessFilters} from './paginator-harness-filters';\n\nexport abstract class _MatPaginatorHarnessBase extends ComponentHarness {\n  protected abstract _nextButton: AsyncFactoryFn<TestElement>;\n  protected abstract _previousButton: AsyncFactoryFn<TestElement>;\n  protected abstract _firstPageButton: AsyncFactoryFn<TestElement | null>;\n  protected abstract _lastPageButton: AsyncFactoryFn<TestElement | null>;\n  protected abstract _select: AsyncFactoryFn<\n    | (ComponentHarness & {\n        getValueText(): Promise<string>;\n        clickOptions(...filters: unknown[]): Promise<void>;\n      })\n    | null\n  >;\n  protected abstract _pageSizeFallback: AsyncFactoryFn<TestElement>;\n  protected abstract _rangeLabel: AsyncFactoryFn<TestElement>;\n\n  /** Goes to the next page in the paginator. */\n  async goToNextPage(): Promise<void> {\n    return (await this._nextButton()).click();\n  }\n\n  /** Goes to the previous page in the paginator. */\n  async goToPreviousPage(): Promise<void> {\n    return (await this._previousButton()).click();\n  }\n\n  /** Goes to the first page in the paginator. */\n  async goToFirstPage(): Promise<void> {\n    const button = await this._firstPageButton();\n\n    // The first page button isn't enabled by default so we need to check for it.\n    if (!button) {\n      throw Error(\n        'Could not find first page button inside paginator. ' +\n          'Make sure that `showFirstLastButtons` is enabled.',\n      );\n    }\n\n    return button.click();\n  }\n\n  /** Goes to the last page in the paginator. */\n  async goToLastPage(): Promise<void> {\n    const button = await this._lastPageButton();\n\n    // The last page button isn't enabled by default so we need to check for it.\n    if (!button) {\n      throw Error(\n        'Could not find last page button inside paginator. ' +\n          'Make sure that `showFirstLastButtons` is enabled.',\n      );\n    }\n\n    return button.click();\n  }\n\n  /**\n   * Sets the page size of the paginator.\n   * @param size Page size that should be select.\n   */\n  async setPageSize(size: number): Promise<void> {\n    const select = await this._select();\n\n    // The select is only available if the `pageSizeOptions` are\n    // set to an array with more than one item.\n    if (!select) {\n      throw Error(\n        'Cannot find page size selector in paginator. ' +\n          'Make sure that the `pageSizeOptions` have been configured.',\n      );\n    }\n\n    return select.clickOptions({text: `${size}`});\n  }\n\n  /** Gets the page size of the paginator. */\n  async getPageSize(): Promise<number> {\n    const select = await this._select();\n    const value = select ? select.getValueText() : (await this._pageSizeFallback()).text();\n    return coerceNumberProperty(await value);\n  }\n\n  /** Gets the text of the range labe of the paginator. */\n  async getRangeLabel(): Promise<string> {\n    return (await this._rangeLabel()).text();\n  }\n}\n\n/** Harness for interacting with a standard mat-paginator in tests. */\nexport class MatPaginatorHarness extends _MatPaginatorHarnessBase {\n  /** Selector used to find paginator instances. */\n  static hostSelector = '.mat-paginator';\n  protected _nextButton = this.locatorFor('.mat-paginator-navigation-next');\n  protected _previousButton = this.locatorFor('.mat-paginator-navigation-previous');\n  protected _firstPageButton = this.locatorForOptional('.mat-paginator-navigation-first');\n  protected _lastPageButton = this.locatorForOptional('.mat-paginator-navigation-last');\n  protected _select = this.locatorForOptional(\n    MatSelectHarness.with({\n      ancestor: '.mat-paginator-page-size',\n    }),\n  );\n  protected _pageSizeFallback = this.locatorFor('.mat-paginator-page-size-value');\n  protected _rangeLabel = this.locatorFor('.mat-paginator-range-label');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatPaginatorHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which paginator instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: PaginatorHarnessFilters = {}): HarnessPredicate<MatPaginatorHarness> {\n    return new HarnessPredicate(MatPaginatorHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './paginator-harness';\nexport * from './paginator-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}