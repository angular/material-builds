{"version":3,"file":"table__testing.js","sources":["../../../../../../src/material/table/testing/cell-harness.ts","../../../../../../src/material/table/testing/row-harness.ts","../../../../../../src/material/table/testing/table-harness.ts","../../../../../../src/material/table/testing/public-api.ts","../../../../../../src/material/table/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  HarnessPredicate,\n  ComponentHarnessConstructor,\n  ContentContainerComponentHarness\n} from '@angular/cdk/testing';\nimport {CellHarnessFilters} from './table-harness-filters';\n\n/** Harness for interacting with a standard Angular Material table cell. */\nexport class MatCellHarness extends ContentContainerComponentHarness {\n  /** The selector for the host element of a `MatCellHarness` instance. */\n  static hostSelector = '.mat-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatCellHarness> {\n    return getCellPredicate(MatCellHarness, options);\n  }\n\n  /** Gets the cell's text. */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Gets the name of the column that the cell belongs to. */\n  async getColumnName(): Promise<string> {\n    const host = await this.host();\n    const classAttribute = await host.getAttribute('class');\n\n    if (classAttribute) {\n      const prefix = 'mat-column-';\n      const name = classAttribute.split(' ').map(c => c.trim()).find(c => c.startsWith(prefix));\n\n      if (name) {\n        return name.split(prefix)[1];\n      }\n    }\n\n    throw Error('Could not determine column name of cell.');\n  }\n}\n\n/** Harness for interacting with a standard Angular Material table header cell. */\nexport class MatHeaderCellHarness extends MatCellHarness {\n  /** The selector for the host element of a `MatHeaderCellHarness` instance. */\n  static hostSelector = '.mat-header-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatHeaderCellHarness> {\n    return getCellPredicate(MatHeaderCellHarness, options);\n  }\n}\n\n/** Harness for interacting with a standard Angular Material table footer cell. */\nexport class MatFooterCellHarness extends MatCellHarness {\n  /** The selector for the host element of a `MatFooterCellHarness` instance. */\n  static hostSelector = '.mat-footer-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatFooterCellHarness> {\n    return getCellPredicate(MatFooterCellHarness, options);\n  }\n}\n\n\nfunction getCellPredicate<T extends MatCellHarness>(\n  type: ComponentHarnessConstructor<T>,\n  options: CellHarnessFilters): HarnessPredicate<T> {\n  return new HarnessPredicate(type, options)\n    .addOption('text', options.text,\n        (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text))\n    .addOption('columnName', options.columnName,\n        (harness, name) => HarnessPredicate.stringMatches(harness.getColumnName(), name));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {RowHarnessFilters, CellHarnessFilters} from './table-harness-filters';\nimport {MatCellHarness, MatHeaderCellHarness, MatFooterCellHarness} from './cell-harness';\n\n/** Text extracted from a table row organized by columns. */\nexport interface MatRowHarnessColumnsText {\n  [columnName: string]: string;\n}\n\n/** Harness for interacting with a standard Angular Material table row. */\nexport class MatRowHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatRowHarness` instance. */\n  static hostSelector = '.mat-row';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatRowHarness> {\n    return new HarnessPredicate(MatRowHarness, options);\n  }\n\n  /** Gets a list of `MatCellHarness` for all cells in the row. */\n  async getCells(filter: CellHarnessFilters = {}): Promise<MatCellHarness[]> {\n    return this.locatorForAll(MatCellHarness.with(filter))();\n  }\n\n  /** Gets the text of the cells in the row. */\n  async getCellTextByIndex(filter: CellHarnessFilters = {}): Promise<string[]> {\n    return getCellTextByIndex(this, filter);\n  }\n\n  /** Gets the text inside the row organized by columns. */\n  async getCellTextByColumnName(): Promise<MatRowHarnessColumnsText> {\n    return getCellTextByColumnName(this);\n  }\n}\n\n/** Harness for interacting with a standard Angular Material table header row. */\nexport class MatHeaderRowHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatHeaderRowHarness` instance. */\n  static hostSelector = '.mat-header-row';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatHeaderRowHarness> {\n    return new HarnessPredicate(MatHeaderRowHarness, options);\n  }\n\n  /** Gets a list of `MatHeaderCellHarness` for all cells in the row. */\n  async getCells(filter: CellHarnessFilters = {}): Promise<MatHeaderCellHarness[]> {\n    return this.locatorForAll(MatHeaderCellHarness.with(filter))();\n  }\n\n  /** Gets the text of the cells in the header row. */\n  async getCellTextByIndex(filter: CellHarnessFilters = {}): Promise<string[]> {\n    return getCellTextByIndex(this, filter);\n  }\n\n  /** Gets the text inside the header row organized by columns. */\n  async getCellTextByColumnName(): Promise<MatRowHarnessColumnsText> {\n    return getCellTextByColumnName(this);\n  }\n}\n\n\n/** Harness for interacting with a standard Angular Material table footer row. */\nexport class MatFooterRowHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatFooterRowHarness` instance. */\n  static hostSelector = '.mat-footer-row';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer row cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatFooterRowHarness> {\n    return new HarnessPredicate(MatFooterRowHarness, options);\n  }\n\n  /** Gets a list of `MatFooterCellHarness` for all cells in the row. */\n  async getCells(filter: CellHarnessFilters = {}): Promise<MatFooterCellHarness[]> {\n    return this.locatorForAll(MatFooterCellHarness.with(filter))();\n  }\n\n  /** Gets the text of the cells in the footer row. */\n  async getCellTextByIndex(filter: CellHarnessFilters = {}): Promise<string[]> {\n    return getCellTextByIndex(this, filter);\n  }\n\n  /** Gets the text inside the footer row organized by columns. */\n  async getCellTextByColumnName(): Promise<MatRowHarnessColumnsText> {\n    return getCellTextByColumnName(this);\n  }\n}\n\n\nasync function getCellTextByIndex(harness: {\n  getCells: (filter?: CellHarnessFilters) => Promise<MatCellHarness[]>\n}, filter: CellHarnessFilters): Promise<string[]> {\n  const cells = await harness.getCells(filter);\n  return parallel(() => cells.map(cell => cell.getText()));\n}\n\nasync function getCellTextByColumnName(harness: {\n  getCells: () => Promise<MatCellHarness[]>\n}): Promise<MatRowHarnessColumnsText> {\n  const output: MatRowHarnessColumnsText = {};\n  const cells = await harness.getCells();\n  const cellsData = await parallel(() => cells.map(cell => {\n    return parallel(() => [cell.getColumnName(), cell.getText()]);\n  }));\n  cellsData.forEach(([columnName, text]) => output[columnName] = text);\n  return output;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {TableHarnessFilters, RowHarnessFilters} from './table-harness-filters';\nimport {\n  MatRowHarness,\n  MatHeaderRowHarness,\n  MatFooterRowHarness,\n  MatRowHarnessColumnsText,\n} from './row-harness';\n\n/** Text extracted from a table organized by columns. */\nexport interface MatTableHarnessColumnsText {\n  [columnName: string]: {\n    text: string[];\n    headerText: string[];\n    footerText: string[];\n  };\n}\n\n/** Harness for interacting with a standard mat-table in tests. */\nexport class MatTableHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatTableHarness` instance. */\n  static hostSelector = '.mat-table';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TableHarnessFilters = {}): HarnessPredicate<MatTableHarness> {\n    return new HarnessPredicate(MatTableHarness, options);\n  }\n\n  /** Gets all of the header rows in a table. */\n  async getHeaderRows(filter: RowHarnessFilters = {}): Promise<MatHeaderRowHarness[]> {\n    return this.locatorForAll(MatHeaderRowHarness.with(filter))();\n  }\n\n  /** Gets all of the regular data rows in a table. */\n  async getRows(filter: RowHarnessFilters = {}): Promise<MatRowHarness[]> {\n    return this.locatorForAll(MatRowHarness.with(filter))();\n  }\n\n  /** Gets all of the footer rows in a table. */\n  async getFooterRows(filter: RowHarnessFilters = {}): Promise<MatFooterRowHarness[]> {\n    return this.locatorForAll(MatFooterRowHarness.with(filter))();\n  }\n\n  /** Gets the text inside the entire table organized by rows. */\n  async getCellTextByIndex(): Promise<string[][]> {\n    const rows = await this.getRows();\n    return parallel(() => rows.map(row => row.getCellTextByIndex()));\n  }\n\n  /** Gets the text inside the entire table organized by columns. */\n  async getCellTextByColumnName(): Promise<MatTableHarnessColumnsText> {\n    const [headerRows, footerRows, dataRows] = await parallel(() => [\n      this.getHeaderRows(),\n      this.getFooterRows(),\n      this.getRows()\n    ]);\n\n    const text: MatTableHarnessColumnsText = {};\n    const [headerData, footerData, rowsData] = await parallel(() => [\n      parallel(() => headerRows.map(row => row.getCellTextByColumnName())),\n      parallel(() => footerRows.map(row => row.getCellTextByColumnName())),\n      parallel(() => dataRows.map(row => row.getCellTextByColumnName())),\n    ]);\n\n    rowsData.forEach(data => {\n      Object.keys(data).forEach(columnName => {\n        const cellText = data[columnName];\n\n        if (!text[columnName]) {\n          text[columnName] = {\n            headerText: getCellTextsByColumn(headerData, columnName),\n            footerText: getCellTextsByColumn(footerData, columnName),\n            text: []\n          };\n        }\n\n        text[columnName].text.push(cellText);\n      });\n    });\n\n    return text;\n  }\n}\n\n/** Extracts the text of cells only under a particular column. */\nfunction getCellTextsByColumn(rowsData: MatRowHarnessColumnsText[], column: string): string[] {\n  const columnTexts: string[] = [];\n\n  rowsData.forEach(data => {\n    Object.keys(data).forEach(columnName => {\n      if (columnName === column) {\n        columnTexts.push(data[columnName]);\n      }\n    });\n  });\n\n  return columnTexts;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './table-harness';\nexport * from './row-harness';\nexport * from './cell-harness';\nexport * from './table-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}