{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material/list/testing/list-item-harness-base.ts","../../../../../../../src/material/list/testing/list-harness-base.ts","../../../../../../../src/material/list/testing/action-list-harness.ts","../../../../../../../src/material/list/testing/list-harness.ts","../../../../../../../src/material/list/testing/nav-list-harness.ts","../../../../../../../src/material/list/testing/selection-list-harness.ts","../../../../../../../src/material/list/testing/public-api.ts","../../../../../../../src/material/list/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessLoader,\n  HarnessPredicate,\n  ContentContainerComponentHarness,\n  parallel,\n} from '@angular/cdk/testing';\nimport {BaseListItemHarnessFilters, SubheaderHarnessFilters} from './list-harness-filters';\n\nconst iconSelector = '.mat-list-icon';\nconst avatarSelector = '.mat-list-avatar';\n\n/**\n * Gets a `HarnessPredicate` that applies the given `BaseListItemHarnessFilters` to the given\n * list item harness.\n * @template H The type of list item harness to create a predicate for.\n * @param harnessType A constructor for a list item harness.\n * @param options An instance of `BaseListItemHarnessFilters` to apply.\n * @return A `HarnessPredicate` for the given harness type with the given options applied.\n */\nexport function getListItemPredicate<H extends MatListItemHarnessBase>(\n  harnessType: ComponentHarnessConstructor<H>,\n  options: BaseListItemHarnessFilters,\n): HarnessPredicate<H> {\n  return new HarnessPredicate(harnessType, options).addOption(\n    'text',\n    options.text,\n    (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text),\n  );\n}\n\n/** Harness for interacting with a list subheader. */\nexport class MatSubheaderHarness extends ComponentHarness {\n  static hostSelector = '.mat-subheader';\n\n  static with(options: SubheaderHarnessFilters = {}): HarnessPredicate<MatSubheaderHarness> {\n    return new HarnessPredicate(MatSubheaderHarness, options).addOption(\n      'text',\n      options.text,\n      (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text),\n    );\n  }\n\n  /** Gets the full text content of the list item (including text from any font icons). */\n  async getText(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n\n/** Selectors for the various list item sections that may contain user content. */\nexport const enum MatListItemSection {\n  CONTENT = '.mat-list-item-content',\n  // TODO(mmalerba): consider adding sections for leading/trailing icons.\n}\n\n/**\n * Shared behavior among the harnesses for the various `MatListItem` flavors.\n * @docs-private\n */\nexport abstract class MatListItemHarnessBase extends ContentContainerComponentHarness<MatListItemSection> {\n  private _lines = this.locatorForAll('.mat-line');\n  private _avatar = this.locatorForOptional(avatarSelector);\n  private _icon = this.locatorForOptional(iconSelector);\n\n  /** Gets the full text content of the list item. */\n  async getText(): Promise<string> {\n    return (await this.host()).text({exclude: `${iconSelector}, ${avatarSelector}`});\n  }\n\n  /** Gets the lines of text (`mat-line` elements) in this nav list item. */\n  async getLinesText(): Promise<string[]> {\n    const lines = await this._lines();\n    return parallel(() => lines.map(l => l.text()));\n  }\n\n  /** Whether this list item has an avatar. */\n  async hasAvatar(): Promise<boolean> {\n    return !!(await this._avatar());\n  }\n\n  /** Whether this list item has an icon. */\n  async hasIcon(): Promise<boolean> {\n    return !!(await this._icon());\n  }\n\n  /** Whether this list option is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-list-item-disabled');\n  }\n\n  /**\n   * Gets a `HarnessLoader` used to get harnesses within the list item's content.\n   * @deprecated Use `getChildLoader(MatListItemSection.CONTENT)` or `getHarness` instead.\n   * @breaking-change 12.0.0\n   */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    return this.getChildLoader(MatListItemSection.CONTENT);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarness,\n  ComponentHarnessConstructor,\n  HarnessPredicate,\n  parallel,\n} from '@angular/cdk/testing';\nimport {DividerHarnessFilters, MatDividerHarness} from '@angular/material/divider/testing';\nimport {BaseListItemHarnessFilters, SubheaderHarnessFilters} from './list-harness-filters';\nimport {MatSubheaderHarness} from './list-item-harness-base';\n\n/** Represents a section of a list falling under a specific header. */\nexport interface ListSection<I> {\n  /** The heading for this list section. `undefined` if there is no heading. */\n  heading?: string;\n\n  /** The items in this list section. */\n  items: I[];\n}\n\n/**\n * Shared behavior among the harnesses for the various `MatList` flavors.\n * @template T A constructor type for a list item harness type used by this list harness.\n * @template C The list item harness type that `T` constructs.\n * @template F The filter type used filter list item harness of type `C`.\n * @docs-private\n */\nexport abstract class MatListHarnessBase<\n  T extends ComponentHarnessConstructor<C> & {with: (options?: F) => HarnessPredicate<C>},\n  C extends ComponentHarness,\n  F extends BaseListItemHarnessFilters,\n> extends ComponentHarness {\n  protected _itemHarness: T;\n\n  /**\n   * Gets a list of harnesses representing the items in this list.\n   * @param filters Optional filters used to narrow which harnesses are included\n   * @return The list of items matching the given filters.\n   */\n  async getItems(filters?: F): Promise<C[]> {\n    return this.locatorForAll(this._itemHarness.with(filters))();\n  }\n\n  /**\n   * Gets a list of `ListSection` representing the list items grouped by subheaders. If the list has\n   * no subheaders it is represented as a single `ListSection` with an undefined `heading` property.\n   * @param filters Optional filters used to narrow which list item harnesses are included\n   * @return The list of items matching the given filters, grouped into sections by subheader.\n   */\n  async getItemsGroupedBySubheader(filters?: F): Promise<ListSection<C>[]> {\n    type Section = {items: C[]; heading?: Promise<string>};\n    const listSections: Section[] = [];\n    let currentSection: Section = {items: []};\n    const itemsAndSubheaders = await this.getItemsWithSubheadersAndDividers({\n      item: filters,\n      divider: false,\n    });\n    for (const itemOrSubheader of itemsAndSubheaders) {\n      if (itemOrSubheader instanceof MatSubheaderHarness) {\n        if (currentSection.heading !== undefined || currentSection.items.length) {\n          listSections.push(currentSection);\n        }\n        currentSection = {heading: itemOrSubheader.getText(), items: []};\n      } else {\n        currentSection.items.push(itemOrSubheader);\n      }\n    }\n    if (\n      currentSection.heading !== undefined ||\n      currentSection.items.length ||\n      !listSections.length\n    ) {\n      listSections.push(currentSection);\n    }\n\n    // Concurrently wait for all sections to resolve their heading if present.\n    return parallel(() =>\n      listSections.map(async s => ({items: s.items, heading: await s.heading})),\n    );\n  }\n\n  /**\n   * Gets a list of sub-lists representing the list items grouped by dividers. If the list has no\n   * dividers it is represented as a list with a single sub-list.\n   * @param filters Optional filters used to narrow which list item harnesses are included\n   * @return The list of items matching the given filters, grouped into sub-lists by divider.\n   */\n  async getItemsGroupedByDividers(filters?: F): Promise<C[][]> {\n    const listSections: C[][] = [[]];\n    const itemsAndDividers = await this.getItemsWithSubheadersAndDividers({\n      item: filters,\n      subheader: false,\n    });\n    for (const itemOrDivider of itemsAndDividers) {\n      if (itemOrDivider instanceof MatDividerHarness) {\n        listSections.push([]);\n      } else {\n        listSections[listSections.length - 1].push(itemOrDivider);\n      }\n    }\n    return listSections;\n  }\n\n  /**\n   * Gets a list of harnesses representing all of the items, subheaders, and dividers\n   * (in the order they appear in the list). Use `instanceof` to check which type of harness a given\n   * item is.\n   * @param filters Optional filters used to narrow which list items, subheaders, and dividers are\n   *     included. A value of `false` for the `item`, `subheader`, or `divider` properties indicates\n   *     that the respective harness type should be omitted completely.\n   * @return The list of harnesses representing the items, subheaders, and dividers matching the\n   *     given filters.\n   */\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false;\n    subheader: false;\n    divider: false;\n  }): Promise<[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false;\n    subheader: false;\n    divider: false;\n  }): Promise<C[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false;\n    subheader?: SubheaderHarnessFilters | false;\n    divider: false;\n  }): Promise<MatSubheaderHarness[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false;\n    subheader: false;\n    divider?: DividerHarnessFilters | false;\n  }): Promise<MatDividerHarness[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false;\n    subheader?: SubheaderHarnessFilters | false;\n    divider: false;\n  }): Promise<(C | MatSubheaderHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item?: F | false;\n    subheader: false;\n    divider?: false | DividerHarnessFilters;\n  }): Promise<(C | MatDividerHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters: {\n    item: false;\n    subheader?: false | SubheaderHarnessFilters;\n    divider?: false | DividerHarnessFilters;\n  }): Promise<(MatSubheaderHarness | MatDividerHarness)[]>;\n  getItemsWithSubheadersAndDividers(filters?: {\n    item?: F | false;\n    subheader?: SubheaderHarnessFilters | false;\n    divider?: DividerHarnessFilters | false;\n  }): Promise<(C | MatSubheaderHarness | MatDividerHarness)[]>;\n  async getItemsWithSubheadersAndDividers(\n    filters: {\n      item?: F | false;\n      subheader?: SubheaderHarnessFilters | false;\n      divider?: DividerHarnessFilters | false;\n    } = {},\n  ): Promise<(C | MatSubheaderHarness | MatDividerHarness)[]> {\n    const query = [];\n    if (filters.item !== false) {\n      query.push(this._itemHarness.with(filters.item || ({} as F)));\n    }\n    if (filters.subheader !== false) {\n      query.push(MatSubheaderHarness.with(filters.subheader));\n    }\n    if (filters.divider !== false) {\n      query.push(MatDividerHarness.with(filters.divider));\n    }\n    return this.locatorForAll(...query)();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {ActionListHarnessFilters, ActionListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-action-list in tests. */\nexport class MatActionListHarness extends MatListHarnessBase<\n  typeof MatActionListItemHarness,\n  MatActionListItemHarness,\n  ActionListItemHarnessFilters\n> {\n  /** The selector for the host element of a `MatActionList` instance. */\n  static hostSelector = 'mat-action-list.mat-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatActionListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which action list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ActionListHarnessFilters = {}): HarnessPredicate<MatActionListHarness> {\n    return new HarnessPredicate(MatActionListHarness, options);\n  }\n\n  override _itemHarness = MatActionListItemHarness;\n}\n\n/** Harness for interacting with an action list item. */\nexport class MatActionListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = `${MatActionListHarness.hostSelector} .mat-list-item`;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatActionListItemHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which action list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: ActionListItemHarnessFilters = {},\n  ): HarnessPredicate<MatActionListItemHarness> {\n    return getListItemPredicate(MatActionListItemHarness, options);\n  }\n\n  /** Clicks on the action list item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Focuses the action list item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the action list item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the action list item is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {ListHarnessFilters, ListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-list in tests. */\nexport class MatListHarness extends MatListHarnessBase<\n  typeof MatListItemHarness,\n  MatListItemHarness,\n  ListItemHarnessFilters\n> {\n  /** The selector for the host element of a `MatList` instance. */\n  static hostSelector = '.mat-list:not(mat-action-list)';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListHarness` that meets certain\n   * criteria.\n   * @param options Options for filtering which list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListHarnessFilters = {}): HarnessPredicate<MatListHarness> {\n    return new HarnessPredicate(MatListHarness, options);\n  }\n\n  override _itemHarness = MatListItemHarness;\n}\n\n/** Harness for interacting with a list item. */\nexport class MatListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = `${MatListHarness.hostSelector} .mat-list-item`;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListItemHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListItemHarnessFilters = {}): HarnessPredicate<MatListItemHarness> {\n    return getListItemPredicate(MatListItemHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {NavListHarnessFilters, NavListItemHarnessFilters} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-nav-list in tests. */\nexport class MatNavListHarness extends MatListHarnessBase<\n  typeof MatNavListItemHarness,\n  MatNavListItemHarness,\n  NavListItemHarnessFilters\n> {\n  /** The selector for the host element of a `MatNavList` instance. */\n  static hostSelector = '.mat-nav-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatNavListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which nav list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: NavListHarnessFilters = {}): HarnessPredicate<MatNavListHarness> {\n    return new HarnessPredicate(MatNavListHarness, options);\n  }\n\n  override _itemHarness = MatNavListItemHarness;\n}\n\n/** Harness for interacting with a nav list item. */\nexport class MatNavListItemHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListItem` instance. */\n  static hostSelector = `${MatNavListHarness.hostSelector} .mat-list-item`;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatNavListItemHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which nav list item instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: NavListItemHarnessFilters = {}): HarnessPredicate<MatNavListItemHarness> {\n    return getListItemPredicate(MatNavListItemHarness, options).addOption(\n      'href',\n      options.href,\n      async (harness, href) => HarnessPredicate.stringMatches(harness.getHref(), href),\n    );\n  }\n\n  /** Gets the href for this nav list item. */\n  async getHref(): Promise<string | null> {\n    return (await this.host()).getAttribute('href');\n  }\n\n  /** Clicks on the nav list item. */\n  async click(): Promise<void> {\n    return (await this.host()).click();\n  }\n\n  /** Focuses the nav list item. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the nav list item. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the nav list item is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {MatListOptionCheckboxPosition} from '@angular/material/list';\nimport {MatListHarnessBase} from './list-harness-base';\nimport {\n  ListItemHarnessFilters,\n  ListOptionHarnessFilters,\n  SelectionListHarnessFilters,\n} from './list-harness-filters';\nimport {getListItemPredicate, MatListItemHarnessBase} from './list-item-harness-base';\n\n/** Harness for interacting with a standard mat-selection-list in tests. */\nexport class MatSelectionListHarness extends MatListHarnessBase<\n  typeof MatListOptionHarness,\n  MatListOptionHarness,\n  ListOptionHarnessFilters\n> {\n  /** The selector for the host element of a `MatSelectionList` instance. */\n  static hostSelector = '.mat-selection-list';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSelectionListHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which selection list instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: SelectionListHarnessFilters = {},\n  ): HarnessPredicate<MatSelectionListHarness> {\n    return new HarnessPredicate(MatSelectionListHarness, options);\n  }\n\n  override _itemHarness = MatListOptionHarness;\n\n  /** Whether the selection list is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await (await this.host()).getAttribute('aria-disabled')) === 'true';\n  }\n\n  /**\n   * Selects all items matching any of the given filters.\n   * @param filters Filters that specify which items should be selected.\n   */\n  async selectItems(...filters: ListOptionHarnessFilters[]): Promise<void> {\n    const items = await this._getItems(filters);\n    await parallel(() => items.map(item => item.select()));\n  }\n\n  /**\n   * Deselects all items matching any of the given filters.\n   * @param filters Filters that specify which items should be deselected.\n   */\n  async deselectItems(...filters: ListItemHarnessFilters[]): Promise<void> {\n    const items = await this._getItems(filters);\n    await parallel(() => items.map(item => item.deselect()));\n  }\n\n  /** Gets all items matching the given list of filters. */\n  private async _getItems(filters: ListOptionHarnessFilters[]): Promise<MatListOptionHarness[]> {\n    if (!filters.length) {\n      return this.getItems();\n    }\n    const matches = await parallel(() => {\n      return filters.map(filter => this.locatorForAll(MatListOptionHarness.with(filter))());\n    });\n    return matches.reduce((result, current) => [...result, ...current], []);\n  }\n}\n\n/** Harness for interacting with a list option. */\nexport class MatListOptionHarness extends MatListItemHarnessBase {\n  /** The selector for the host element of a `MatListOption` instance. */\n  static hostSelector = '.mat-list-option';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatListOptionHarness` that\n   * meets certain criteria.\n   * @param options Options for filtering which list option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: ListOptionHarnessFilters = {}): HarnessPredicate<MatListOptionHarness> {\n    return getListItemPredicate(MatListOptionHarness, options).addOption(\n      'is selected',\n      options.selected,\n      async (harness, selected) => (await harness.isSelected()) === selected,\n    );\n  }\n\n  private _itemContent = this.locatorFor('.mat-list-item-content');\n\n  /** Gets the position of the checkbox relative to the list option content. */\n  async getCheckboxPosition(): Promise<MatListOptionCheckboxPosition> {\n    return (await (await this._itemContent()).hasClass('mat-list-item-content-reverse'))\n      ? 'after'\n      : 'before';\n  }\n\n  /** Whether the list option is selected. */\n  async isSelected(): Promise<boolean> {\n    return (await (await this.host()).getAttribute('aria-selected')) === 'true';\n  }\n\n  /** Focuses the list option. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the list option. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Whether the list option is focused. */\n  async isFocused(): Promise<boolean> {\n    return (await this.host()).isFocused();\n  }\n\n  /** Toggles the checked state of the checkbox. */\n  async toggle() {\n    return (await this.host()).click();\n  }\n\n  /**\n   * Puts the list option in a checked state by toggling it if it is currently unchecked, or doing\n   * nothing if it is already checked.\n   */\n  async select() {\n    if (!(await this.isSelected())) {\n      return this.toggle();\n    }\n  }\n\n  /**\n   * Puts the list option in an unchecked state by toggling it if it is currently checked, or doing\n   * nothing if it is already unchecked.\n   */\n  async deselect() {\n    if (await this.isSelected()) {\n      return this.toggle();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './action-list-harness';\nexport * from './list-harness';\nexport * from './list-harness-filters';\nexport * from './nav-list-harness';\nexport * from './selection-list-harness';\nexport {MatListItemSection} from './list-item-harness-base';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}