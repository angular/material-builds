{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material/legacy-tabs/testing/tab-harness.ts","../../../../../../../src/material/legacy-tabs/testing/tab-group-harness.ts","../../../../../../../src/material/legacy-tabs/testing/tab-link-harness.ts","../../../../../../../src/material/legacy-tabs/testing/tab-nav-panel-harness.ts","../../../../../../../src/material/legacy-tabs/testing/tab-nav-bar-harness.ts","../../../../../../../src/material/legacy-tabs/testing/public-api.ts","../../../../../../../src/material/legacy-tabs/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ContentContainerComponentHarness,\n  HarnessLoader,\n  HarnessPredicate,\n} from '@angular/cdk/testing';\nimport {LegacyTabHarnessFilters} from './tab-harness-filters';\n\n/**\n * Harness for interacting with a standard Angular Material tab-label in tests.\n * @deprecated Use `MatTabHarness` from `@angular/material/tabs/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTabHarness extends ContentContainerComponentHarness<string> {\n  /** The selector for the host element of a `MatTab` instance. */\n  static hostSelector = '.mat-tab-label';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: LegacyTabHarnessFilters = {}): HarnessPredicate<MatLegacyTabHarness> {\n    return new HarnessPredicate(MatLegacyTabHarness, options).addOption(\n      'label',\n      options.label,\n      (harness, label) => HarnessPredicate.stringMatches(harness.getLabel(), label),\n    );\n  }\n\n  /** Gets the label of the tab. */\n  async getLabel(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Gets the aria-label of the tab. */\n  async getAriaLabel(): Promise<string | null> {\n    return (await this.host()).getAttribute('aria-label');\n  }\n\n  /** Gets the value of the \"aria-labelledby\" attribute. */\n  async getAriaLabelledby(): Promise<string | null> {\n    return (await this.host()).getAttribute('aria-labelledby');\n  }\n\n  /** Whether the tab is selected. */\n  async isSelected(): Promise<boolean> {\n    const hostEl = await this.host();\n    return (await hostEl.getAttribute('aria-selected')) === 'true';\n  }\n\n  /** Whether the tab is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const hostEl = await this.host();\n    return (await hostEl.getAttribute('aria-disabled')) === 'true';\n  }\n\n  /** Selects the given tab by clicking on the label. Tab cannot be selected if disabled. */\n  async select(): Promise<void> {\n    await (await this.host()).click();\n  }\n\n  /** Gets the text content of the tab. */\n  async getTextContent(): Promise<string> {\n    const contentId = await this._getContentId();\n    const contentEl = await this.documentRootLocatorFactory().locatorFor(`#${contentId}`)();\n    return contentEl.text();\n  }\n\n  protected override async getRootHarnessLoader(): Promise<HarnessLoader> {\n    const contentId = await this._getContentId();\n    return this.documentRootLocatorFactory().harnessLoaderFor(`#${contentId}`);\n  }\n\n  /** Gets the element id for the content of the current tab. */\n  private async _getContentId(): Promise<string> {\n    const hostEl = await this.host();\n    // Tabs never have an empty \"aria-controls\" attribute.\n    return (await hostEl.getAttribute('aria-controls'))!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {LegacyTabGroupHarnessFilters, LegacyTabHarnessFilters} from './tab-harness-filters';\nimport {MatLegacyTabHarness} from './tab-harness';\n\n/**\n * Harness for interacting with a standard mat-tab-group in tests.\n * @deprecated Use `MatTabGroupHarness` from `@angular/material/tabs/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTabGroupHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabGroup` instance. */\n  static hostSelector = '.mat-tab-group';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabGroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab group instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: LegacyTabGroupHarnessFilters = {},\n  ): HarnessPredicate<MatLegacyTabGroupHarness> {\n    return new HarnessPredicate(MatLegacyTabGroupHarness, options).addOption(\n      'selectedTabLabel',\n      options.selectedTabLabel,\n      async (harness, label) => {\n        const selectedTab = await harness.getSelectedTab();\n        return HarnessPredicate.stringMatches(await selectedTab.getLabel(), label);\n      },\n    );\n  }\n\n  /**\n   * Gets the list of tabs in the tab group.\n   * @param filter Optionally filters which tabs are included.\n   */\n  async getTabs(filter: LegacyTabHarnessFilters = {}): Promise<MatLegacyTabHarness[]> {\n    return this.locatorForAll(MatLegacyTabHarness.with(filter))();\n  }\n\n  /** Gets the selected tab of the tab group. */\n  async getSelectedTab(): Promise<MatLegacyTabHarness> {\n    const tabs = await this.getTabs();\n    const isSelected = await parallel(() => tabs.map(t => t.isSelected()));\n    for (let i = 0; i < tabs.length; i++) {\n      if (isSelected[i]) {\n        return tabs[i];\n      }\n    }\n    throw new Error('No selected tab could be found.');\n  }\n\n  /**\n   * Selects a tab in this tab group.\n   * @param filter An optional filter to apply to the child tabs. The first tab matching the filter\n   *     will be selected.\n   */\n  async selectTab(filter: LegacyTabHarnessFilters = {}): Promise<void> {\n    const tabs = await this.getTabs(filter);\n    if (!tabs.length) {\n      throw Error(`Cannot find mat-tab matching filter ${JSON.stringify(filter)}`);\n    }\n    await tabs[0].select();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {LegacyTabLinkHarnessFilters} from './tab-harness-filters';\n\n/**\n * Harness for interacting with a standard Angular Material tab link in tests.\n * @deprecated Use `MatTabLinkHarness` from `@angular/material/tabs/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTabLinkHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabLink` instance. */\n  static hostSelector = '.mat-tab-link';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabLinkHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab link instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: LegacyTabLinkHarnessFilters = {},\n  ): HarnessPredicate<MatLegacyTabLinkHarness> {\n    return new HarnessPredicate(MatLegacyTabLinkHarness, options).addOption(\n      'label',\n      options.label,\n      (harness, label) => HarnessPredicate.stringMatches(harness.getLabel(), label),\n    );\n  }\n\n  /** Gets the label of the link. */\n  async getLabel(): Promise<string> {\n    return (await this.host()).text();\n  }\n\n  /** Whether the link is active. */\n  async isActive(): Promise<boolean> {\n    const host = await this.host();\n    return host.hasClass('mat-tab-label-active');\n  }\n\n  /** Whether the link is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const host = await this.host();\n    return host.hasClass('mat-tab-disabled');\n  }\n\n  /** Clicks on the link. */\n  async click(): Promise<void> {\n    await (await this.host()).click();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ContentContainerComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {LegacyTabNavPanelHarnessFilters} from './tab-harness-filters';\n\n/**\n * Harness for interacting with a standard mat-tab-nav-panel in tests.\n * @deprecated Use `MatTabNavPanelHarness` from `@angular/material/tabs/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTabNavPanelHarness extends ContentContainerComponentHarness {\n  /** The selector for the host element of a `MatTabNavPanel` instance. */\n  static hostSelector = '.mat-tab-nav-panel';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabNavPanel` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab nav panel instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: LegacyTabNavPanelHarnessFilters = {},\n  ): HarnessPredicate<MatLegacyTabNavPanelHarness> {\n    return new HarnessPredicate(MatLegacyTabNavPanelHarness, options);\n  }\n\n  /** Gets the tab panel text content. */\n  async getTextContent(): Promise<string> {\n    return (await this.host()).text();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate, parallel} from '@angular/cdk/testing';\nimport {\n  LegacyTabNavBarHarnessFilters,\n  LegacyTabNavPanelHarnessFilters,\n  LegacyTabLinkHarnessFilters,\n} from './tab-harness-filters';\nimport {MatLegacyTabLinkHarness} from './tab-link-harness';\nimport {MatLegacyTabNavPanelHarness} from './tab-nav-panel-harness';\n\n/**\n * Harness for interacting with a standard mat-tab-nav-bar in tests.\n * @deprecated Use `MatTabNavBarHarness` from `@angular/material/tabs/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTabNavBarHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatTabNavBar` instance. */\n  static hostSelector = '.mat-tab-nav-bar';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatTabNavBar` that meets\n   * certain criteria.\n   * @param options Options for filtering which tab nav bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(\n    options: LegacyTabNavBarHarnessFilters = {},\n  ): HarnessPredicate<MatLegacyTabNavBarHarness> {\n    return new HarnessPredicate(MatLegacyTabNavBarHarness, options);\n  }\n\n  /**\n   * Gets the list of links in the nav bar.\n   * @param filter Optionally filters which links are included.\n   */\n  async getLinks(filter: LegacyTabLinkHarnessFilters = {}): Promise<MatLegacyTabLinkHarness[]> {\n    return this.locatorForAll(MatLegacyTabLinkHarness.with(filter))();\n  }\n\n  /** Gets the active link in the nav bar. */\n  async getActiveLink(): Promise<MatLegacyTabLinkHarness> {\n    const links = await this.getLinks();\n    const isActive = await parallel(() => links.map(t => t.isActive()));\n    for (let i = 0; i < links.length; i++) {\n      if (isActive[i]) {\n        return links[i];\n      }\n    }\n    throw new Error('No active link could be found.');\n  }\n\n  /**\n   * Clicks a link inside the nav bar.\n   * @param filter An optional filter to apply to the child link. The first link matching the filter\n   *     will be clicked.\n   */\n  async clickLink(filter: LegacyTabLinkHarnessFilters = {}): Promise<void> {\n    const tabs = await this.getLinks(filter);\n    if (!tabs.length) {\n      throw Error(`Cannot find mat-tab-link matching filter ${JSON.stringify(filter)}`);\n    }\n    await tabs[0].click();\n  }\n\n  /** Gets the panel associated with the nav bar. */\n  async getPanel(): Promise<MatLegacyTabNavPanelHarness> {\n    const link = await this.getActiveLink();\n    const host = await link.host();\n    const panelId = await host.getAttribute('aria-controls');\n    if (!panelId) {\n      throw Error('No panel is controlled by the nav bar.');\n    }\n\n    const filter: LegacyTabNavPanelHarnessFilters = {selector: `#${panelId}`};\n    return await this.documentRootLocatorFactory().locatorFor(\n      MatLegacyTabNavPanelHarness.with(filter),\n    )();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MatLegacyTabGroupHarness} from './tab-group-harness';\nexport {MatLegacyTabHarness} from './tab-harness';\nexport {\n  LegacyTabHarnessFilters,\n  LegacyTabGroupHarnessFilters,\n  LegacyTabLinkHarnessFilters,\n  LegacyTabNavBarHarnessFilters,\n  LegacyTabNavPanelHarnessFilters,\n} from './tab-harness-filters';\nexport {MatLegacyTabNavBarHarness} from './tab-nav-bar-harness';\nexport {MatLegacyTabLinkHarness} from './tab-link-harness';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}