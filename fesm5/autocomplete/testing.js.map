{"version":3,"file":"autocomplete__testing.js","sources":["../../../../../../../src/material/autocomplete/testing/autocomplete-harness.ts","../../../../../../../src/material/autocomplete/testing/public-api.ts","../../../../../../../src/material/autocomplete/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatOptgroupHarness,\n  MatOptionHarness,\n  OptgroupHarnessFilters,\n  OptionHarnessFilters\n} from '@angular/material/core/testing';\nimport {AutocompleteHarnessFilters} from './autocomplete-harness-filters';\n\n/** Harness for interacting with a standard mat-autocomplete in tests. */\nexport class MatAutocompleteHarness extends ComponentHarness {\n  private _documentRootLocator = this.documentRootLocatorFactory();\n\n  /** The selector for the host element of a `MatAutocomplete` instance. */\n  static hostSelector = '.mat-autocomplete-trigger';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatAutocompleteHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which autocomplete instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: AutocompleteHarnessFilters = {}): HarnessPredicate<MatAutocompleteHarness> {\n    return new HarnessPredicate(MatAutocompleteHarness, options)\n        .addOption('value', options.value,\n            (harness, value) => HarnessPredicate.stringMatches(harness.getValue(), value));\n  }\n\n  /** Gets the value of the autocomplete input. */\n  async getValue(): Promise<string> {\n    return (await this.host()).getProperty('value');\n  }\n\n  /** Whether the autocomplete input is disabled. */\n  async isDisabled(): Promise<boolean> {\n    const disabled = (await this.host()).getAttribute('disabled');\n    return coerceBooleanProperty(await disabled);\n  }\n\n  /** Focuses the autocomplete input. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the autocomplete input. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Enters text into the autocomplete. */\n  async enterText(value: string): Promise<void> {\n    return (await this.host()).sendKeys(value);\n  }\n\n  /** Gets the options inside the autocomplete panel. */\n  async getOptions(filters: Omit<OptionHarnessFilters, 'ancestor'> = {}):\n    Promise<MatOptionHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatOptionHarness.with({\n      ...filters,\n      ancestor: await this._getPanelSelector()\n    }))();\n  }\n\n  /** Gets the option groups inside the autocomplete panel. */\n  async getOptionGroups(filters: Omit<OptgroupHarnessFilters, 'ancestor'> = {}):\n    Promise<MatOptgroupHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatOptgroupHarness.with({\n      ...filters,\n      ancestor: await this._getPanelSelector()\n    }))();\n  }\n\n  /** Selects the first option matching the given filters. */\n  async selectOption(filters: OptionHarnessFilters): Promise<void> {\n    await this.focus(); // Focus the input to make sure the autocomplete panel is shown.\n    const options = await this.getOptions(filters);\n    if (!options.length) {\n      throw Error(`Could not find a mat-option matching ${JSON.stringify(filters)}`);\n    }\n    await options[0].click();\n  }\n\n  /** Whether the autocomplete is open. */\n  async isOpen(): Promise<boolean> {\n    const panel = await this._getPanel();\n    return !!panel && await panel.hasClass('mat-autocomplete-visible');\n  }\n\n  /** Gets the panel associated with this autocomplete trigger. */\n  private async _getPanel() {\n    // Technically this is static, but it needs to be in a\n    // function, because the autocomplete's panel ID can changed.\n    return this._documentRootLocator.locatorForOptional(await this._getPanelSelector())();\n  }\n\n  /** Gets the selector that can be used to find the autocomplete trigger's panel. */\n  private async _getPanelSelector(): Promise<string> {\n    return `#${(await (await this.host()).getAttribute('aria-owns'))}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './autocomplete-harness';\nexport * from './autocomplete-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}