{"version":3,"file":"snack-bar__testing.js","sources":["../../../../../../../src/material/snack-bar/testing/snack-bar-harness.ts","../../../../../../../src/material/snack-bar/testing/public-api.ts","../../../../../../../src/material/snack-bar/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {SnackBarHarnessFilters} from './snack-bar-harness-filters';\n\n/** Harness for interacting with a standard mat-snack-bar in tests. */\nexport class MatSnackBarHarness extends ComponentHarness {\n  // Developers can provide a custom component or template for the\n  // snackbar. The canonical snack-bar parent is the \"MatSnackBarContainer\".\n  /** The selector for the host element of a `MatSnackBar` instance. */\n  static hostSelector = '.mat-snack-bar-container';\n\n  private _simpleSnackBar = this.locatorForOptional('.mat-simple-snackbar');\n  private _simpleSnackBarMessage = this.locatorFor('.mat-simple-snackbar > span');\n  private _simpleSnackBarActionButton =\n      this.locatorForOptional('.mat-simple-snackbar-action > button');\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSnackBarHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which snack bar instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SnackBarHarnessFilters = {}): HarnessPredicate<MatSnackBarHarness> {\n    return new HarnessPredicate(MatSnackBarHarness, options);\n  }\n\n  /**\n   * Gets the role of the snack-bar. The role of a snack-bar is determined based\n   * on the ARIA politeness specified in the snack-bar config.\n   */\n  async getRole(): Promise<'alert'|'status'|null> {\n    return (await this.host()).getAttribute('role') as Promise<'alert'|'status'|null>;\n  }\n\n  /**\n   * Whether the snack-bar has an action. Method cannot be used for snack-bar's with custom content.\n   */\n  async hasAction(): Promise<boolean> {\n    await this._assertSimpleSnackBar();\n    return (await this._simpleSnackBarActionButton()) !== null;\n  }\n\n  /**\n   * Gets the description of the snack-bar. Method cannot be used for snack-bar's without action or\n   * with custom content.\n   */\n  async getActionDescription(): Promise<string> {\n    await this._assertSimpleSnackBarWithAction();\n    return (await this._simpleSnackBarActionButton())!.text();\n  }\n\n\n  /**\n   * Dismisses the snack-bar by clicking the action button. Method cannot be used for snack-bar's\n   * without action or with custom content.\n   */\n  async dismissWithAction(): Promise<void> {\n    await this._assertSimpleSnackBarWithAction();\n    await (await this._simpleSnackBarActionButton())!.click();\n  }\n\n  /**\n   * Gets the message of the snack-bar. Method cannot be used for snack-bar's with custom content.\n   */\n  async getMessage(): Promise<string> {\n    await this._assertSimpleSnackBar();\n    return (await this._simpleSnackBarMessage()).text();\n  }\n\n  /** Gets whether the snack-bar has been dismissed. */\n  async isDismissed(): Promise<boolean> {\n    // We consider the snackbar dismissed if it's not in the DOM. We can assert that the\n    // element isn't in the DOM by seeing that its width and height are zero.\n\n    const host = await this.host();\n    const [exit, dimensions] = await Promise.all([\n      // The snackbar container is marked with the \"exit\" attribute after it has been dismissed\n      // but before the animation has finished (after which it's removed from the DOM).\n      host.getAttribute('mat-exit'),\n      host.getDimensions(),\n    ]);\n\n    return exit != null || (!!dimensions && dimensions.height === 0 && dimensions.width === 0);\n  }\n\n  /**\n   * Asserts that the current snack-bar does not use custom content. Promise rejects if\n   * custom content is used.\n   */\n  private async _assertSimpleSnackBar(): Promise<void> {\n    if (!await this._isSimpleSnackBar()) {\n      throw Error('Method cannot be used for snack-bar with custom content.');\n    }\n  }\n\n  /**\n   * Asserts that the current snack-bar does not use custom content and has\n   * an action defined. Otherwise the promise will reject.\n   */\n  private async _assertSimpleSnackBarWithAction(): Promise<void> {\n    await this._assertSimpleSnackBar();\n    if (!await this.hasAction()) {\n      throw Error('Method cannot be used for standard snack-bar without action.');\n    }\n  }\n\n  /** Whether the snack-bar is using the default content template. */\n  private async _isSimpleSnackBar(): Promise<boolean> {\n    return await this._simpleSnackBar() !== null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-harness';\nexport * from './snack-bar-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}