{"version":3,"file":"select__testing.js","sources":["../../../../../../../src/material/select/testing/select-harness.ts","../../../../../../../src/material/select/testing/public-api.ts","../../../../../../../src/material/select/testing/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {MatFormFieldControlHarness} from '@angular/material/form-field/testing/control';\nimport {\n  MatOptionHarness,\n  MatOptgroupHarness,\n  OptionHarnessFilters,\n  OptgroupHarnessFilters,\n} from '@angular/material/core/testing';\nimport {SelectHarnessFilters} from './select-harness-filters';\n\n\n/** Harness for interacting with a standard mat-select in tests. */\nexport class MatSelectHarness extends MatFormFieldControlHarness {\n  private _documentRootLocator = this.documentRootLocatorFactory();\n  private _backdrop = this._documentRootLocator.locatorFor('.cdk-overlay-backdrop');\n  private _trigger = this.locatorFor('.mat-select-trigger');\n  private _value = this.locatorFor('.mat-select-value');\n\n  static hostSelector = '.mat-select';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatSelectHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which select instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: SelectHarnessFilters = {}): HarnessPredicate<MatSelectHarness> {\n    return new HarnessPredicate(MatSelectHarness, options);\n  }\n\n  /** Gets a boolean promise indicating if the select is disabled. */\n  async isDisabled(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-disabled');\n  }\n\n  /** Gets a boolean promise indicating if the select is valid. */\n  async isValid(): Promise<boolean> {\n    return !(await (await this.host()).hasClass('ng-invalid'));\n  }\n\n  /** Gets a boolean promise indicating if the select is required. */\n  async isRequired(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-required');\n  }\n\n  /** Gets a boolean promise indicating if the select is empty (no value is selected). */\n  async isEmpty(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-select-empty');\n  }\n\n  /** Gets a boolean promise indicating if the select is in multi-selection mode. */\n  async isMultiple(): Promise<boolean> {\n    const ariaMultiselectable = (await this.host()).getAttribute('aria-multiselectable');\n    return (await ariaMultiselectable) === 'true';\n  }\n\n  /** Gets a promise for the select's value text. */\n  async getValueText(): Promise<string> {\n    return (await this._value()).text();\n  }\n\n  /** Focuses the select and returns a void promise that indicates when the action is complete. */\n  async focus(): Promise<void> {\n    return (await this.host()).focus();\n  }\n\n  /** Blurs the select and returns a void promise that indicates when the action is complete. */\n  async blur(): Promise<void> {\n    return (await this.host()).blur();\n  }\n\n  /** Gets the options inside the select panel. */\n  async getOptions(filter: Omit<OptionHarnessFilters, 'ancestor'> = {}):\n    Promise<MatOptionHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatOptionHarness.with({\n      ...filter,\n      ancestor: await this._getPanelSelector()\n    }))();\n  }\n\n  /** Gets the groups of options inside the panel. */\n  async getOptionGroups(filter: Omit<OptgroupHarnessFilters, 'ancestor'> = {}):\n    Promise<MatOptgroupHarness[]> {\n    return this._documentRootLocator.locatorForAll(MatOptgroupHarness.with({\n      ...filter,\n      ancestor: await this._getPanelSelector()\n    }))();\n  }\n\n  /** Gets whether the select is open. */\n  async isOpen(): Promise<boolean> {\n    return !!await this._documentRootLocator.locatorForOptional(await this._getPanelSelector())();\n  }\n\n  /** Opens the select's panel. */\n  async open(): Promise<void> {\n    if (!await this.isOpen()) {\n      return (await this._trigger()).click();\n    }\n  }\n\n  /**\n   * Clicks the options that match the passed-in filter. If the select is in multi-selection\n   * mode all options will be clicked, otherwise the harness will pick the first matching option.\n   */\n  async clickOptions(filter: OptionHarnessFilters = {}): Promise<void> {\n    await this.open();\n\n    const [isMultiple, options] = await Promise.all([this.isMultiple(), this.getOptions(filter)]);\n\n    if (options.length === 0) {\n      throw Error('Select does not have options matching the specified filter');\n    }\n\n    if (isMultiple) {\n      await Promise.all(options.map(option => option.click()));\n    } else {\n      await options[0].click();\n    }\n  }\n\n  /** Closes the select's panel. */\n  async close(): Promise<void> {\n    if (await this.isOpen()) {\n      // This is the most consistent way that works both in both single and multi-select modes,\n      // but it assumes that only one overlay is open at a time. We should be able to make it\n      // a bit more precise after #16645 where we can dispatch an ESCAPE press to the host instead.\n      return (await this._backdrop()).click();\n    }\n  }\n\n  /** Gets the selector that should be used to find this select's panel. */\n  private async _getPanelSelector(): Promise<string> {\n    const id = await (await this.host()).getAttribute('id');\n    return `#${id}-panel`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-harness';\nexport * from './select-harness-filters';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}