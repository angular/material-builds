{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material/dialog/testing/dialog-harness.ts","../../../../../../../src/material/dialog/testing/dialog-opener.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ComponentHarnessConstructor,\n  ContentContainerComponentHarness,\n  HarnessPredicate,\n  TestKey,\n} from '@angular/cdk/testing';\nimport {DialogHarnessFilters} from './dialog-harness-filters';\nimport {DialogRole} from '@angular/material/dialog';\n\n/** Selectors for different sections of the mat-dialog that can contain user content. */\nexport const enum MatDialogSection {\n  TITLE = '.mat-mdc-dialog-title',\n  CONTENT = '.mat-mdc-dialog-content',\n  ACTIONS = '.mat-mdc-dialog-actions',\n}\n\n/** Base class for the `MatDialogHarness` implementation. */\nexport class _MatDialogHarnessBase\n  // @breaking-change 14.0.0 change generic type to MatDialogSection.\n  extends ContentContainerComponentHarness<MatDialogSection | string>\n{\n  protected _title = this.locatorForOptional(MatDialogSection.TITLE);\n  protected _content = this.locatorForOptional(MatDialogSection.CONTENT);\n  protected _actions = this.locatorForOptional(MatDialogSection.ACTIONS);\n\n  /** Gets the id of the dialog. */\n  async getId(): Promise<string | null> {\n    const id = await (await this.host()).getAttribute('id');\n    // In case no id has been specified, the \"id\" property always returns\n    // an empty string. To make this method more explicit, we return null.\n    return id !== '' ? id : null;\n  }\n\n  /** Gets the role of the dialog. */\n  async getRole(): Promise<DialogRole | null> {\n    return (await this.host()).getAttribute('role') as Promise<DialogRole | null>;\n  }\n\n  /** Gets the value of the dialog's \"aria-label\" attribute. */\n  async getAriaLabel(): Promise<string | null> {\n    return (await this.host()).getAttribute('aria-label');\n  }\n\n  /** Gets the value of the dialog's \"aria-labelledby\" attribute. */\n  async getAriaLabelledby(): Promise<string | null> {\n    return (await this.host()).getAttribute('aria-labelledby');\n  }\n\n  /** Gets the value of the dialog's \"aria-describedby\" attribute. */\n  async getAriaDescribedby(): Promise<string | null> {\n    return (await this.host()).getAttribute('aria-describedby');\n  }\n\n  /**\n   * Closes the dialog by pressing escape.\n   *\n   * Note: this method does nothing if `disableClose` has been set to `true` for the dialog.\n   */\n  async close(): Promise<void> {\n    await (await this.host()).sendKeys(TestKey.ESCAPE);\n  }\n\n  /** Gets te dialog's text. */\n  async getText() {\n    return (await this.host()).text();\n  }\n\n  /** Gets the dialog's title text. This only works if the dialog is using mat-dialog-title. */\n  async getTitleText() {\n    return (await this._title())?.text() ?? '';\n  }\n\n  /** Gets the dialog's content text. This only works if the dialog is using mat-dialog-content. */\n  async getContentText() {\n    return (await this._content())?.text() ?? '';\n  }\n\n  /** Gets the dialog's actions text. This only works if the dialog is using mat-dialog-actions. */\n  async getActionsText() {\n    return (await this._actions())?.text() ?? '';\n  }\n}\n\n/** Harness for interacting with a standard `MatDialog` in tests. */\nexport class MatDialogHarness extends _MatDialogHarnessBase {\n  /** The selector for the host element of a `MatDialog` instance. */\n  static hostSelector = '.mat-mdc-dialog-container';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a dialog with specific attributes.\n   * @param options Options for filtering which dialog instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with<T extends MatDialogHarness>(\n    this: ComponentHarnessConstructor<T>,\n    options: DialogHarnessFilters = {},\n  ): HarnessPredicate<T> {\n    return new HarnessPredicate(this, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentType} from '@angular/cdk/overlay';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  NgModule,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogConfig,\n  MatDialogContainer,\n  MatDialogModule,\n  _MatDialogBase,\n  _MatDialogContainerBase,\n  MatDialogRef,\n} from '@angular/material/dialog';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/** Base class for a component that immediately opens a dialog when created. */\n@Directive()\nexport class _MatTestDialogOpenerBase<C extends _MatDialogContainerBase, T, R>\n  implements OnDestroy\n{\n  /** Component that should be opened with the MatDialog `open` method. */\n  protected static component: ComponentType<unknown> | undefined;\n\n  /** Config that should be provided to the MatDialog `open` method. */\n  protected static config: MatDialogConfig | undefined;\n\n  /** MatDialogRef returned from the MatDialog `open` method. */\n  dialogRef: MatDialogRef<T, R>;\n\n  /** Data passed to the `MatDialog` close method. */\n  closedResult: R | undefined;\n\n  private readonly _afterClosedSubscription: Subscription;\n\n  constructor(public dialog: _MatDialogBase<C>) {\n    if (!_MatTestDialogOpenerBase.component) {\n      throw new Error(`MatTestDialogOpener does not have a component provided.`);\n    }\n\n    this.dialogRef = this.dialog.open<T, R>(\n      _MatTestDialogOpenerBase.component as ComponentType<T>,\n      _MatTestDialogOpenerBase.config || {},\n    );\n    this._afterClosedSubscription = this.dialogRef.afterClosed().subscribe(result => {\n      this.closedResult = result;\n    });\n  }\n\n  ngOnDestroy() {\n    this._afterClosedSubscription.unsubscribe();\n    _MatTestDialogOpenerBase.component = undefined;\n    _MatTestDialogOpenerBase.config = undefined;\n  }\n}\n\n/** Test component that immediately opens a dialog when bootstrapped. */\n@Component({\n  selector: 'mat-test-dialog-opener',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatTestDialogOpener<T = unknown, R = unknown> extends _MatTestDialogOpenerBase<\n  MatDialogContainer,\n  T,\n  R\n> {\n  constructor(dialog: MatDialog) {\n    super(dialog);\n  }\n\n  /** Static method that prepares this class to open the provided component. */\n  static withComponent<T = unknown, R = unknown>(\n    component: ComponentType<T>,\n    config?: MatDialogConfig,\n  ) {\n    _MatTestDialogOpenerBase.component = component;\n    _MatTestDialogOpenerBase.config = config;\n    return MatTestDialogOpener as ComponentType<MatTestDialogOpener<T, R>>;\n  }\n}\n\n@NgModule({\n  declarations: [MatTestDialogOpener],\n  imports: [MatDialogModule, NoopAnimationsModule],\n})\nexport class MatTestDialogOpenerModule {}\n"],"names":[],"mappings":"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"}