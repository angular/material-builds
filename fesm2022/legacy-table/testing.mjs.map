{"version":3,"file":"testing.mjs","sources":["../../../../../../../src/material/legacy-table/testing/cell-harness.ts","../../../../../../../src/material/legacy-table/testing/row-harness.ts","../../../../../../../src/material/legacy-table/testing/table-harness.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {_MatCellHarnessBase, CellHarnessFilters} from '@angular/material/table/testing';\n\n/**\n * Harness for interacting with a standard Angular Material table cell.\n * @deprecated Use `MatCellHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyCellHarness extends _MatCellHarnessBase {\n  /** The selector for the host element of a `MatCellHarness` instance. */\n  static hostSelector = '.mat-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatLegacyCellHarness> {\n    return _MatCellHarnessBase._getCellPredicate(this, options);\n  }\n}\n\n/**\n * Harness for interacting with a standard Angular Material table header cell.\n * @deprecated Use `MatHeaderCellHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyHeaderCellHarness extends _MatCellHarnessBase {\n  /** The selector for the host element of a `MatHeaderCellHarness` instance. */\n  static hostSelector = '.mat-header-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatLegacyHeaderCellHarness> {\n    return _MatCellHarnessBase._getCellPredicate(this, options);\n  }\n}\n\n/**\n * Harness for interacting with a standard Angular Material table footer cell.\n * @deprecated Use `MatFooterCellHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyFooterCellHarness extends _MatCellHarnessBase {\n  /** The selector for the host element of a `MatFooterCellHarness` instance. */\n  static hostSelector = '.mat-footer-cell';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: CellHarnessFilters = {}): HarnessPredicate<MatLegacyFooterCellHarness> {\n    return _MatCellHarnessBase._getCellPredicate(this, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatLegacyCellHarness,\n  MatLegacyFooterCellHarness,\n  MatLegacyHeaderCellHarness,\n} from './cell-harness';\nimport {_MatRowHarnessBase, RowHarnessFilters} from '@angular/material/table/testing';\n\n/**\n * Harness for interacting with a standard Angular Material table row.\n * @deprecated Use `MatRowHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyRowHarness extends _MatRowHarnessBase<\n  typeof MatLegacyCellHarness,\n  MatLegacyCellHarness\n> {\n  /** The selector for the host element of a `MatRowHarness` instance. */\n  static hostSelector = '.mat-row';\n  protected _cellHarness = MatLegacyCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatLegacyRowHarness> {\n    return new HarnessPredicate(MatLegacyRowHarness, options);\n  }\n}\n\n/**\n * Harness for interacting with a standard Angular Material table header row.\n * @deprecated Use `MatHeaderRowHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyHeaderRowHarness extends _MatRowHarnessBase<\n  typeof MatLegacyHeaderCellHarness,\n  MatLegacyHeaderCellHarness\n> {\n  /** The selector for the host element of a `MatHeaderRowHarness` instance. */\n  static hostSelector = '.mat-header-row';\n  protected _cellHarness = MatLegacyHeaderCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table header row with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatLegacyHeaderRowHarness> {\n    return new HarnessPredicate(MatLegacyHeaderRowHarness, options);\n  }\n}\n\n/**\n * Harness for interacting with a standard Angular Material table footer row.\n * @deprecated Use `MatFooterRowHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyFooterRowHarness extends _MatRowHarnessBase<\n  typeof MatLegacyFooterCellHarness,\n  MatLegacyFooterCellHarness\n> {\n  /** The selector for the host element of a `MatFooterRowHarness` instance. */\n  static hostSelector = '.mat-footer-row';\n  protected _cellHarness = MatLegacyFooterCellHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for\n   * a table footer row cell with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: RowHarnessFilters = {}): HarnessPredicate<MatLegacyFooterRowHarness> {\n    return new HarnessPredicate(MatLegacyFooterRowHarness, options);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HarnessPredicate} from '@angular/cdk/testing';\nimport {\n  MatLegacyFooterRowHarness,\n  MatLegacyHeaderRowHarness,\n  MatLegacyRowHarness,\n} from './row-harness';\nimport {_MatTableHarnessBase, TableHarnessFilters} from '@angular/material/table/testing';\n\n/**\n * Harness for interacting with a standard mat-table in tests.\n * @deprecated Use `MatTableHarness` from `@angular/material/table/testing` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nexport class MatLegacyTableHarness extends _MatTableHarnessBase<\n  typeof MatLegacyHeaderRowHarness,\n  MatLegacyHeaderRowHarness,\n  typeof MatLegacyRowHarness,\n  MatLegacyRowHarness,\n  typeof MatLegacyFooterRowHarness,\n  MatLegacyFooterRowHarness\n> {\n  /** The selector for the host element of a `MatTableHarness` instance. */\n  static hostSelector = '.mat-table';\n  protected _headerRowHarness = MatLegacyHeaderRowHarness;\n  protected _rowHarness = MatLegacyRowHarness;\n  protected _footerRowHarness = MatLegacyFooterRowHarness;\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a table with specific attributes.\n   * @param options Options for narrowing the search\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: TableHarnessFilters = {}): HarnessPredicate<MatLegacyTableHarness> {\n    return new HarnessPredicate(MatLegacyTableHarness, options);\n  }\n}\n"],"names":[],"mappings":";;;;AAWA;;;;AAIG;AACH,MAAa,oBAAqB,SAAQ,mBAAmB,CAAA;;aAEpD,IAAY,CAAA,YAAA,GAAG,WAAW,CAAC,EAAA;AAElC;;;;AAIG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA8B,EAAE,EAAA;QAC1C,OAAO,mBAAmB,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC7D;;AAGH;;;;AAIG;AACH,MAAa,0BAA2B,SAAQ,mBAAmB,CAAA;;aAE1D,IAAY,CAAA,YAAA,GAAG,kBAAkB,CAAC,EAAA;AAEzC;;;;;AAKG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA8B,EAAE,EAAA;QAC1C,OAAO,mBAAmB,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC7D;;AAGH;;;;AAIG;AACH,MAAa,0BAA2B,SAAQ,mBAAmB,CAAA;;aAE1D,IAAY,CAAA,YAAA,GAAG,kBAAkB,CAAC,EAAA;AAEzC;;;;;AAKG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA8B,EAAE,EAAA;QAC1C,OAAO,mBAAmB,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAC7D;;;ACnDH;;;;AAIG;AACH,MAAa,mBAAoB,SAAQ,kBAGxC,CAAA;AAHD,IAAA,WAAA,GAAA;;QAMY,IAAY,CAAA,YAAA,GAAG,oBAAoB,CAAC;KAU/C;;aAXQ,IAAY,CAAA,YAAA,GAAG,UAAH,CAAc,EAAA;AAGjC;;;;AAIG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA6B,EAAE,EAAA;AACzC,QAAA,OAAO,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;KAC3D;;AAGH;;;;AAIG;AACH,MAAa,yBAA0B,SAAQ,kBAG9C,CAAA;AAHD,IAAA,WAAA,GAAA;;QAMY,IAAY,CAAA,YAAA,GAAG,0BAA0B,CAAC;KAWrD;;aAZQ,IAAY,CAAA,YAAA,GAAG,iBAAH,CAAqB,EAAA;AAGxC;;;;;AAKG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA6B,EAAE,EAAA;AACzC,QAAA,OAAO,IAAI,gBAAgB,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;KACjE;;AAGH;;;;AAIG;AACH,MAAa,yBAA0B,SAAQ,kBAG9C,CAAA;AAHD,IAAA,WAAA,GAAA;;QAMY,IAAY,CAAA,YAAA,GAAG,0BAA0B,CAAC;KAWrD;;aAZQ,IAAY,CAAA,YAAA,GAAG,iBAAH,CAAqB,EAAA;AAGxC;;;;;AAKG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA6B,EAAE,EAAA;AACzC,QAAA,OAAO,IAAI,gBAAgB,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;KACjE;;;ACpEH;;;;AAIG;AACH,MAAa,qBAAsB,SAAQ,oBAO1C,CAAA;AAPD,IAAA,WAAA,GAAA;;QAUY,IAAiB,CAAA,iBAAA,GAAG,yBAAyB,CAAC;QAC9C,IAAW,CAAA,WAAA,GAAG,mBAAmB,CAAC;QAClC,IAAiB,CAAA,iBAAA,GAAG,yBAAyB,CAAC;KAUzD;;aAbQ,IAAY,CAAA,YAAA,GAAG,YAAH,CAAgB,EAAA;AAKnC;;;;AAIG;AACH,IAAA,OAAO,IAAI,CAAC,OAAA,GAA+B,EAAE,EAAA;AAC3C,QAAA,OAAO,IAAI,gBAAgB,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;KAC7D;;;;;"}