{"version":3,"file":"slider.mjs","sources":["../../../../../../src/material/slider/global-change-and-input-listener.ts","../../../../../../src/material/slider/slider.ts","../../../../../../src/material/slider/slider-thumb.html","../../../../../../src/material/slider/slider.html","../../../../../../src/material/slider/module.ts","../../../../../../src/material/slider/public-api.ts","../../../../../../src/material/slider/index.ts","../../../../../../src/material/slider/slider_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone, OnDestroy} from '@angular/core';\nimport {SpecificEventListener} from '@material/base';\nimport {fromEvent, Observable, Subject, Subscription} from 'rxjs';\nimport {finalize, share, takeUntil} from 'rxjs/operators';\n\n/**\n * Handles listening for all change and input events that occur on the document.\n *\n * This service exposes a single method #listen to allow users to subscribe to change and input\n * events that occur on the document. Since listening for these events can be expensive, we use\n * #fromEvent which will lazily attach a listener when the first subscription is made and remove the\n * listener once the last observer unsubscribes.\n */\n@Injectable({providedIn: 'root'})\nexport class GlobalChangeAndInputListener<K extends 'change' | 'input'> implements OnDestroy {\n  /** The injected document if available or fallback to the global document reference. */\n  private _document: Document;\n\n  /** Stores the subjects that emit the events that occur on the global document. */\n  private _observables = new Map<K, Observable<Event>>();\n\n  /** The notifier that triggers the global event observables to stop emitting and complete. */\n  private _destroyed = new Subject();\n\n  constructor(@Inject(DOCUMENT) document: any, private _ngZone: NgZone) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._observables.clear();\n  }\n\n  /** Returns a subscription to global change or input events. */\n  listen(type: K, callback: SpecificEventListener<K>): Subscription {\n    // If this is the first time we are listening to this event, create the observable for it.\n    if (!this._observables.has(type)) {\n      this._observables.set(type, this._createGlobalEventObservable(type));\n    }\n\n    return this._ngZone.runOutsideAngular(() =>\n      this._observables\n        .get(type)!\n        .subscribe((event: Event) => this._ngZone.run(() => callback(event))),\n    );\n  }\n\n  /** Creates an observable that emits all events of the given type. */\n  private _createGlobalEventObservable(type: K) {\n    return fromEvent(this._document, type, {capture: true, passive: true}).pipe(\n      takeUntil(this._destroyed),\n      finalize(() => this._observables.delete(type)),\n      share(),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput,\n} from '@angular/cdk/coercion';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  MatRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  RippleAnimationConfig,\n  RippleGlobalOptions,\n  RippleRef,\n  RippleState,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {SpecificEventListener, EventType} from '@material/base';\nimport {MDCSliderAdapter} from '@material/slider/adapter';\nimport {MDCSliderFoundation} from '@material/slider/foundation';\nimport {Thumb, TickMark} from '@material/slider/types';\nimport {Subscription} from 'rxjs';\nimport {GlobalChangeAndInputListener} from './global-change-and-input-listener';\n\n/** Options used to bind passive event listeners. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Represents a drag event emitted by the MatSlider component. */\nexport interface MatSliderDragEvent {\n  /** The MatSliderThumb that was interacted with. */\n  source: MatSliderThumb;\n\n  /** The MatSlider that was interacted with. */\n  parent: MatSlider;\n\n  /** The current value of the slider. */\n  value: number;\n}\n\n/**\n * The visual slider thumb.\n *\n * Handles the slider thumb ripple states (hover, focus, and active),\n * and displaying the value tooltip on discrete sliders.\n * @docs-private\n */\n@Component({\n  selector: 'mat-slider-visual-thumb',\n  templateUrl: './slider-thumb.html',\n  styleUrls: ['slider-thumb.css'],\n  host: {\n    'class': 'mdc-slider__thumb mat-mdc-slider-visual-thumb',\n\n    // NOTE: This class is used internally.\n    // TODO(wagnermaciel): Remove this once it is handled by the mdc foundation (cl/388828896).\n    '[class.mdc-slider__thumb--short-value]': '_isShortValue()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSliderVisualThumb implements AfterViewInit, OnDestroy {\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  @Input() discrete: boolean;\n\n  /** Indicates which slider thumb this input corresponds to. */\n  @Input() thumbPosition: Thumb;\n\n  /** The display value of the slider thumb. */\n  @Input() valueIndicatorText: string;\n\n  /** Whether ripples on the slider thumb should be disabled. */\n  @Input() disableRipple: boolean = false;\n\n  /** The MatRipple for this slider thumb. */\n  @ViewChild(MatRipple) private readonly _ripple: MatRipple;\n\n  /** The slider thumb knob. */\n  @ViewChild('knob') _knob: ElementRef<HTMLElement>;\n\n  /** The slider thumb value indicator container. */\n  @ViewChild('valueIndicatorContainer')\n  _valueIndicatorContainer: ElementRef<HTMLElement>;\n\n  /** The slider input corresponding to this slider thumb. */\n  private _sliderInput: MatSliderThumb;\n\n  /** The RippleRef for the slider thumbs hover state. */\n  private _hoverRippleRef: RippleRef | undefined;\n\n  /** The RippleRef for the slider thumbs focus state. */\n  private _focusRippleRef: RippleRef | undefined;\n\n  /** The RippleRef for the slider thumbs active state. */\n  private _activeRippleRef: RippleRef | undefined;\n\n  /** Whether the slider thumb is currently being pressed. */\n  readonly _isActive = false;\n\n  /** Whether the slider thumb is currently being hovered. */\n  private _isHovered: boolean = false;\n\n  constructor(\n    private readonly _ngZone: NgZone,\n    @Inject(forwardRef(() => MatSlider)) private readonly _slider: MatSlider,\n    private readonly _elementRef: ElementRef<HTMLElement>,\n  ) {}\n\n  ngAfterViewInit() {\n    this._ripple.radius = 24;\n    this._sliderInput = this._slider._getInput(this.thumbPosition);\n\n    // Note that we don't unsubscribe from these, because they're complete on destroy.\n    this._sliderInput.dragStart.subscribe(event => this._onDragStart(event));\n    this._sliderInput.dragEnd.subscribe(event => this._onDragEnd(event));\n\n    this._sliderInput._focus.subscribe(() => this._onFocus());\n    this._sliderInput._blur.subscribe(() => this._onBlur());\n\n    // These two listeners don't update any data bindings so we bind them\n    // outside of the NgZone to prevent Angular from needlessly running change detection.\n    this._ngZone.runOutsideAngular(() => {\n      this._elementRef.nativeElement.addEventListener('mouseenter', this._onMouseEnter);\n      this._elementRef.nativeElement.addEventListener('mouseleave', this._onMouseLeave);\n    });\n  }\n\n  ngOnDestroy() {\n    this._elementRef.nativeElement.removeEventListener('mouseenter', this._onMouseEnter);\n    this._elementRef.nativeElement.removeEventListener('mouseleave', this._onMouseLeave);\n  }\n\n  /** Used to append a class to indicate when the value indicator text is short. */\n  _isShortValue(): boolean {\n    return this.valueIndicatorText?.length <= 2;\n  }\n\n  private _onMouseEnter = (): void => {\n    this._isHovered = true;\n    // We don't want to show the hover ripple on top of the focus ripple.\n    // This can happen if the user tabs to a thumb and then the user moves their cursor over it.\n    if (!this._isShowingRipple(this._focusRippleRef)) {\n      this._showHoverRipple();\n    }\n  };\n\n  private _onMouseLeave = (): void => {\n    this._isHovered = false;\n    this._hoverRippleRef?.fadeOut();\n  };\n\n  private _onFocus(): void {\n    // We don't want to show the hover ripple on top of the focus ripple.\n    // Happen when the users cursor is over a thumb and then the user tabs to it.\n    this._hoverRippleRef?.fadeOut();\n    this._showFocusRipple();\n  }\n\n  private _onBlur(): void {\n    // Happens when the user tabs away while still dragging a thumb.\n    if (!this._isActive) {\n      this._focusRippleRef?.fadeOut();\n    }\n    // Happens when the user tabs away from a thumb but their cursor is still over it.\n    if (this._isHovered) {\n      this._showHoverRipple();\n    }\n  }\n\n  private _onDragStart(event: MatSliderDragEvent): void {\n    if (event.source._thumbPosition === this.thumbPosition) {\n      (this as {_isActive: boolean})._isActive = true;\n      this._showActiveRipple();\n    }\n  }\n\n  private _onDragEnd(event: MatSliderDragEvent): void {\n    if (event.source._thumbPosition === this.thumbPosition) {\n      (this as {_isActive: boolean})._isActive = false;\n      this._activeRippleRef?.fadeOut();\n      // Happens when the user starts dragging a thumb, tabs away, and then stops dragging.\n      if (!this._sliderInput._isFocused()) {\n        this._focusRippleRef?.fadeOut();\n      }\n    }\n  }\n\n  /** Handles displaying the hover ripple. */\n  private _showHoverRipple(): void {\n    if (!this._isShowingRipple(this._hoverRippleRef)) {\n      this._hoverRippleRef = this._showRipple({enterDuration: 0, exitDuration: 0});\n      this._hoverRippleRef?.element.classList.add('mat-mdc-slider-hover-ripple');\n    }\n  }\n\n  /** Handles displaying the focus ripple. */\n  private _showFocusRipple(): void {\n    // Show the focus ripple event if noop animations are enabled.\n    if (!this._isShowingRipple(this._focusRippleRef)) {\n      this._focusRippleRef = this._showRipple({enterDuration: 0, exitDuration: 0});\n      this._focusRippleRef?.element.classList.add('mat-mdc-slider-focus-ripple');\n    }\n  }\n\n  /** Handles displaying the active ripple. */\n  private _showActiveRipple(): void {\n    if (!this._isShowingRipple(this._activeRippleRef)) {\n      this._activeRippleRef = this._showRipple({enterDuration: 225, exitDuration: 400});\n      this._activeRippleRef?.element.classList.add('mat-mdc-slider-active-ripple');\n    }\n  }\n\n  /** Whether the given rippleRef is currently fading in or visible. */\n  private _isShowingRipple(rippleRef?: RippleRef): boolean {\n    return rippleRef?.state === RippleState.FADING_IN || rippleRef?.state === RippleState.VISIBLE;\n  }\n\n  /** Manually launches the slider thumb ripple using the specified ripple animation config. */\n  private _showRipple(animation: RippleAnimationConfig): RippleRef | undefined {\n    if (this.disableRipple) {\n      return;\n    }\n    return this._ripple.launch({\n      animation: this._slider._noopAnimations ? {enterDuration: 0, exitDuration: 0} : animation,\n      centered: true,\n      persistent: true,\n    });\n  }\n\n  /** Gets the hosts native HTML element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Gets the native HTML element of the slider thumb knob. */\n  _getKnob(): HTMLElement {\n    return this._knob.nativeElement;\n  }\n\n  /**\n   * Gets the native HTML element of the slider thumb value indicator\n   * container.\n   */\n  _getValueIndicatorContainer(): HTMLElement {\n    return this._valueIndicatorContainer.nativeElement;\n  }\n}\n\n/**\n * Directive that adds slider-specific behaviors to an input element inside `<mat-slider>`.\n * Up to two may be placed inside of a `<mat-slider>`.\n *\n * If one is used, the selector `matSliderThumb` must be used, and the outcome will be a normal\n * slider. If two are used, the selectors `matSliderStartThumb` and `matSliderEndThumb` must be\n * used, and the outcome will be a range slider with two slider thumbs.\n */\n@Directive({\n  selector: 'input[matSliderThumb], input[matSliderStartThumb], input[matSliderEndThumb]',\n  exportAs: 'matSliderThumb',\n  host: {\n    'class': 'mdc-slider__input',\n    'type': 'range',\n    '(blur)': '_onBlur()',\n    '(focus)': '_focus.emit()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: MatSliderThumb,\n      multi: true,\n    },\n  ],\n})\nexport class MatSliderThumb implements AfterViewInit, ControlValueAccessor, OnInit, OnDestroy {\n  // ** IMPORTANT NOTE **\n  //\n  // The way `value` is implemented for MatSliderThumb doesn't follow typical Angular conventions.\n  // Normally we would define a private variable `_value` as the source of truth for the value of\n  // the slider thumb input. The source of truth for the value of the slider inputs has already\n  // been decided for us by MDC to be the value attribute on the slider thumb inputs. This is\n  // because the MDC foundation and adapter expect that the value attribute is the source of truth\n  // for the slider inputs.\n  //\n  // Also, note that the value attribute is completely disconnected from the value property.\n\n  /** The current value of this slider input. */\n  @Input()\n  get value(): number {\n    return coerceNumberProperty(this._hostElement.getAttribute('value'));\n  }\n  set value(v: NumberInput) {\n    const value = coerceNumberProperty(v);\n\n    // If the foundation has already been initialized, we need to\n    // relay any value updates to it so that it can update the UI.\n    if (this._slider._initialized) {\n      this._slider._setValue(value, this._thumbPosition);\n    } else {\n      // Setup for the MDC foundation.\n      this._hostElement.setAttribute('value', `${value}`);\n    }\n  }\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the slider thumb starts being dragged. */\n  @Output() readonly dragStart: EventEmitter<MatSliderDragEvent> =\n    new EventEmitter<MatSliderDragEvent>();\n\n  /** Event emitted when the slider thumb stops being dragged. */\n  @Output() readonly dragEnd: EventEmitter<MatSliderDragEvent> =\n    new EventEmitter<MatSliderDragEvent>();\n\n  /** Event emitted every time the MatSliderThumb is blurred. */\n  @Output() readonly _blur: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted every time the MatSliderThumb is focused. */\n  @Output() readonly _focus: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Used to determine the disabled state of the MatSlider (ControlValueAccessor).\n   * For ranged sliders, the disabled state of the MatSlider depends on the combined state of the\n   * start and end inputs. See MatSlider._updateDisabled.\n   */\n  _disabled: boolean = false;\n\n  /**\n   * A callback function that is called when the\n   * control's value changes in the UI (ControlValueAccessor).\n   */\n  _onChange: (value: any) => void = () => {};\n\n  /**\n   * A callback function that is called by the forms API on\n   * initialization to update the form model on blur (ControlValueAccessor).\n   */\n  private _onTouched: () => void = () => {};\n\n  /** Indicates which slider thumb this input corresponds to. */\n  _thumbPosition: Thumb = this._elementRef.nativeElement.hasAttribute('matSliderStartThumb')\n    ? Thumb.START\n    : Thumb.END;\n\n  /** The injected document if available or fallback to the global document reference. */\n  private _document: Document;\n\n  /** The host native HTML input element. */\n  _hostElement: HTMLInputElement;\n\n  constructor(\n    @Inject(DOCUMENT) document: any,\n    @Inject(forwardRef(() => MatSlider)) private readonly _slider: MatSlider,\n    private readonly _elementRef: ElementRef<HTMLInputElement>,\n  ) {\n    this._document = document;\n    this._hostElement = _elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    // By calling this in ngOnInit() we guarantee that the sibling sliders initial value by\n    // has already been set by the time we reach ngAfterViewInit().\n    this._initializeInputValueAttribute();\n    this._initializeAriaValueText();\n  }\n\n  ngAfterViewInit() {\n    this._initializeInputState();\n    this._initializeInputValueProperty();\n\n    // Setup for the MDC foundation.\n    if (this._slider.disabled) {\n      this._hostElement.disabled = true;\n    }\n  }\n\n  ngOnDestroy() {\n    this.dragStart.complete();\n    this.dragEnd.complete();\n    this._focus.complete();\n    this._blur.complete();\n    this.valueChange.complete();\n  }\n\n  _onBlur(): void {\n    this._onTouched();\n    this._blur.emit();\n  }\n\n  _emitFakeEvent(type: 'change' | 'input') {\n    const event = new Event(type) as any;\n    event._matIsHandled = true;\n    this._hostElement.dispatchEvent(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._disabled = isDisabled;\n    this._slider._updateDisabled();\n  }\n\n  focus(): void {\n    this._hostElement.focus();\n  }\n\n  blur(): void {\n    this._hostElement.blur();\n  }\n\n  /** Returns true if this slider input currently has focus. */\n  _isFocused(): boolean {\n    return this._document.activeElement === this._hostElement;\n  }\n\n  /**\n   * Sets the min, max, and step properties on the slider thumb input.\n   *\n   * Must be called AFTER the sibling slider thumb input is guaranteed to have had its value\n   * attribute value set. For a range slider, the min and max of the slider thumb input depends on\n   * the value of its sibling slider thumb inputs value.\n   *\n   * Must be called BEFORE the value property is set. In the case where the min and max have not\n   * yet been set and we are setting the input value property to a value outside of the native\n   * inputs default min or max. The value property would not be set to our desired value, but\n   * instead be capped at either the default min or max.\n   *\n   */\n  _initializeInputState(): void {\n    const min = this._hostElement.hasAttribute('matSliderEndThumb')\n      ? this._slider._getInput(Thumb.START).value\n      : this._slider.min;\n    const max = this._hostElement.hasAttribute('matSliderStartThumb')\n      ? this._slider._getInput(Thumb.END).value\n      : this._slider.max;\n    this._hostElement.min = `${min}`;\n    this._hostElement.max = `${max}`;\n    this._hostElement.step = `${this._slider.step}`;\n  }\n\n  /**\n   * Sets the value property on the slider thumb input.\n   *\n   * Must be called AFTER the min and max have been set. In the case where the min and max have not\n   * yet been set and we are setting the input value property to a value outside of the native\n   * inputs default min or max. The value property would not be set to our desired value, but\n   * instead be capped at either the default min or max.\n   */\n  private _initializeInputValueProperty(): void {\n    this._hostElement.value = `${this.value}`;\n  }\n\n  /**\n   * Ensures the value attribute is initialized.\n   *\n   * Must be called BEFORE the min and max are set. For a range slider, the min and max of the\n   * slider thumb input depends on the value of its sibling slider thumb inputs value.\n   */\n  private _initializeInputValueAttribute(): void {\n    // Only set the default value if an initial value has not already been provided.\n    if (!this._hostElement.hasAttribute('value')) {\n      this.value = this._hostElement.hasAttribute('matSliderEndThumb')\n        ? this._slider.max\n        : this._slider.min;\n    }\n  }\n\n  /**\n   * Initializes the aria-valuetext attribute.\n   *\n   * Must be called AFTER the value attribute is set. This is because the slider's parent\n   * `displayWith` function is used to set the `aria-valuetext` attribute.\n   */\n  private _initializeAriaValueText(): void {\n    this._hostElement.setAttribute('aria-valuetext', this._slider.displayWith(this.value));\n  }\n}\n\n// Boilerplate for applying mixins to MatSlider.\nconst _MatSliderMixinBase = mixinColor(\n  mixinDisableRipple(\n    class {\n      constructor(public _elementRef: ElementRef<HTMLElement>) {}\n    },\n  ),\n  'primary',\n);\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  selector: 'mat-slider',\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  host: {\n    'class': 'mat-mdc-slider mdc-slider',\n    '[class.mdc-slider--range]': '_isRange()',\n    '[class.mdc-slider--disabled]': 'disabled',\n    '[class.mdc-slider--discrete]': 'discrete',\n    '[class.mdc-slider--tick-marks]': 'showTickMarks',\n    '[class._mat-animation-noopable]': '_noopAnimations',\n  },\n  exportAs: 'matSlider',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  inputs: ['color', 'disableRipple'],\n})\nexport class MatSlider\n  extends _MatSliderMixinBase\n  implements AfterViewInit, CanDisableRipple, OnDestroy\n{\n  /** The slider thumb(s). */\n  @ViewChildren(MatSliderVisualThumb) _thumbs: QueryList<MatSliderVisualThumb>;\n\n  /** The active section of the slider track. */\n  @ViewChild('trackActive') _trackActive: ElementRef<HTMLElement>;\n\n  /** The sliders hidden range input(s). */\n  @ContentChildren(MatSliderThumb, {descendants: false})\n  _inputs: QueryList<MatSliderThumb>;\n\n  /** Whether the slider is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(v: BooleanInput) {\n    this._setDisabled(coerceBooleanProperty(v));\n    this._updateInputsDisabledState();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether the slider displays a numeric value label upon pressing the thumb. */\n  @Input()\n  get discrete(): boolean {\n    return this._discrete;\n  }\n  set discrete(v: BooleanInput) {\n    this._discrete = coerceBooleanProperty(v);\n  }\n  private _discrete: boolean = false;\n\n  /** Whether the slider displays tick marks along the slider track. */\n  @Input()\n  get showTickMarks(): boolean {\n    return this._showTickMarks;\n  }\n  set showTickMarks(v: BooleanInput) {\n    this._showTickMarks = coerceBooleanProperty(v);\n  }\n  private _showTickMarks: boolean = false;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number {\n    return this._min;\n  }\n  set min(v: NumberInput) {\n    this._min = coerceNumberProperty(v, this._min);\n    this._reinitialize();\n  }\n  private _min: number = 0;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n  set max(v: NumberInput) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._reinitialize();\n  }\n  private _max: number = 100;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number {\n    return this._step;\n  }\n  set step(v: NumberInput) {\n    this._step = coerceNumberProperty(v, this._step);\n    this._reinitialize();\n  }\n  private _step: number = 1;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string = (value: number) => `${value}`;\n\n  /** Instance of the MDC slider foundation for this slider. */\n  private _foundation = new MDCSliderFoundation(new SliderAdapter(this));\n\n  /** Whether the foundation has been initialized. */\n  _initialized: boolean = false;\n\n  /** The injected document if available or fallback to the global document reference. */\n  _document: Document;\n\n  /**\n   * The defaultView of the injected document if\n   * available or fallback to global window reference.\n   */\n  _window: Window;\n\n  /** Used to keep track of & render the active & inactive tick marks on the slider track. */\n  _tickMarks: TickMark[];\n\n  /** The display value of the start thumb. */\n  _startValueIndicatorText: string;\n\n  /** The display value of the end thumb. */\n  _endValueIndicatorText: string;\n\n  /** Whether animations have been disabled. */\n  _noopAnimations: boolean;\n\n  /**\n   * Whether the browser supports pointer events.\n   *\n   * We exclude iOS to mirror the MDC Foundation. The MDC Foundation cannot use pointer events on\n   * iOS because of this open bug - https://bugs.webkit.org/show_bug.cgi?id=220196.\n   */\n  private _SUPPORTS_POINTER_EVENTS =\n    typeof PointerEvent !== 'undefined' && !!PointerEvent && !this._platform.IOS;\n\n  /** Subscription to changes to the directionality (LTR / RTL) context for the application. */\n  private _dirChangeSubscription: Subscription;\n\n  /** Observer used to monitor size changes in the slider. */\n  private _resizeObserver: ResizeObserver | null;\n\n  /** Timeout used to debounce resize listeners. */\n  private _resizeTimer: number;\n\n  /** Cached dimensions of the host element. */\n  private _cachedHostRect: DOMRect | null;\n\n  constructor(\n    readonly _ngZone: NgZone,\n    readonly _cdr: ChangeDetectorRef,\n    elementRef: ElementRef<HTMLElement>,\n    private readonly _platform: Platform,\n    readonly _globalChangeAndInputListener: GlobalChangeAndInputListener<'input' | 'change'>,\n    @Inject(DOCUMENT) document: any,\n    @Optional() private _dir: Directionality,\n    @Optional()\n    @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n    readonly _globalRippleOptions?: RippleGlobalOptions,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n  ) {\n    super(elementRef);\n    this._document = document;\n    this._window = this._document.defaultView || window;\n    this._noopAnimations = animationMode === 'NoopAnimations';\n    this._dirChangeSubscription = this._dir.change.subscribe(() => this._onDirChange());\n    this._attachUISyncEventListener();\n  }\n\n  ngAfterViewInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      _validateThumbs(this._isRange(), this._getThumb(Thumb.START), this._getThumb(Thumb.END));\n      _validateInputs(\n        this._isRange(),\n        this._getInputElement(Thumb.START),\n        this._getInputElement(Thumb.END),\n      );\n    }\n    if (this._platform.isBrowser) {\n      this._foundation.init();\n      this._foundation.layout();\n      this._initialized = true;\n      this._observeHostResize();\n    }\n    // The MDC foundation requires access to the view and content children of the MatSlider. In\n    // order to access the view and content children of MatSlider we need to wait until change\n    // detection runs and materializes them. That is why we call init() and layout() in\n    // ngAfterViewInit().\n    //\n    // The MDC foundation then uses the information it gathers from the DOM to compute an initial\n    // value for the tickMarks array. It then tries to update the component data, but because it is\n    // updating the component data AFTER change detection already ran, we will get a changed after\n    // checked error. Because of this, we need to force change detection to update the UI with the\n    // new state.\n    this._cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    if (this._platform.isBrowser) {\n      this._foundation.destroy();\n    }\n    this._dirChangeSubscription.unsubscribe();\n    this._resizeObserver?.disconnect();\n    this._resizeObserver = null;\n    clearTimeout(this._resizeTimer);\n    this._removeUISyncEventListener();\n  }\n\n  /** Returns true if the language direction for this slider element is right to left. */\n  _isRTL() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /**\n   * Attaches an event listener that keeps sync the slider UI and the foundation in sync.\n   *\n   * Because the MDC Foundation stores the value of the bounding client rect when layout is called,\n   * we need to keep calling layout to avoid the position of the slider getting out of sync with\n   * what the foundation has stored. If we don't do this, the foundation will not be able to\n   * correctly calculate the slider value on click/slide.\n   */\n  _attachUISyncEventListener(): void {\n    // Implementation detail: It may seem weird that we are using \"mouseenter\" instead of\n    // \"mousedown\" as the default for when a browser does not support pointer events. While we\n    // would prefer to use \"mousedown\" as the default, for some reason it does not work (the\n    // callback is never triggered).\n    if (this._SUPPORTS_POINTER_EVENTS) {\n      this._elementRef.nativeElement.addEventListener('pointerdown', this._layout);\n    } else {\n      this._elementRef.nativeElement.addEventListener('mouseenter', this._layout);\n      this._elementRef.nativeElement.addEventListener(\n        'touchstart',\n        this._layout,\n        passiveEventListenerOptions,\n      );\n    }\n  }\n\n  /** Removes the event listener that keeps sync the slider UI and the foundation in sync. */\n  _removeUISyncEventListener(): void {\n    if (this._SUPPORTS_POINTER_EVENTS) {\n      this._elementRef.nativeElement.removeEventListener('pointerdown', this._layout);\n    } else {\n      this._elementRef.nativeElement.removeEventListener('mouseenter', this._layout);\n      this._elementRef.nativeElement.removeEventListener(\n        'touchstart',\n        this._layout,\n        passiveEventListenerOptions,\n      );\n    }\n  }\n\n  /** Wrapper function for calling layout (needed for adding & removing an event listener). */\n  private _layout = () => this._foundation.layout();\n\n  /**\n   * Reinitializes the slider foundation and input state(s).\n   *\n   * The MDC Foundation does not support changing some slider attributes after it has been\n   * initialized (e.g. min, max, and step). To continue supporting this feature, we need to\n   * destroy the foundation and re-initialize everything whenever we make these changes.\n   */\n  private _reinitialize(): void {\n    if (this._initialized) {\n      this._foundation.destroy();\n      if (this._isRange()) {\n        this._getInput(Thumb.START)._initializeInputState();\n      }\n      this._getInput(Thumb.END)._initializeInputState();\n      this._foundation.init();\n      this._foundation.layout();\n    }\n  }\n\n  /** Handles updating the slider foundation after a dir change. */\n  private _onDirChange(): void {\n    this._ngZone.runOutsideAngular(() => {\n      // We need to call layout() a few milliseconds after the dir change callback\n      // because we need to wait until the bounding client rect of the slider has updated.\n      setTimeout(() => this._foundation.layout(), 10);\n    });\n  }\n\n  /** Sets the value of a slider thumb. */\n  _setValue(value: number, thumbPosition: Thumb): void {\n    thumbPosition === Thumb.START\n      ? this._foundation.setValueStart(value)\n      : this._foundation.setValue(value);\n  }\n\n  /** Sets the disabled state of the MatSlider. */\n  private _setDisabled(value: boolean) {\n    this._disabled = value;\n\n    // If we want to disable the slider after the foundation has been initialized,\n    // we need to inform the foundation by calling `setDisabled`. Also, we can't call\n    // this before initializing the foundation because it will throw errors.\n    if (this._initialized) {\n      this._foundation.setDisabled(value);\n    }\n  }\n\n  /** Sets the disabled state of the individual slider thumb(s) (ControlValueAccessor). */\n  private _updateInputsDisabledState() {\n    if (this._initialized) {\n      this._getInput(Thumb.END)._disabled = true;\n      if (this._isRange()) {\n        this._getInput(Thumb.START)._disabled = true;\n      }\n    }\n  }\n\n  /** Whether this is a ranged slider. */\n  _isRange(): boolean {\n    return this._inputs.length === 2;\n  }\n\n  /** Sets the disabled state based on the disabled state of the inputs (ControlValueAccessor). */\n  _updateDisabled(): void {\n    const disabled = this._inputs?.some(input => input._disabled) || false;\n    this._setDisabled(disabled);\n  }\n\n  /** Gets the slider thumb input of the given thumb position. */\n  _getInput(thumbPosition: Thumb): MatSliderThumb {\n    return thumbPosition === Thumb.END ? this._inputs?.last! : this._inputs?.first!;\n  }\n\n  /** Gets the slider thumb HTML input element of the given thumb position. */\n  _getInputElement(thumbPosition: Thumb): HTMLInputElement {\n    return this._getInput(thumbPosition)?._hostElement;\n  }\n\n  _getThumb(thumbPosition: Thumb): MatSliderVisualThumb {\n    return thumbPosition === Thumb.END ? this._thumbs?.last! : this._thumbs?.first!;\n  }\n\n  /** Gets the slider thumb HTML element of the given thumb position. */\n  _getThumbElement(thumbPosition: Thumb): HTMLElement {\n    return this._getThumb(thumbPosition)?._getHostElement();\n  }\n\n  /** Gets the slider knob HTML element of the given thumb position. */\n  _getKnobElement(thumbPosition: Thumb): HTMLElement {\n    return this._getThumb(thumbPosition)?._getKnob();\n  }\n\n  /**\n   * Gets the slider value indicator container HTML element of the given thumb\n   * position.\n   */\n  _getValueIndicatorContainerElement(thumbPosition: Thumb): HTMLElement {\n    return this._getThumb(thumbPosition)._getValueIndicatorContainer();\n  }\n\n  /**\n   * Sets the value indicator text of the given thumb position using the given value.\n   *\n   * Uses the `displayWith` function if one has been provided. Otherwise, it just uses the\n   * numeric value as a string.\n   */\n  _setValueIndicatorText(value: number, thumbPosition: Thumb) {\n    thumbPosition === Thumb.START\n      ? (this._startValueIndicatorText = this.displayWith(value))\n      : (this._endValueIndicatorText = this.displayWith(value));\n    this._cdr.markForCheck();\n  }\n\n  /** Gets the value indicator text for the given thumb position. */\n  _getValueIndicatorText(thumbPosition: Thumb): string {\n    return thumbPosition === Thumb.START\n      ? this._startValueIndicatorText\n      : this._endValueIndicatorText;\n  }\n\n  /** Determines the class name for a HTML element. */\n  _getTickMarkClass(tickMark: TickMark): string {\n    return tickMark === TickMark.ACTIVE\n      ? 'mdc-slider__tick-mark--active'\n      : 'mdc-slider__tick-mark--inactive';\n  }\n\n  /** Whether the slider thumb ripples should be disabled. */\n  _isRippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this._globalRippleOptions?.disabled;\n  }\n\n  /** Gets the dimensions of the host element. */\n  _getHostDimensions() {\n    return this._cachedHostRect || this._elementRef.nativeElement.getBoundingClientRect();\n  }\n\n  /** Starts observing and updating the slider if the host changes its size. */\n  private _observeHostResize() {\n    if (typeof ResizeObserver === 'undefined' || !ResizeObserver) {\n      return;\n    }\n\n    // MDC only updates the slider when the window is resized which\n    // doesn't capture changes of the container itself. We use a resize\n    // observer to ensure that the layout is correct (see #24590 and #25286).\n    this._ngZone.runOutsideAngular(() => {\n      this._resizeObserver = new ResizeObserver(entries => {\n        // Triggering a layout while the user is dragging can throw off the alignment.\n        if (this._isActive()) {\n          return;\n        }\n\n        clearTimeout(this._resizeTimer);\n        this._resizeTimer = setTimeout(() => {\n          // The `layout` call is going to call `getBoundingClientRect` to update the dimensions\n          // of the host. Since the `ResizeObserver` already calculated them, we can save some\n          // work by returning them instead of having to check the DOM again.\n          if (!this._isActive()) {\n            this._cachedHostRect = entries[0]?.contentRect;\n            this._layout();\n            this._cachedHostRect = null;\n          }\n        }, 50);\n      });\n      this._resizeObserver.observe(this._elementRef.nativeElement);\n    });\n  }\n\n  /** Whether any of the thumbs are currently active. */\n  private _isActive(): boolean {\n    return this._getThumb(Thumb.START)._isActive || this._getThumb(Thumb.END)._isActive;\n  }\n}\n\n/** The MDCSliderAdapter implementation. */\nclass SliderAdapter implements MDCSliderAdapter {\n  /** The global event listener subscription used to handle events on the slider inputs. */\n  private _globalEventSubscriptions = new Subscription();\n\n  /** The MDC Foundations handler function for start input change events. */\n  private _startInputChangeEventHandler: SpecificEventListener<EventType>;\n\n  /** The MDC Foundations handler function for end input change events. */\n  private _endInputChangeEventHandler: SpecificEventListener<EventType>;\n\n  constructor(private readonly _delegate: MatSlider) {\n    this._globalEventSubscriptions.add(this._subscribeToSliderInputEvents('change'));\n    this._globalEventSubscriptions.add(this._subscribeToSliderInputEvents('input'));\n  }\n\n  /**\n   * Handles \"change\" and \"input\" events on the slider inputs.\n   *\n   * Exposes a callback to allow the MDC Foundations \"change\" event handler to be called for \"real\"\n   * events.\n   *\n   * ** IMPORTANT NOTE **\n   *\n   * We block all \"real\" change and input events and emit fake events from #emitChangeEvent and\n   * #emitInputEvent, instead. We do this because interacting with the MDC slider won't trigger all\n   * of the correct change and input events, but it will call #emitChangeEvent and #emitInputEvent\n   * at the correct times. This allows users to listen for these events directly on the slider\n   * input as they would with a native range input.\n   */\n  private _subscribeToSliderInputEvents(type: 'change' | 'input') {\n    return this._delegate._globalChangeAndInputListener.listen(type, (event: Event) => {\n      const thumbPosition = this._getInputThumbPosition(event.target);\n\n      // Do nothing if the event isn't from a thumb input.\n      if (thumbPosition === null) {\n        return;\n      }\n\n      // Do nothing if the event is \"fake\".\n      if ((event as any)._matIsHandled) {\n        return;\n      }\n\n      // Prevent \"real\" events from reaching end users.\n      event.stopImmediatePropagation();\n\n      // Relay \"real\" change events to the MDC Foundation.\n      if (type === 'change') {\n        this._callChangeEventHandler(event, thumbPosition);\n      }\n    });\n  }\n\n  /** Calls the MDC Foundations change event handler for the specified thumb position. */\n  private _callChangeEventHandler(event: Event, thumbPosition: Thumb) {\n    if (thumbPosition === Thumb.START) {\n      this._startInputChangeEventHandler(event);\n    } else {\n      this._endInputChangeEventHandler(event);\n    }\n  }\n\n  /** Save the event handler so it can be used in our global change event listener subscription. */\n  private _saveChangeEventHandler(thumbPosition: Thumb, handler: SpecificEventListener<EventType>) {\n    if (thumbPosition === Thumb.START) {\n      this._startInputChangeEventHandler = handler;\n    } else {\n      this._endInputChangeEventHandler = handler;\n    }\n  }\n\n  /**\n   * Returns the thumb position of the given event target.\n   * Returns null if the given event target does not correspond to a slider thumb input.\n   */\n  private _getInputThumbPosition(target: EventTarget | null): Thumb | null {\n    if (target === this._delegate._getInputElement(Thumb.END)) {\n      return Thumb.END;\n    }\n    if (this._delegate._isRange() && target === this._delegate._getInputElement(Thumb.START)) {\n      return Thumb.START;\n    }\n    return null;\n  }\n\n  // We manually assign functions instead of using prototype methods because\n  // MDC clobbers the values otherwise.\n  // See https://github.com/material-components/material-components-web/pull/6256\n\n  hasClass = (className: string): boolean => {\n    return this._delegate._elementRef.nativeElement.classList.contains(className);\n  };\n  addClass = (className: string): void => {\n    this._delegate._elementRef.nativeElement.classList.add(className);\n  };\n  removeClass = (className: string): void => {\n    this._delegate._elementRef.nativeElement.classList.remove(className);\n  };\n  getAttribute = (attribute: string): string | null => {\n    return this._delegate._elementRef.nativeElement.getAttribute(attribute);\n  };\n  addThumbClass = (className: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).classList.add(className);\n  };\n  removeThumbClass = (className: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).classList.remove(className);\n  };\n  getInputValue = (thumbPosition: Thumb): string => {\n    return this._delegate._getInputElement(thumbPosition).value;\n  };\n  setInputValue = (value: string, thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).value = value;\n  };\n  getInputAttribute = (attribute: string, thumbPosition: Thumb): string | null => {\n    return this._delegate._getInputElement(thumbPosition).getAttribute(attribute);\n  };\n  setInputAttribute = (attribute: string, value: string, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInputElement(thumbPosition);\n\n    // TODO(wagnermaciel): remove this check once this component is\n    // added to the internal allowlist for calling setAttribute.\n\n    // Explicitly check the attribute we are setting to prevent xss.\n    switch (attribute) {\n      case 'aria-valuetext':\n        input.setAttribute('aria-valuetext', value);\n        break;\n      case 'disabled':\n        input.setAttribute('disabled', value);\n        break;\n      case 'min':\n        input.setAttribute('min', value);\n        break;\n      case 'max':\n        input.setAttribute('max', value);\n        break;\n      case 'value':\n        input.setAttribute('value', value);\n        break;\n      case 'step':\n        input.setAttribute('step', value);\n        break;\n      default:\n        throw Error(`Tried to set invalid attribute ${attribute} on the mdc-slider.`);\n    }\n  };\n  removeInputAttribute = (attribute: string, thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).removeAttribute(attribute);\n  };\n  focusInput = (thumbPosition: Thumb): void => {\n    this._delegate._getInputElement(thumbPosition).focus();\n  };\n  isInputFocused = (thumbPosition: Thumb): boolean => {\n    return this._delegate._getInput(thumbPosition)._isFocused();\n  };\n  getThumbKnobWidth = (thumbPosition: Thumb): number => {\n    return this._delegate._getKnobElement(thumbPosition).getBoundingClientRect().width;\n  };\n  getThumbBoundingClientRect = (thumbPosition: Thumb): DOMRect => {\n    return this._delegate._getThumbElement(thumbPosition).getBoundingClientRect();\n  };\n  getBoundingClientRect = (): DOMRect => {\n    return this._delegate._getHostDimensions();\n  };\n  getValueIndicatorContainerWidth = (thumbPosition: Thumb): number => {\n    return this._delegate._getValueIndicatorContainerElement(thumbPosition).getBoundingClientRect()\n      .width;\n  };\n  isRTL = (): boolean => {\n    return this._delegate._isRTL();\n  };\n  setThumbStyleProperty = (propertyName: string, value: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).style.setProperty(propertyName, value);\n  };\n  removeThumbStyleProperty = (propertyName: string, thumbPosition: Thumb): void => {\n    this._delegate._getThumbElement(thumbPosition).style.removeProperty(propertyName);\n  };\n  setTrackActiveStyleProperty = (propertyName: string, value: string): void => {\n    this._delegate._trackActive.nativeElement.style.setProperty(propertyName, value);\n  };\n  removeTrackActiveStyleProperty = (propertyName: string): void => {\n    this._delegate._trackActive.nativeElement.style.removeProperty(propertyName);\n  };\n  setValueIndicatorText = (value: number, thumbPosition: Thumb): void => {\n    this._delegate._setValueIndicatorText(value, thumbPosition);\n  };\n  getValueToAriaValueTextFn = (): ((value: number) => string) | null => {\n    return this._delegate.displayWith;\n  };\n  updateTickMarks = (tickMarks: TickMark[]): void => {\n    this._delegate._tickMarks = tickMarks;\n    this._delegate._cdr.markForCheck();\n  };\n  setPointerCapture = (pointerId: number): void => {\n    this._delegate._elementRef.nativeElement.setPointerCapture(pointerId);\n  };\n  emitChangeEvent = (value: number, thumbPosition: Thumb): void => {\n    // We block all real slider input change events and emit fake change events from here, instead.\n    // We do this because the mdc implementation of the slider does not trigger real change events\n    // on pointer up (only on left or right arrow key down).\n    //\n    // By stopping real change events from reaching users, and dispatching fake change events\n    // (which we allow to reach the user) the slider inputs change events are triggered at the\n    // appropriate times. This allows users to listen for change events directly on the slider\n    // input as they would with a native range input.\n    const input = this._delegate._getInput(thumbPosition);\n    input._emitFakeEvent('change');\n    input._onChange(value);\n    input.valueChange.emit(value);\n  };\n  emitInputEvent = (value: number, thumbPosition: Thumb): void => {\n    this._delegate._getInput(thumbPosition)._emitFakeEvent('input');\n  };\n  emitDragStartEvent = (value: number, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInput(thumbPosition);\n    input.dragStart.emit({source: input, parent: this._delegate, value});\n  };\n  emitDragEndEvent = (value: number, thumbPosition: Thumb): void => {\n    const input = this._delegate._getInput(thumbPosition);\n    input.dragEnd.emit({source: input, parent: this._delegate, value});\n  };\n  registerEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._elementRef.nativeElement.addEventListener(evtType, handler);\n  };\n  deregisterEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._elementRef.nativeElement.removeEventListener(evtType, handler);\n  };\n  registerThumbEventHandler = <K extends EventType>(\n    thumbPosition: Thumb,\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._getThumbElement(thumbPosition).addEventListener(evtType, handler);\n  };\n  deregisterThumbEventHandler = <K extends EventType>(\n    thumbPosition: Thumb,\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._getThumbElement(thumbPosition)?.removeEventListener(evtType, handler);\n  };\n  registerInputEventHandler = <K extends EventType>(\n    thumbPosition: Thumb,\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    if (evtType === 'change') {\n      this._saveChangeEventHandler(thumbPosition, handler as SpecificEventListener<EventType>);\n    } else {\n      this._delegate._getInputElement(thumbPosition)?.addEventListener(evtType, handler);\n    }\n  };\n  deregisterInputEventHandler = <K extends EventType>(\n    thumbPosition: Thumb,\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    if (evtType === 'change') {\n      this._globalEventSubscriptions.unsubscribe();\n    } else {\n      this._delegate._getInputElement(thumbPosition)?.removeEventListener(evtType, handler);\n    }\n  };\n  registerBodyEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._document.body.addEventListener(evtType, handler);\n  };\n  deregisterBodyEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._document.body.removeEventListener(evtType, handler);\n  };\n  registerWindowEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._window.addEventListener(evtType, handler);\n  };\n  deregisterWindowEventHandler = <K extends EventType>(\n    evtType: K,\n    handler: SpecificEventListener<K>,\n  ): void => {\n    this._delegate._window.removeEventListener(evtType, handler);\n  };\n}\n\n/** Ensures that there is not an invalid configuration for the slider thumb inputs. */\nfunction _validateInputs(\n  isRange: boolean,\n  startInputElement: HTMLInputElement,\n  endInputElement: HTMLInputElement,\n): void {\n  const startValid = !isRange || startInputElement.hasAttribute('matSliderStartThumb');\n  const endValid = endInputElement.hasAttribute(isRange ? 'matSliderEndThumb' : 'matSliderThumb');\n\n  if (!startValid || !endValid) {\n    _throwInvalidInputConfigurationError();\n  }\n}\n\n/** Validates that the slider has the correct set of thumbs. */\nfunction _validateThumbs(\n  isRange: boolean,\n  start: MatSliderVisualThumb | undefined,\n  end: MatSliderVisualThumb | undefined,\n): void {\n  if (!end && (!isRange || !start)) {\n    _throwInvalidInputConfigurationError();\n  }\n}\n\nfunction _throwInvalidInputConfigurationError(): void {\n  throw Error(`Invalid slider thumb input configuration!\n\n  Valid configurations are as follows:\n\n    <mat-slider>\n      <input matSliderThumb>\n    </mat-slider>\n\n    or\n\n    <mat-slider>\n      <input matSliderStartThumb>\n      <input matSliderEndThumb>\n    </mat-slider>\n  `);\n}\n","<div class=\"mdc-slider__value-indicator-container\" *ngIf=\"discrete\" #valueIndicatorContainer>\n  <div class=\"mdc-slider__value-indicator\">\n    <span class=\"mdc-slider__value-indicator-text\">{{valueIndicatorText}}</span>\n  </div>\n</div>\n<div class=\"mdc-slider__thumb-knob\" #knob></div>\n<div\n  matRipple\n  class=\"mat-mdc-focus-indicator\"\n  [matRippleDisabled]=\"true\"></div>\n","<!-- Inputs -->\n<ng-content></ng-content>\n\n<!-- Track -->\n<div class=\"mdc-slider__track\">\n  <div class=\"mdc-slider__track--inactive\"></div>\n  <div class=\"mdc-slider__track--active\">\n    <div class=\"mdc-slider__track--active_fill\" #trackActive></div>\n  </div>\n  <div *ngIf=\"showTickMarks\" class=\"mdc-slider__tick-marks\" #tickMarkContainer>\n    <div *ngFor=\"let tickMark of _tickMarks\" [class]=\"_getTickMarkClass(tickMark)\"></div>\n  </div>\n</div>\n\n<!-- Thumbs -->\n<mat-slider-visual-thumb\n  *ngFor=\"let thumb of _inputs\"\n  [discrete]=\"discrete\"\n  [disableRipple]=\"_isRippleDisabled()\"\n  [thumbPosition]=\"thumb._thumbPosition\"\n  [valueIndicatorText]=\"_getValueIndicatorText(thumb._thumbPosition)\">\n</mat-slider-visual-thumb>\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlider, MatSliderThumb, MatSliderVisualThumb} from './slider';\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule, MatRippleModule],\n  exports: [MatSlider, MatSliderThumb],\n  declarations: [MatSlider, MatSliderThumb, MatSliderVisualThumb],\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {MatSlider, MatSliderThumb, MatSliderDragEvent} from './slider';\nexport {MatSliderModule} from './module';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './public-api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i4.GlobalChangeAndInputListener"],"mappings":"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"}