{
  "version": 3,
  "sources": ["../../../../../../../../src/material/schematics/ng-generate/theme-color/index.ts", "../../../../../../../../node_modules/@material/material-color-utilities/utils/math_utils.ts", "../../../../../../../../node_modules/@material/material-color-utilities/utils/color_utils.ts", "../../../../../../../../node_modules/@material/material-color-utilities/hct/viewing_conditions.ts", "../../../../../../../../node_modules/@material/material-color-utilities/hct/cam16.ts", "../../../../../../../../node_modules/@material/material-color-utilities/hct/hct_solver.ts", "../../../../../../../../node_modules/@material/material-color-utilities/hct/hct.ts", "../../../../../../../../node_modules/@material/material-color-utilities/contrast/contrast.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dislike/dislike_analyzer.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/dynamic_color.ts", "../../../../../../../../node_modules/@material/material-color-utilities/palettes/tonal_palette.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/contrast_curve.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/tone_delta_pair.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/variant.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/material_dynamic_colors.ts", "../../../../../../../../node_modules/@material/material-color-utilities/dynamiccolor/dynamic_scheme.ts", "../../../../../../../../node_modules/@material/material-color-utilities/temperature/temperature_cache.ts", "../../../../../../../../node_modules/@material/material-color-utilities/scheme/scheme_expressive.ts", "../../../../../../../../node_modules/@material/material-color-utilities/scheme/scheme_vibrant.ts", "../../../../../../../../node_modules/@material/material-color-utilities/score/score.ts", "../../../../../../../../node_modules/@material/material-color-utilities/utils/string_utils.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Rule, SchematicContext, Tree} from '@angular-devkit/schematics';\nimport {Schema} from './schema';\nimport {\n  argbFromHex,\n  hexFromArgb,\n  TonalPalette,\n  Hct,\n  DynamicScheme,\n  DislikeAnalyzer,\n  TemperatureCache,\n} from '@material/material-color-utilities';\n\n// For each color tonal palettes are created using the following hue tones. The\n// tonal palettes then get used to create the different color roles (ex.\n// on-primary) https://m3.material.io/styles/color/system/how-the-system-works\nconst HUE_TONES = [0, 10, 20, 25, 30, 35, 40, 50, 60, 70, 80, 90, 95, 98, 99, 100];\n// Map of neutral hues to the previous/next hues that\n// can be used to estimate them, in case they're missing.\nconst NEUTRAL_HUES = new Map<number, {prev: number; next: number}>([\n  [4, {prev: 0, next: 10}],\n  [6, {prev: 0, next: 10}],\n  [12, {prev: 10, next: 20}],\n  [17, {prev: 10, next: 20}],\n  [22, {prev: 20, next: 25}],\n  [24, {prev: 20, next: 25}],\n  [87, {prev: 80, next: 90}],\n  [92, {prev: 90, next: 95}],\n  [94, {prev: 90, next: 95}],\n  [96, {prev: 95, next: 98}],\n]);\n\n// Note: Some of the color tokens refer to additional hue tones, but this only\n// applies for the neutral color palette (ex. surface container is neutral\n// palette's 94 tone). https://m3.material.io/styles/color/static/baseline\nconst NEUTRAL_HUE_TONES = [...HUE_TONES, ...NEUTRAL_HUES.keys()];\n\n/**\n * Gets color tonal palettes generated by Material from the provided color.\n * @param primaryPalette Tonal palette that represents primary.\n * @param secondaryPalette Tonal palette that represents secondary.\n * @param tertiaryPalette Tonal palette that represents tertiary.\n * @param neutralPalette Tonal palette that represents neutral.\n * @param neutralVariantPalette Tonal palette that represents neutral variant.\n * @param isDark Boolean to represent if the scheme is for a dark or light theme.\n * @param contrastLevel Number between -1 and 1 for the contrast level. 0 is the standard contrast\n * and 1 represents high contrast.\n * @returns Dynamic scheme for provided theme and contrast level\n */\nfunction getMaterialDynamicScheme(\n  primaryPalette: TonalPalette,\n  secondaryPalette: TonalPalette,\n  tertiaryPalette: TonalPalette,\n  neutralPalette: TonalPalette,\n  neutralVariantPalette: TonalPalette,\n  isDark: boolean,\n  contrastLevel: number,\n): DynamicScheme {\n  return new DynamicScheme({\n    sourceColorArgb: primaryPalette.keyColor.toInt(),\n    variant: 6, // Variant.FIDELITY, used number representation since enum is not accessible outside of @material/material-color-utilities\n    contrastLevel: contrastLevel,\n    isDark: isDark,\n    primaryPalette: primaryPalette,\n    secondaryPalette: secondaryPalette,\n    tertiaryPalette: tertiaryPalette,\n    neutralPalette: neutralPalette,\n    neutralVariantPalette: neutralVariantPalette,\n  });\n}\n\n/**\n * Gets the scss representation of the provided color palettes.\n * @param colorPalettes Map of colors and their hue tones and values.\n * @returns String of the color palettes scss.\n */\nfunction getColorPalettesSCSS(colorPalettes: Map<string, Map<number, string>>): string {\n  let scss = '(\\n';\n  for (const [variant, palette] of colorPalettes!.entries()) {\n    scss += '  ' + variant + ': (\\n';\n    for (const [key, value] of palette.entries()) {\n      scss += '    ' + key + ': ' + value + ',\\n';\n    }\n    scss += '  ),\\n';\n  }\n  scss += ');';\n  return scss;\n}\n\n/**\n * Gets map of all the color tonal palettes with their tones and colors from provided palettes.\n * @param primaryPalette Tonal palette that represents primary.\n * @param secondaryPalette Tonal palette that represents secondary.\n * @param tertiaryPalette Tonal palette that represents tertiary.\n * @param neutralPalette Tonal palette that represents neutral.\n * @param neutralVariantPalette Tonal palette that represents neutral variant.\n * @param errorPalette Tonal palette that represents error.\n * @returns Map with the colors and their hue tones and values.\n */\nfunction getMapFromColorTonalPalettes(\n  primaryPalette: TonalPalette,\n  secondaryPalette: TonalPalette,\n  tertiaryPalette: TonalPalette,\n  neutralPalette: TonalPalette,\n  neutralVariantPalette: TonalPalette,\n  errorPalette: TonalPalette,\n) {\n  const tonalPalettes = {\n    primary: primaryPalette,\n    secondary: secondaryPalette,\n    tertiary: tertiaryPalette,\n    neutral: neutralPalette,\n    neutralVariant: neutralVariantPalette,\n    error: errorPalette,\n  };\n  const palettes: Map<string, Map<number, string>> = new Map();\n  for (const [key, palette] of Object.entries(tonalPalettes)) {\n    const paletteKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const tones = paletteKey === 'neutral' ? NEUTRAL_HUE_TONES : HUE_TONES;\n    const colorPalette: Map<number, string> = new Map();\n    for (const tone of tones) {\n      const color = hexFromArgb(palette.tone(tone));\n      colorPalette.set(tone, color);\n    }\n    palettes.set(paletteKey, colorPalette);\n  }\n  return palettes;\n}\n\n/**\n * Gets the generated scss from the provided color palettes and theme types.\n * @param colorPalettes Map of colors and their hue tones and values.\n * @param colorComment Comment with original hex colors used to generate palettes.\n * @returns String of the generated theme scss.\n */\nexport function generateSCSSTheme(\n  colorPalettes: Map<string, Map<number, string>>,\n  colorComment: string,\n): string {\n  let scss = [\n    \"// This file was generated by running 'ng generate @angular/material:theme-color'.\",\n    '// Proceed with caution if making changes to this file.',\n    '',\n    \"@use 'sass:map';\",\n    \"@use '@angular/material' as mat;\",\n    '',\n    '// Note: ' + colorComment,\n    '$_palettes: ' + getColorPalettesSCSS(colorPalettes),\n    '',\n    '$_rest: (',\n    '  secondary: map.get($_palettes, secondary),',\n    '  neutral: map.get($_palettes, neutral),',\n    '  neutral-variant: map.get($_palettes,  neutral-variant),',\n    '  error: map.get($_palettes, error),',\n    ');',\n    '',\n    '$primary-palette: map.merge(map.get($_palettes, primary), $_rest);',\n    '$tertiary-palette: map.merge(map.get($_palettes, tertiary), $_rest);',\n  ];\n\n  return scss.join('\\n');\n}\n\n/**\n * Gets map of system variables and their high contrast values.\n * @param primaryPalette Tonal palette that represents primary.\n * @param secondaryPalette Tonal palette that represents secondary.\n * @param tertiaryPalette Tonal palette that represents tertiary.\n * @param neutralPalette Tonal palette that represents neutral.\n * @param neutralVariantPalette Tonal palette that represents neutral variant.\n * @param isDark Boolean to represent if the scheme is for a dark or light theme.\n * @returns Map of system variables names and their high contrast values.\n */\nfunction getHighContrastOverides(\n  primaryPalette: TonalPalette,\n  secondaryPalette: TonalPalette,\n  tertiaryPalette: TonalPalette,\n  neutralPalette: TonalPalette,\n  neutralVariantPalette: TonalPalette,\n  isDark: boolean,\n): Map<string, string> {\n  const scheme = getMaterialDynamicScheme(\n    primaryPalette,\n    secondaryPalette,\n    tertiaryPalette,\n    neutralPalette,\n    neutralVariantPalette,\n    isDark,\n    1.0, // 1.0 is the maximum contrast level\n  );\n\n  const overrides = new Map<string, string>();\n\n  // Set system variables with values from primary palette\n  overrides.set('primary', hexFromArgb(scheme.primary));\n  overrides.set('on-primary', hexFromArgb(scheme.onPrimary));\n  overrides.set('primary-container', hexFromArgb(scheme.primaryContainer));\n  overrides.set('on-primary-container', hexFromArgb(scheme.onPrimaryContainer));\n  overrides.set('inverse-primary', hexFromArgb(scheme.inversePrimary));\n  overrides.set('primary-fixed', hexFromArgb(scheme.primaryFixed));\n  overrides.set('primary-fixed-dim', hexFromArgb(scheme.primaryFixedDim));\n  overrides.set('on-primary-fixed', hexFromArgb(scheme.onPrimaryFixed));\n  overrides.set('on-primary-fixed-variant', hexFromArgb(scheme.onPrimaryFixedVariant));\n\n  // Set system variables with values from secondary palette\n  overrides.set('secondary', hexFromArgb(scheme.secondary));\n  overrides.set('on-secondary', hexFromArgb(scheme.onSecondary));\n  overrides.set('secondary-container', hexFromArgb(scheme.secondaryContainer));\n  overrides.set('on-secondary-container', hexFromArgb(scheme.onSecondaryContainer));\n  overrides.set('secondary-fixed', hexFromArgb(scheme.secondaryFixed));\n  overrides.set('secondary-fixed-dim', hexFromArgb(scheme.secondaryFixedDim));\n  overrides.set('on-secondary-fixed', hexFromArgb(scheme.onSecondaryFixed));\n  overrides.set('on-secondary-fixed-variant', hexFromArgb(scheme.onSecondaryFixedVariant));\n\n  // Set system variables with values from tertiary palette\n  overrides.set('tertiary', hexFromArgb(scheme.tertiary));\n  overrides.set('on-tertiary', hexFromArgb(scheme.onTertiary));\n  overrides.set('tertiary-container', hexFromArgb(scheme.tertiaryContainer));\n  overrides.set('on-tertiary-container', hexFromArgb(scheme.onTertiaryContainer));\n  overrides.set('tertiary-fixed', hexFromArgb(scheme.tertiaryFixed));\n  overrides.set('tertiary-fixed-dim', hexFromArgb(scheme.tertiaryFixedDim));\n  overrides.set('on-tertiary-fixed', hexFromArgb(scheme.onTertiaryFixed));\n  overrides.set('on-tertiary-fixed-variant', hexFromArgb(scheme.onTertiaryFixedVariant));\n\n  // Set system variables with values from neutral palette\n  overrides.set('background', hexFromArgb(scheme.background));\n  overrides.set('on-background', hexFromArgb(scheme.onBackground));\n  overrides.set('surface', hexFromArgb(scheme.surface));\n  overrides.set('surface-dim', hexFromArgb(scheme.surfaceDim));\n  overrides.set('surface-bright', hexFromArgb(scheme.surfaceBright));\n  overrides.set('surface-container-lowest', hexFromArgb(scheme.surfaceContainerLowest));\n  overrides.set('surface-container', hexFromArgb(scheme.surfaceContainer));\n  overrides.set('surface-container-high', hexFromArgb(scheme.surfaceContainerHigh));\n  overrides.set('surface-container-highest', hexFromArgb(scheme.surfaceContainerHighest));\n  overrides.set('on-surface', hexFromArgb(scheme.onSurface));\n  overrides.set('shadow', hexFromArgb(scheme.shadow));\n  overrides.set('scrim', hexFromArgb(scheme.scrim));\n  overrides.set('surface-tint', hexFromArgb(scheme.surfaceTint));\n  overrides.set('inverse-surface', hexFromArgb(scheme.inverseSurface));\n  overrides.set('inverse-on-surface', hexFromArgb(scheme.inverseOnSurface));\n  overrides.set('outline', hexFromArgb(scheme.outline));\n  overrides.set('outline-variant', hexFromArgb(scheme.outlineVariant));\n\n  // Set system variables with values from error palette\n  overrides.set('error', hexFromArgb(scheme.error));\n  overrides.set('on-error', hexFromArgb(scheme.onError));\n  overrides.set('error-container', hexFromArgb(scheme.errorContainer));\n  overrides.set('on-error-container', hexFromArgb(scheme.onErrorContainer));\n\n  // Set system variables with values from neutral variant palette\n  overrides.set('surface-variant', hexFromArgb(scheme.surfaceVariant));\n  overrides.set('on-surface-variant', hexFromArgb(scheme.onSurfaceVariant));\n\n  return overrides;\n}\n\n/**\n * Gets the scss representation of the high contrast override mixins.\n * @param primaryPalette Tonal palette that represents primary.\n * @param secondaryPalette Tonal palette that represents secondary.\n * @param tertiaryPalette Tonal palette that represents tertiary.\n * @param neutralPalette Tonal palette that represents neutral.\n * @param neutralVariantPalette Tonal palette that represents neutral variant.\n * @returns String of the generated high contrast mixins scss.\n */\nfunction generateHighContrastOverrideMixinsSCSS(\n  primaryPalette: TonalPalette,\n  secondaryPalette: TonalPalette,\n  tertiaryPalette: TonalPalette,\n  neutralPalette: TonalPalette,\n  neutralVariantPalette: TonalPalette,\n): string {\n  const lightOverrides = getHighContrastOverides(\n    primaryPalette,\n    secondaryPalette,\n    tertiaryPalette,\n    neutralPalette,\n    neutralVariantPalette,\n    /** isDark **/ false,\n  );\n\n  const darkOverrides = getHighContrastOverides(\n    primaryPalette,\n    secondaryPalette,\n    tertiaryPalette,\n    neutralPalette,\n    neutralVariantPalette,\n    /** isDark **/ true,\n  );\n\n  // Create private function to grab correct values based on theme-type\n  let scss = '\\n';\n  scss += '\\n@function _high-contrast-value($light, $dark, $theme-type) {\\n';\n  scss += '  @if ($theme-type == light) {\\n';\n  scss += '    @return $light;\\n';\n  scss += '  }\\n';\n  scss += '  @if ($theme-type == dark) {\\n';\n  scss += '    @return $dark;\\n';\n  scss += '  }\\n';\n  scss += '  @if ($theme-type == color-scheme) {\\n';\n  scss += '    @return light-dark(#{$light}, #{$dark});\\n';\n  scss += '  }\\n';\n  scss +=\n    \"  \\n  @error 'Unknown theme-type #{$theme-type}. Expected light, dark, or color-scheme';\\n\";\n  scss += '}\\n';\n\n  // Create high contrast mixin with theme-type input that can be light, dark, or color-scheme.\n  scss += '\\n@mixin high-contrast-overrides($theme-type) {\\n';\n  scss += '  @include mat.theme-overrides((\\n';\n  for (const [key, value] of lightOverrides!.entries()) {\n    scss +=\n      '    ' +\n      key +\n      ': _high-contrast-value(' +\n      value +\n      ', ' +\n      darkOverrides.get(key) +\n      ', $theme-type),\\n';\n  }\n  scss += '  ))\\n';\n  scss += ' }\\n';\n\n  return scss;\n}\n\n/**\n * Gets Hct representation of Hex color.\n * @param color Hex color.\n * @returns Hct color.\n */\nfunction getHctFromHex(color: string): Hct {\n  try {\n    return Hct.fromInt(argbFromHex(color));\n  } catch (e) {\n    throw new Error(\n      'Cannot parse the specified color ' +\n        color +\n        '. Please verify it is a hex color (ex. #ffffff or ffffff).',\n    );\n  }\n}\n\n/**\n * Creates theme file for provided scss.\n * @param scss scss for the theme file.\n * @param tree Directory tree.\n * @param directory Directory path to place generated theme file.\n */\nfunction createThemeFile(scss: string, tree: Tree, directory?: string) {\n  const filePath = directory ? directory + '_theme-colors.scss' : '_theme-colors.scss';\n  tree.create(filePath, scss);\n}\n\nexport default function (options: Schema): Rule {\n  return async (tree: Tree, context: SchematicContext) => {\n    let colorComment = 'Color palettes are generated from primary: ' + options.primaryColor;\n\n    // Create tonal palettes for each color and custom color overrides if applicable. Used for both\n    // standard contrast and high contrast schemes since they share the same tonal palettes.\n    // The math to generate the palettes follows how palettes are generated for SchemeFidelity\n    // (https://github.com/material-foundation/material-color-utilities/blob/main/typescript/scheme/scheme_fidelity.ts).\n    // Cannot create object directly since we allow users to enter custom colors for palettes and\n    // palettes are readonly for a DynamicScheme.\n    const primaryColorHct = getHctFromHex(options.primaryColor);\n    const primaryPalette = TonalPalette.fromHct(primaryColorHct);\n\n    let secondaryPalette;\n    if (options.secondaryColor) {\n      colorComment += ', secondary: ' + options.secondaryColor;\n      secondaryPalette = TonalPalette.fromHct(getHctFromHex(options.secondaryColor));\n    } else {\n      secondaryPalette = TonalPalette.fromHueAndChroma(\n        primaryColorHct.hue,\n        Math.max(primaryColorHct.chroma - 32.0, primaryColorHct.chroma * 0.5),\n      );\n    }\n\n    let tertiaryPalette;\n    if (options.tertiaryColor) {\n      colorComment += ', tertiary: ' + options.tertiaryColor;\n      tertiaryPalette = TonalPalette.fromHct(getHctFromHex(options.tertiaryColor));\n    } else {\n      tertiaryPalette = TonalPalette.fromInt(\n        DislikeAnalyzer.fixIfDisliked(\n          new TemperatureCache(primaryColorHct).analogous(3, 6)[2],\n        ).toInt(),\n      );\n    }\n\n    let neutralPalette;\n    if (options.neutralColor) {\n      colorComment += ', neutral: ' + options.neutralColor;\n      neutralPalette = TonalPalette.fromHct(getHctFromHex(options.neutralColor));\n    } else {\n      neutralPalette = TonalPalette.fromHueAndChroma(\n        primaryColorHct.hue,\n        primaryColorHct.chroma / 8.0,\n      );\n    }\n\n    const neutralVariantPalette = TonalPalette.fromHueAndChroma(\n      primaryColorHct.hue,\n      primaryColorHct.chroma / 8.0 + 4.0,\n    );\n\n    // Create material dynamic scheme to generate the error tonal palette\n    const errorPalette = getMaterialDynamicScheme(\n      primaryPalette,\n      secondaryPalette,\n      tertiaryPalette,\n      neutralPalette,\n      neutralVariantPalette,\n      false,\n      0,\n    ).errorPalette;\n\n    // Create the generated SCSS file with the exportable palette users can use in their `theme`\n    // mixin call.\n    const colorPalettes = getMapFromColorTonalPalettes(\n      primaryPalette,\n      secondaryPalette,\n      tertiaryPalette,\n      neutralPalette,\n      neutralVariantPalette,\n      errorPalette,\n    );\n    let themeScss = generateSCSSTheme(colorPalettes, colorComment);\n\n    // Add high contrast overrides mixins to generated file if specified\n    if (options.includeHighContrast) {\n      themeScss += generateHighContrastOverrideMixinsSCSS(\n        primaryPalette,\n        secondaryPalette,\n        tertiaryPalette,\n        neutralPalette,\n        neutralVariantPalette,\n      );\n    }\n\n    createThemeFile(themeScss, tree, options.directory);\n  };\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\n/**\n * Utility methods for mathematical operations.\n */\n\n/**\n * The signum function.\n *\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\n */\nexport function signum(num: number): number {\n  if (num < 0) {\n    return -1;\n  } else if (num === 0) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n/**\n * The linear interpolation function.\n *\n * @return start if amount = 0 and stop if amount = 1\n */\nexport function lerp(start: number, stop: number, amount: number): number {\n  return (1.0 - amount) * start + amount * stop;\n}\n\n/**\n * Clamps an integer between two integers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampInt(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Clamps an integer between two floating-point numbers.\n *\n * @return input when min <= input <= max, and either min or max\n * otherwise.\n */\nexport function clampDouble(min: number, max: number, input: number): number {\n  if (input < min) {\n    return min;\n  } else if (input > max) {\n    return max;\n  }\n\n  return input;\n}\n\n/**\n * Sanitizes a degree measure as an integer.\n *\n * @return a degree measure between 0 (inclusive) and 360\n * (exclusive).\n */\nexport function sanitizeDegreesInt(degrees: number): number {\n  degrees = degrees % 360;\n  if (degrees < 0) {\n    degrees = degrees + 360;\n  }\n  return degrees;\n}\n\n/**\n * Sanitizes a degree measure as a floating-point number.\n *\n * @return a degree measure between 0.0 (inclusive) and 360.0\n * (exclusive).\n */\nexport function sanitizeDegreesDouble(degrees: number): number {\n  degrees = degrees % 360.0;\n  if (degrees < 0) {\n    degrees = degrees + 360.0;\n  }\n  return degrees;\n}\n\n/**\n * Sign of direction change needed to travel from one angle to\n * another.\n *\n * For angles that are 180 degrees apart from each other, both\n * directions have the same travel distance, so either direction is\n * shortest. The value 1.0 is returned in this case.\n *\n * @param from The angle travel starts from, in degrees.\n * @param to The angle travel ends at, in degrees.\n * @return -1 if decreasing from leads to the shortest travel\n * distance, 1 if increasing from leads to the shortest travel\n * distance.\n */\nexport function rotationDirection(from: number, to: number): number {\n  const increasingDifference = sanitizeDegreesDouble(to - from);\n  return increasingDifference <= 180.0 ? 1.0 : -1.0;\n}\n\n/**\n * Distance of two points on a circle, represented using degrees.\n */\nexport function differenceDegrees(a: number, b: number): number {\n  return 180.0 - Math.abs(Math.abs(a - b) - 180.0);\n}\n\n/**\n * Multiplies a 1x3 row vector with a 3x3 matrix.\n */\nexport function matrixMultiply(row: number[], matrix: number[][]): number[] {\n  const a =\n      row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\n  const b =\n      row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\n  const c =\n      row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\n  return [a, b, c];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as mathUtils from './math_utils.js';\n\n/**\n * Color science utilities.\n *\n * Utility methods for color science constants and color space\n * conversions that aren't HCT or CAM16.\n */\n\nconst SRGB_TO_XYZ = [\n  [0.41233895, 0.35762064, 0.18051042],\n  [0.2126, 0.7152, 0.0722],\n  [0.01932141, 0.11916382, 0.95034478],\n];\n\nconst XYZ_TO_SRGB = [\n  [\n    3.2413774792388685,\n    -1.5376652402851851,\n    -0.49885366846268053,\n  ],\n  [\n    -0.9691452513005321,\n    1.8758853451067872,\n    0.04156585616912061,\n  ],\n  [\n    0.05562093689691305,\n    -0.20395524564742123,\n    1.0571799111220335,\n  ],\n];\n\nconst WHITE_POINT_D65 = [95.047, 100.0, 108.883];\n\n/**\n * Converts a color from RGB components to ARGB format.\n */\nexport function argbFromRgb(red: number, green: number, blue: number): number {\n  return (255 << 24 | (red & 255) << 16 | (green & 255) << 8 | blue & 255) >>>\n      0;\n}\n\n/**\n * Converts a color from linear RGB components to ARGB format.\n */\nexport function argbFromLinrgb(linrgb: number[]): number {\n  const r = delinearized(linrgb[0]);\n  const g = delinearized(linrgb[1]);\n  const b = delinearized(linrgb[2]);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Returns the alpha component of a color in ARGB format.\n */\nexport function alphaFromArgb(argb: number): number {\n  return argb >> 24 & 255;\n}\n\n/**\n * Returns the red component of a color in ARGB format.\n */\nexport function redFromArgb(argb: number): number {\n  return argb >> 16 & 255;\n}\n\n/**\n * Returns the green component of a color in ARGB format.\n */\nexport function greenFromArgb(argb: number): number {\n  return argb >> 8 & 255;\n}\n\n/**\n * Returns the blue component of a color in ARGB format.\n */\nexport function blueFromArgb(argb: number): number {\n  return argb & 255;\n}\n\n/**\n * Returns whether a color in ARGB format is opaque.\n */\nexport function isOpaque(argb: number): boolean {\n  return alphaFromArgb(argb) >= 255;\n}\n\n/**\n * Converts a color from ARGB to XYZ.\n */\nexport function argbFromXyz(x: number, y: number, z: number): number {\n  const matrix = XYZ_TO_SRGB;\n  const linearR = matrix[0][0] * x + matrix[0][1] * y + matrix[0][2] * z;\n  const linearG = matrix[1][0] * x + matrix[1][1] * y + matrix[1][2] * z;\n  const linearB = matrix[2][0] * x + matrix[2][1] * y + matrix[2][2] * z;\n  const r = delinearized(linearR);\n  const g = delinearized(linearG);\n  const b = delinearized(linearB);\n  return argbFromRgb(r, g, b);\n}\n\n/**\n * Converts a color from XYZ to ARGB.\n */\nexport function xyzFromArgb(argb: number): number[] {\n  const r = linearized(redFromArgb(argb));\n  const g = linearized(greenFromArgb(argb));\n  const b = linearized(blueFromArgb(argb));\n  return mathUtils.matrixMultiply([r, g, b], SRGB_TO_XYZ);\n}\n\n/**\n * Converts a color represented in Lab color space into an ARGB\n * integer.\n */\nexport function argbFromLab(l: number, a: number, b: number): number {\n  const whitePoint = WHITE_POINT_D65;\n  const fy = (l + 16.0) / 116.0;\n  const fx = a / 500.0 + fy;\n  const fz = fy - b / 200.0;\n  const xNormalized = labInvf(fx);\n  const yNormalized = labInvf(fy);\n  const zNormalized = labInvf(fz);\n  const x = xNormalized * whitePoint[0];\n  const y = yNormalized * whitePoint[1];\n  const z = zNormalized * whitePoint[2];\n  return argbFromXyz(x, y, z);\n}\n\n/**\n * Converts a color from ARGB representation to L*a*b*\n * representation.\n *\n * @param argb the ARGB representation of a color\n * @return a Lab object representing the color\n */\nexport function labFromArgb(argb: number): number[] {\n  const linearR = linearized(redFromArgb(argb));\n  const linearG = linearized(greenFromArgb(argb));\n  const linearB = linearized(blueFromArgb(argb));\n  const matrix = SRGB_TO_XYZ;\n  const x =\n      matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n  const y =\n      matrix[1][0] * linearR + matrix[1][1] * linearG + matrix[1][2] * linearB;\n  const z =\n      matrix[2][0] * linearR + matrix[2][1] * linearG + matrix[2][2] * linearB;\n  const whitePoint = WHITE_POINT_D65;\n  const xNormalized = x / whitePoint[0];\n  const yNormalized = y / whitePoint[1];\n  const zNormalized = z / whitePoint[2];\n  const fx = labF(xNormalized);\n  const fy = labF(yNormalized);\n  const fz = labF(zNormalized);\n  const l = 116.0 * fy - 16;\n  const a = 500.0 * (fx - fy);\n  const b = 200.0 * (fy - fz);\n  return [l, a, b];\n}\n\n/**\n * Converts an L* value to an ARGB representation.\n *\n * @param lstar L* in L*a*b*\n * @return ARGB representation of grayscale color with lightness\n * matching L*\n */\nexport function argbFromLstar(lstar: number): number {\n  const y = yFromLstar(lstar);\n  const component = delinearized(y);\n  return argbFromRgb(component, component, component);\n}\n\n/**\n * Computes the L* value of a color in ARGB representation.\n *\n * @param argb ARGB representation of a color\n * @return L*, from L*a*b*, coordinate of the color\n */\nexport function lstarFromArgb(argb: number): number {\n  const y = xyzFromArgb(argb)[1];\n  return 116.0 * labF(y / 100.0) - 16.0;\n}\n\n/**\n * Converts an L* value to a Y value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param lstar L* in L*a*b*\n * @return Y in XYZ\n */\nexport function yFromLstar(lstar: number): number {\n  return 100.0 * labInvf((lstar + 16.0) / 116.0);\n}\n\n/**\n * Converts a Y value to an L* value.\n *\n * L* in L*a*b* and Y in XYZ measure the same quantity, luminance.\n *\n * L* measures perceptual luminance, a linear scale. Y in XYZ\n * measures relative luminance, a logarithmic scale.\n *\n * @param y Y in XYZ\n * @return L* in L*a*b*\n */\nexport function lstarFromY(y: number): number {\n  return labF(y / 100.0) * 116.0 - 16.0;\n}\n\n/**\n * Linearizes an RGB component.\n *\n * @param rgbComponent 0 <= rgb_component <= 255, represents R/G/B\n * channel\n * @return 0.0 <= output <= 100.0, color channel converted to\n * linear RGB space\n */\nexport function linearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 255.0;\n  if (normalized <= 0.040449936) {\n    return normalized / 12.92 * 100.0;\n  } else {\n    return Math.pow((normalized + 0.055) / 1.055, 2.4) * 100.0;\n  }\n}\n\n/**\n * Delinearizes an RGB component.\n *\n * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n * linear R/G/B channel\n * @return 0 <= output <= 255, color channel converted to regular\n * RGB space\n */\nexport function delinearized(rgbComponent: number): number {\n  const normalized = rgbComponent / 100.0;\n  let delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } else {\n    delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return mathUtils.clampInt(0, 255, Math.round(delinearized * 255.0));\n}\n\n/**\n * Returns the standard white point; white on a sunny day.\n *\n * @return The white point\n */\nexport function whitePointD65(): number[] {\n  return WHITE_POINT_D65;\n}\n\n/**\n * RGBA component\n * \n * @param r Red value should be between 0-255\n * @param g Green value should be between 0-255\n * @param b Blue value should be between 0-255\n * @param a Alpha value should be between 0-255\n */\nexport interface Rgba {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/**\n * Return RGBA from a given int32 color\n *\n * @param argb ARGB representation of a int32 color.\n * @return RGBA representation of a int32 color.\n */\nexport function rgbaFromArgb(argb: number): Rgba {\n  const r = redFromArgb(argb);\n  const g = greenFromArgb(argb);\n  const b = blueFromArgb(argb);\n  const a = alphaFromArgb(argb);\n  return {r, g, b, a};\n}\n\n/**\n * Return int32 color from a given RGBA component\n * \n * @param rgba RGBA representation of a int32 color.\n * @returns ARGB representation of a int32 color.\n */\nexport function argbFromRgba({r, g, b, a}: Rgba): number {\n  const rValue = clampComponent(r);\n  const gValue = clampComponent(g);\n  const bValue = clampComponent(b);\n  const aValue = clampComponent(a);\n  return (aValue << 24) | (rValue << 16) | (gValue << 8) | bValue;\n}\n\nfunction clampComponent(value: number) {\n  if (value < 0) return 0;\n  if (value > 255) return 255;\n  return value\n}\n\nfunction labF(t: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  if (t > e) {\n    return Math.pow(t, 1.0 / 3.0);\n  } else {\n    return (kappa * t + 16) / 116;\n  }\n}\n\nfunction labInvf(ft: number): number {\n  const e = 216.0 / 24389.0;\n  const kappa = 24389.0 / 27.0;\n  const ft3 = ft * ft * ft;\n  if (ft3 > e) {\n    return ft3;\n  } else {\n    return (116 * ft - 16) / kappa;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n *\n * This class caches intermediate values of the CAM16 conversion process that\n * depend only on viewing conditions, enabling speed ups.\n */\nexport class ViewingConditions {\n  /** sRGB-like viewing conditions.  */\n  static DEFAULT = ViewingConditions.make();\n\n  /**\n   * Create ViewingConditions from a simple, physically relevant, set of\n   * parameters.\n   *\n   * @param whitePoint White point, measured in the XYZ color space.\n   *     default = D65, or sunny day afternoon\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\n   *     how bright it is in the room where the color is viewed. Can be\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\n   *     or 200 lux.\n   * @param backgroundLstar The lightness of the area surrounding the color.\n   *     measured by L* in L*a*b*. default = 50.0\n   * @param surround A general description of the lighting surrounding the\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\n   *     dimly light room, like watching TV at home at night. 2.0 means there\n   *     is no difference between the lighting on the color and around it.\n   *     default = 2.0\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\n   *     ambient lighting, such as knowing an apple is still red in green light.\n   *     default = false, the eye does not perform this process on\n   *       self-luminous objects like displays.\n   */\n  static make(\n      whitePoint = utils.whitePointD65(),\n      adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0,\n      backgroundLstar = 50.0, surround = 2.0,\n      discountingIlluminant = false): ViewingConditions {\n    const xyz = whitePoint;\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\n    const f = 0.8 + surround / 10.0;\n    const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\n                         math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\n    let d = discountingIlluminant ?\n        1.0 :\n        f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\n    const nc = f;\n    const rgbD = [\n      d * (100.0 / rW) + 1.0 - d,\n      d * (100.0 / gW) + 1.0 - d,\n      d * (100.0 / bW) + 1.0 - d,\n    ];\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\n    const k4 = k * k * k * k;\n    const k4F = 1.0 - k4;\n    const fl = k4 * adaptingLuminance +\n        0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\n    const z = 1.48 + Math.sqrt(n);\n    const nbb = 0.725 / Math.pow(n, 0.2);\n    const ncb = nbb;\n    const rgbAFactors = [\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\n    ];\n    const rgbA = [\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\n    ];\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\n    return new ViewingConditions(\n        n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\n  }\n\n  /**\n   * Parameters are intermediate values of the CAM16 conversion process. Their\n   * names are shorthand for technical color science terminology, this class\n   * would not benefit from documenting them individually. A brief overview\n   * is available in the CAM16 specification, and a complete overview requires\n   * a color science textbook, such as Fairchild's Color Appearance Models.\n   */\n  private constructor(\n      public n: number, public aw: number, public nbb: number,\n      public ncb: number, public c: number, public nc: number,\n      public rgbD: number[], public fl: number, public fLRoot: number,\n      public z: number) {}\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {ViewingConditions} from './viewing_conditions.js';\n\n/**\n * CAM16, a color appearance model. Colors are not just defined by their hex\n * code, but rather, a hex code and viewing conditions.\n *\n * CAM16 instances also have coordinates in the CAM16-UCS space, called J*, a*,\n * b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n * specification, and should be used when measuring distances between colors.\n *\n * In traditional color spaces, a color can be identified solely by the\n * observer's measurement of the color. Color appearance models such as CAM16\n * also use information about the environment where the color was\n * observed, known as the viewing conditions.\n *\n * For example, white under the traditional assumption of a midday sun white\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\n * hue 203, chroma 3, lightness 100)\n */\nexport class Cam16 {\n  /**\n   * All of the CAM16 dimensions can be calculated from 3 of the dimensions, in\n   * the following combinations:\n   *      -  {j or q} and {c, m, or s} and hue\n   *      - jstar, astar, bstar\n   * Prefer using a static method that constructs from 3 of those dimensions.\n   * This constructor is intended for those methods to use to return all\n   * possible dimensions.\n   *\n   * @param hue\n   * @param chroma informally, colorfulness / color intensity. like saturation\n   *     in HSL, except perceptually accurate.\n   * @param j lightness\n   * @param q brightness; ratio of lightness to white point's lightness\n   * @param m colorfulness\n   * @param s saturation; ratio of chroma to white point's chroma\n   * @param jstar CAM16-UCS J coordinate\n   * @param astar CAM16-UCS a coordinate\n   * @param bstar CAM16-UCS b coordinate\n   */\n  constructor(\n      readonly hue: number, readonly chroma: number, readonly j: number,\n      readonly q: number, readonly m: number, readonly s: number,\n      readonly jstar: number, readonly astar: number, readonly bstar: number) {}\n\n  /**\n   * CAM16 instances also have coordinates in the CAM16-UCS space, called J*,\n   * a*, b*, or jstar, astar, bstar in code. CAM16-UCS is included in the CAM16\n   * specification, and is used to measure distances between colors.\n   */\n  distance(other: Cam16): number {\n    const dJ = this.jstar - other.jstar;\n    const dA = this.astar - other.astar;\n    const dB = this.bstar - other.bstar;\n    const dEPrime = Math.sqrt(dJ * dJ + dA * dA + dB * dB);\n    const dE = 1.41 * Math.pow(dEPrime, 0.63);\n    return dE;\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return CAM16 color, assuming the color was viewed in default viewing\n   *     conditions.\n   */\n  static fromInt(argb: number): Cam16 {\n    return Cam16.fromIntInViewingConditions(argb, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   * @return CAM16 color.\n   */\n  static fromIntInViewingConditions(\n      argb: number, viewingConditions: ViewingConditions): Cam16 {\n    const red = (argb & 0x00ff0000) >> 16;\n    const green = (argb & 0x0000ff00) >> 8;\n    const blue = (argb & 0x000000ff);\n    const redL = utils.linearized(red);\n    const greenL = utils.linearized(green);\n    const blueL = utils.linearized(blue);\n    const x = 0.41233895 * redL + 0.35762064 * greenL + 0.18051042 * blueL;\n    const y = 0.2126 * redL + 0.7152 * greenL + 0.0722 * blueL;\n    const z = 0.01932141 * redL + 0.11916382 * greenL + 0.95034478 * blueL;\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    const rAF = Math.pow((viewingConditions.fl * Math.abs(rD)) / 100.0, 0.42);\n    const gAF = Math.pow((viewingConditions.fl * Math.abs(gD)) / 100.0, 0.42);\n    const bAF = Math.pow((viewingConditions.fl * Math.abs(bD)) / 100.0, 0.42);\n\n    const rA = (math.signum(rD) * 400.0 * rAF) / (rAF + 27.13);\n    const gA = (math.signum(gD) * 400.0 * gAF) / (gAF + 27.13);\n    const bA = (math.signum(bD) * 400.0 * bAF) / (bAF + 27.13);\n\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = (atan2 * 180.0) / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n        atanDegrees >= 360      ? atanDegrees - 360.0 :\n                                  atanDegrees;\n    const hueRadians = (hue * Math.PI) / 180.0;\n\n    const ac = p2 * viewingConditions.nbb;\n    const j = 100.0 *\n        Math.pow(\n            ac / viewingConditions.aw,\n            viewingConditions.c * viewingConditions.z);\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const huePrime = hue < 20.14 ? hue + 360 : hue;\n    const eHue = 0.25 * (Math.cos((huePrime * Math.PI) / 180.0 + 2.0) + 3.8);\n    const p1 =\n        (50000.0 / 13.0) * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = (p1 * Math.sqrt(a * a + b * b)) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n        Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const c = alpha * Math.sqrt(j / 100.0);\n    const m = c * viewingConditions.fLRoot;\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n\n    return new Cam16(hue, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   */\n  static fromJch(j: number, c: number, h: number): Cam16 {\n    return Cam16.fromJchInViewingConditions(j, c, h, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param j CAM16 lightness\n   * @param c CAM16 chroma\n   * @param h CAM16 hue\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromJchInViewingConditions(\n      j: number, c: number, h: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const q = (4.0 / viewingConditions.c) * Math.sqrt(j / 100.0) *\n        (viewingConditions.aw + 4.0) * viewingConditions.fLRoot;\n    const m = c * viewingConditions.fLRoot;\n    const alpha = c / Math.sqrt(j / 100.0);\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n    const hueRadians = (h * Math.PI) / 180.0;\n    const jstar = ((1.0 + 100.0 * 0.007) * j) / (1.0 + 0.007 * j);\n    const mstar = (1.0 / 0.0228) * Math.log(1.0 + 0.0228 * m);\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(h, c, j, q, m, s, jstar, astar, bstar);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   */\n  static fromUcs(jstar: number, astar: number, bstar: number): Cam16 {\n    return Cam16.fromUcsInViewingConditions(\n        jstar, astar, bstar, ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param jstar CAM16-UCS lightness.\n   * @param astar CAM16-UCS a dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the Y axis.\n   * @param bstar CAM16-UCS b dimension. Like a* in L*a*b*, it is a Cartesian\n   *     coordinate on the X axis.\n   * @param viewingConditions Information about the environment where the color\n   *     was observed.\n   */\n  static fromUcsInViewingConditions(\n      jstar: number, astar: number, bstar: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    const a = astar;\n    const b = bstar;\n    const m = Math.sqrt(a * a + b * b);\n    const M = (Math.exp(m * 0.0228) - 1.0) / 0.0228;\n    const c = M / viewingConditions.fLRoot;\n    let h = Math.atan2(b, a) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 360.0;\n    }\n    const j = jstar / (1 - (jstar - 100) * 0.007);\n    return Cam16.fromJchInViewingConditions(j, c, h, viewingConditions);\n  }\n\n  /**\n   *  @return ARGB representation of color, assuming the color was viewed in\n   *     default viewing conditions, which are near-identical to the default\n   *     viewing conditions for sRGB.\n   */\n  toInt(): number {\n    return this.viewed(ViewingConditions.DEFAULT);\n  }\n\n  /**\n   * @param viewingConditions Information about the environment where the color\n   *     will be viewed.\n   * @return ARGB representation of color\n   */\n  viewed(viewingConditions: ViewingConditions): number {\n    const alpha = this.chroma === 0.0 || this.j === 0.0 ?\n        0.0 :\n        this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n        alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n        1.0 / 0.9);\n    const hRad = (this.hue * Math.PI) / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n        Math.pow(\n            this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const p2 = ac / viewingConditions.nbb;\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = (23.0 * (p2 + 0.305) * t) /\n        (23.0 * p1 + 11.0 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n        Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n        Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n        Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    const argb = utils.argbFromXyz(x, y, z);\n    return argb;\n  }\n\n  /// Given color expressed in XYZ and viewed in [viewingConditions], convert to\n  /// CAM16.\n  static fromXyzInViewingConditions(\n      x: number, y: number, z: number,\n      viewingConditions: ViewingConditions): Cam16 {\n    // Transform XYZ to 'cone'/'rgb' responses\n\n    const rC = 0.401288 * x + 0.650173 * y - 0.051461 * z;\n    const gC = -0.250268 * x + 1.204414 * y + 0.045854 * z;\n    const bC = -0.002079 * x + 0.048952 * y + 0.953127 * z;\n\n    // Discount illuminant\n    const rD = viewingConditions.rgbD[0] * rC;\n    const gD = viewingConditions.rgbD[1] * gC;\n    const bD = viewingConditions.rgbD[2] * bC;\n\n    // chromatic adaptation\n    const rAF = Math.pow(viewingConditions.fl * Math.abs(rD) / 100.0, 0.42);\n    const gAF = Math.pow(viewingConditions.fl * Math.abs(gD) / 100.0, 0.42);\n    const bAF = Math.pow(viewingConditions.fl * Math.abs(bD) / 100.0, 0.42);\n    const rA = math.signum(rD) * 400.0 * rAF / (rAF + 27.13);\n    const gA = math.signum(gD) * 400.0 * gAF / (gAF + 27.13);\n    const bA = math.signum(bD) * 400.0 * bAF / (bAF + 27.13);\n\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n\n    // auxiliary components\n    const u = (20.0 * rA + 20.0 * gA + 21.0 * bA) / 20.0;\n    const p2 = (40.0 * rA + 20.0 * gA + bA) / 20.0;\n\n    // hue\n    const atan2 = Math.atan2(b, a);\n    const atanDegrees = atan2 * 180.0 / Math.PI;\n    const hue = atanDegrees < 0 ? atanDegrees + 360.0 :\n        atanDegrees >= 360      ? atanDegrees - 360 :\n                                  atanDegrees;\n    const hueRadians = hue * Math.PI / 180.0;\n\n    // achromatic response to color\n    const ac = p2 * viewingConditions.nbb;\n\n    // CAM16 lightness and brightness\n    const J = 100.0 *\n        Math.pow(\n            ac / viewingConditions.aw,\n            viewingConditions.c * viewingConditions.z);\n    const Q = (4.0 / viewingConditions.c) * Math.sqrt(J / 100.0) *\n        (viewingConditions.aw + 4.0) * (viewingConditions.fLRoot);\n\n    const huePrime = (hue < 20.14) ? hue + 360 : hue;\n    const eHue =\n        (1.0 / 4.0) * (Math.cos(huePrime * Math.PI / 180.0 + 2.0) + 3.8);\n    const p1 =\n        50000.0 / 13.0 * eHue * viewingConditions.nc * viewingConditions.ncb;\n    const t = p1 * Math.sqrt(a * a + b * b) / (u + 0.305);\n    const alpha = Math.pow(t, 0.9) *\n        Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    // CAM16 chroma, colorfulness, chroma\n    const C = alpha * Math.sqrt(J / 100.0);\n    const M = C * viewingConditions.fLRoot;\n    const s = 50.0 *\n        Math.sqrt((alpha * viewingConditions.c) / (viewingConditions.aw + 4.0));\n\n    // CAM16-UCS components\n    const jstar = (1.0 + 100.0 * 0.007) * J / (1.0 + 0.007 * J);\n    const mstar = Math.log(1.0 + 0.0228 * M) / 0.0228;\n    const astar = mstar * Math.cos(hueRadians);\n    const bstar = mstar * Math.sin(hueRadians);\n    return new Cam16(hue, C, J, Q, M, s, jstar, astar, bstar);\n  }\n\n  /// XYZ representation of CAM16 seen in [viewingConditions].\n  xyzInViewingConditions(viewingConditions: ViewingConditions): number[] {\n    const alpha = (this.chroma === 0.0 || this.j === 0.0) ?\n        0.0 :\n        this.chroma / Math.sqrt(this.j / 100.0);\n\n    const t = Math.pow(\n        alpha / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73),\n        1.0 / 0.9);\n    const hRad = this.hue * Math.PI / 180.0;\n\n    const eHue = 0.25 * (Math.cos(hRad + 2.0) + 3.8);\n    const ac = viewingConditions.aw *\n        Math.pow(\n            this.j / 100.0, 1.0 / viewingConditions.c / viewingConditions.z);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n\n    const p2 = (ac / viewingConditions.nbb);\n\n    const hSin = Math.sin(hRad);\n    const hCos = Math.cos(hRad);\n\n    const gamma = 23.0 * (p2 + 0.305) * t /\n        (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n    const a = gamma * hCos;\n    const b = gamma * hSin;\n    const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n    const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n    const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n\n    const rCBase = Math.max(0, (27.13 * Math.abs(rA)) / (400.0 - Math.abs(rA)));\n    const rC = math.signum(rA) * (100.0 / viewingConditions.fl) *\n        Math.pow(rCBase, 1.0 / 0.42);\n    const gCBase = Math.max(0, (27.13 * Math.abs(gA)) / (400.0 - Math.abs(gA)));\n    const gC = math.signum(gA) * (100.0 / viewingConditions.fl) *\n        Math.pow(gCBase, 1.0 / 0.42);\n    const bCBase = Math.max(0, (27.13 * Math.abs(bA)) / (400.0 - Math.abs(bA)));\n    const bC = math.signum(bA) * (100.0 / viewingConditions.fl) *\n        Math.pow(bCBase, 1.0 / 0.42);\n    const rF = rC / viewingConditions.rgbD[0];\n    const gF = gC / viewingConditions.rgbD[1];\n    const bF = bC / viewingConditions.rgbD[2];\n\n    const x = 1.86206786 * rF - 1.01125463 * gF + 0.14918677 * bF;\n    const y = 0.38752654 * rF + 0.62144744 * gF - 0.00897398 * bF;\n    const z = -0.01584150 * rF - 0.03412294 * gF + 1.04996444 * bF;\n\n    return [x, y, z];\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n\nimport {Cam16} from './cam16.js';\nimport {ViewingConditions} from './viewing_conditions.js';\n\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n/**\n * A class that solves the HCT equation.\n */\nexport class HctSolver {\n  static SCALED_DISCOUNT_FROM_LINRGB = [\n    [\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n    ],\n    [\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n    ],\n    [\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076,\n    ],\n  ];\n\n  static LINRGB_FROM_SCALED_DISCOUNT = [\n    [\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n    ],\n    [\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n    ],\n    [\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385,\n    ],\n  ];\n\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\n\n  static CRITICAL_PLANES = [\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\n    97.78421388448044,    98.6670533535366,     99.55452497210776,\n  ];\n\n  /**\n   * Sanitizes a small enough angle in radians.\n   *\n   * @param angle An angle in radians; must not deviate too much\n   * from 0.\n   * @return A coterminal angle between 0 and 2pi.\n   */\n  private static sanitizeRadians(angle: number): number {\n    return (angle + Math.PI * 8) % (Math.PI * 2);\n  }\n\n  /**\n   * Delinearizes an RGB component, returning a floating-point\n   * number.\n   *\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\n   * linear R/G/B channel\n   * @return 0.0 <= output <= 255.0, color channel converted to\n   * regular RGB space\n   */\n  private static trueDelinearized(rgbComponent: number): number {\n    const normalized = rgbComponent / 100.0;\n    let delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n      delinearized = normalized * 12.92;\n    } else {\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return delinearized * 255.0;\n  }\n\n  private static chromaticAdaptation(component: number): number {\n    const af = Math.pow(Math.abs(component), 0.42);\n    return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\n  }\n\n  /**\n   * Returns the hue of a linear RGB color in CAM16.\n   *\n   * @param linrgb The linear RGB coordinates of a color.\n   * @return The hue of the color in CAM16, in radians.\n   */\n  private static hueOf(linrgb: number[]): number {\n    const scaledDiscount =\n        mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\n    // redness-greenness\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\n    // yellowness-blueness\n    const b = (rA + gA - 2.0 * bA) / 9.0;\n    return Math.atan2(b, a);\n  }\n\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\n    return deltaAB < deltaAC;\n  }\n\n  /**\n   * Solves the lerp equation.\n   *\n   * @param source The starting number.\n   * @param mid The number in the middle.\n   * @param target The ending number.\n   * @return A number t such that lerp(source, target, t) = mid.\n   */\n  private static intercept(source: number, mid: number, target: number):\n      number {\n    return (mid - source) / (target - source);\n  }\n\n  private static lerpPoint(source: number[], t: number, target: number[]):\n      number[] {\n    return [\n      source[0] + (target[0] - source[0]) * t,\n      source[1] + (target[1] - source[1]) * t,\n      source[2] + (target[2] - source[2]) * t,\n    ];\n  }\n\n  /**\n   * Intersects a segment with a plane.\n   *\n   * @param source The coordinates of point A.\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\n   * @param target The coordinates of point B.\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\n   * G, 2: B)\n   * @return The intersection point of the segment AB with the plane\n   * R=coordinate, G=coordinate, or B=coordinate\n   */\n  private static setCoordinate(\n      source: number[],\n      coordinate: number,\n      target: number[],\n      axis: number,\n      ): number[] {\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\n    return HctSolver.lerpPoint(source, t, target);\n  }\n\n  private static isBounded(x: number): boolean {\n    return 0.0 <= x && x <= 100.0;\n  }\n\n  /**\n   * Returns the nth possible vertex of the polygonal intersection.\n   *\n   * @param y The Y value of the plane.\n   * @param n The zero-based index of the point. 0 <= n <= 11.\n   * @return The nth possible vertex of the polygonal intersection\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\n   * it exists. If this possible vertex lies outside of the cube,\n   * [-1.0, -1.0, -1.0] is returned.\n   */\n  private static nthVertex(y: number, n: number): number[] {\n    const kR = HctSolver.Y_FROM_LINRGB[0];\n    const kG = HctSolver.Y_FROM_LINRGB[1];\n    const kB = HctSolver.Y_FROM_LINRGB[2];\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\n    if (n < 4) {\n      const g = coordA;\n      const b = coordB;\n      const r = (y - g * kG - b * kB) / kR;\n      if (HctSolver.isBounded(r)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else if (n < 8) {\n      const b = coordA;\n      const r = coordB;\n      const g = (y - r * kR - b * kB) / kG;\n      if (HctSolver.isBounded(g)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    } else {\n      const r = coordA;\n      const g = coordB;\n      const b = (y - r * kR - g * kG) / kB;\n      if (HctSolver.isBounded(b)) {\n        return [r, g, b];\n      } else {\n        return [-1.0, -1.0, -1.0];\n      }\n    }\n  }\n\n  /**\n   * Finds the segment containing the desired color.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return A list of two sets of linear RGB coordinates, each\n   * corresponding to an endpoint of the segment containing the\n   * desired color.\n   */\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\n    let left = [-1.0, -1.0, -1.0];\n    let right = left;\n    let leftHue = 0.0;\n    let rightHue = 0.0;\n    let initialized = false;\n    let uncut = true;\n    for (let n = 0; n < 12; n++) {\n      const mid = HctSolver.nthVertex(y, n);\n      if (mid[0] < 0) {\n        continue;\n      }\n      const midHue = HctSolver.hueOf(mid);\n      if (!initialized) {\n        left = mid;\n        right = mid;\n        leftHue = midHue;\n        rightHue = midHue;\n        initialized = true;\n        continue;\n      }\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\n        uncut = false;\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n          right = mid;\n          rightHue = midHue;\n        } else {\n          left = mid;\n          leftHue = midHue;\n        }\n      }\n    }\n    return [left, right];\n  }\n\n  private static midpoint(a: number[], b: number[]): number[] {\n    return [\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2,\n    ];\n  }\n\n  private static criticalPlaneBelow(x: number): number {\n    return Math.floor(x - 0.5);\n  }\n\n  private static criticalPlaneAbove(x: number): number {\n    return Math.ceil(x - 0.5);\n  }\n\n  /**\n   * Finds a color with the given Y and hue on the boundary of the\n   * cube.\n   *\n   * @param y The Y value of the color.\n   * @param targetHue The hue of the color.\n   * @return The desired color, in linear RGB coordinates.\n   */\n  private static bisectToLimit(y: number, targetHue: number): number[] {\n    const segment = HctSolver.bisectToSegment(y, targetHue);\n    let left = segment[0];\n    let leftHue = HctSolver.hueOf(left);\n    let right = segment[1];\n    for (let axis = 0; axis < 3; axis++) {\n      if (left[axis] !== right[axis]) {\n        let lPlane = -1;\n        let rPlane = 255;\n        if (left[axis] < right[axis]) {\n          lPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(right[axis]));\n        } else {\n          lPlane = HctSolver.criticalPlaneAbove(\n              HctSolver.trueDelinearized(left[axis]));\n          rPlane = HctSolver.criticalPlaneBelow(\n              HctSolver.trueDelinearized(right[axis]));\n        }\n        for (let i = 0; i < 8; i++) {\n          if (Math.abs(rPlane - lPlane) <= 1) {\n            break;\n          } else {\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\n            const mid =\n                HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\n            const midHue = HctSolver.hueOf(mid);\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\n              right = mid;\n              rPlane = mPlane;\n            } else {\n              left = mid;\n              leftHue = midHue;\n              lPlane = mPlane;\n            }\n          }\n        }\n      }\n    }\n    return HctSolver.midpoint(left, right);\n  }\n\n  private static inverseChromaticAdaptation(adapted: number): number {\n    const adaptedAbs = Math.abs(adapted);\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\n  }\n\n  /**\n   * Finds a color with the given hue, chroma, and Y.\n   *\n   * @param hueRadians The desired hue in radians.\n   * @param chroma The desired chroma.\n   * @param y The desired Y.\n   * @return The desired color as a hexadecimal integer, if found; 0\n   * otherwise.\n   */\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\n      number {\n    // Initial estimate of j.\n    let j = Math.sqrt(y) * 11.0;\n    // ===========================================================\n    // Operations inlined from Cam16 to avoid repeated calculation\n    // ===========================================================\n    const viewingConditions = ViewingConditions.DEFAULT;\n    const tInnerCoeff =\n        1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\n    const p1 =\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\n    const hSin = Math.sin(hueRadians);\n    const hCos = Math.cos(hueRadians);\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      const jNormalized = j / 100.0;\n      const alpha =\n          chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\n      const ac = viewingConditions.aw *\n          Math.pow(\n              jNormalized,\n              1.0 / viewingConditions.c / viewingConditions.z,\n          );\n      const p2 = ac / viewingConditions.nbb;\n      const gamma = 23.0 * (p2 + 0.305) * t /\n          (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\n      const a = gamma * hCos;\n      const b = gamma * hSin;\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\n      const linrgb = mathUtils.matrixMultiply(\n          [rCScaled, gCScaled, bCScaled],\n          HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\n      );\n      // ===========================================================\n      // Operations inlined from Cam16 to avoid repeated calculation\n      // ===========================================================\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\n        return 0;\n      }\n      const kR = HctSolver.Y_FROM_LINRGB[0];\n      const kG = HctSolver.Y_FROM_LINRGB[1];\n      const kB = HctSolver.Y_FROM_LINRGB[2];\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\n      if (fnj <= 0) {\n        return 0;\n      }\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\n          return 0;\n        }\n        return colorUtils.argbFromLinrgb(linrgb);\n      }\n      // Iterates with Newton method,\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\n      j = j - (fnj - y) * j / (2 * fnj);\n    }\n    return 0;\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return A hexadecimal representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\n      return colorUtils.argbFromLstar(lstar);\n    }\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\n    const hueRadians = hueDegrees / 180 * Math.PI;\n    const y = colorUtils.yFromLstar(lstar);\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\n    if (exactAnswer !== 0) {\n      return exactAnswer;\n    }\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\n    return colorUtils.argbFromLinrgb(linrgb);\n  }\n\n  /**\n   * Finds an sRGB color with the given hue, chroma, and L*, if\n   * possible.\n   *\n   * @param hueDegrees The desired hue, in degrees.\n   * @param chroma The desired chroma.\n   * @param lstar The desired L*.\n   * @return An CAM16 object representing the sRGB color. The color\n   * has sufficiently close hue, chroma, and L* to the desired\n   * values, if possible; otherwise, the hue and L* will be\n   * sufficiently close, and chroma will be maximized.\n   */\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A color system built using CAM16 hue and chroma, and L* from\n * L*a*b*.\n *\n * Using L* creates a link between the color system, contrast, and thus\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\n * color space. L*, or perceptual luminance can be calculated from Y.\n *\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\n * accurate color tones.\n *\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\n */\n\nimport * as utils from '../utils/color_utils.js';\n\nimport {Cam16} from './cam16.js';\nimport {HctSolver} from './hct_solver.js';\nimport {ViewingConditions} from './viewing_conditions.js';\n\n\n/**\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\n * accurate color measurement system that can also accurately render what colors\n * will appear as in different lighting environments.\n */\nexport class Hct {\n  /**\n   * @param hue 0 <= hue < 360; invalid values are corrected.\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\n   *     returned may be lower than the requested chroma. Chroma has a different\n   *     maximum for any given hue and tone.\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\n   * @return HCT representation of a color in default viewing conditions.\n   */\n\n  internalHue: number;\n  internalChroma: number;\n  internalTone: number;\n\n  static from(hue: number, chroma: number, tone: number) {\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\n  }\n\n  /**\n   * @param argb ARGB representation of a color.\n   * @return HCT representation of a color in default viewing conditions\n   */\n  static fromInt(argb: number) {\n    return new Hct(argb);\n  }\n\n  toInt(): number {\n    return this.argb;\n  }\n\n  /**\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\n   * Ranges from 0 <= hue < 360.\n   */\n  get hue(): number {\n    return this.internalHue;\n  }\n\n  /**\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set hue(newHue: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            newHue,\n            this.internalChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  get chroma(): number {\n    return this.internalChroma;\n  }\n\n  /**\n   * @param newChroma 0 <= newChroma < ?\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set chroma(newChroma: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            newChroma,\n            this.internalTone,\n            ),\n    );\n  }\n\n  /** Lightness. Ranges from 0 to 100. */\n  get tone(): number {\n    return this.internalTone;\n  }\n\n  /**\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\n   * Chroma may decrease because chroma has a different maximum for any given\n   * hue and tone.\n   */\n  set tone(newTone: number) {\n    this.setInternalState(\n        HctSolver.solveToInt(\n            this.internalHue,\n            this.internalChroma,\n            newTone,\n            ),\n    );\n  }\n\n  private constructor(private argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  private setInternalState(argb: number) {\n    const cam = Cam16.fromInt(argb);\n    this.internalHue = cam.hue;\n    this.internalChroma = cam.chroma;\n    this.internalTone = utils.lstarFromArgb(argb);\n    this.argb = argb;\n  }\n\n  /**\n   * Translates a color into different [ViewingConditions].\n   *\n   * Colors change appearance. They look different with lights on versus off,\n   * the same color, as in hex code, on white looks different when on black.\n   * This is called color relativity, most famously explicated by Josef Albers\n   * in Interaction of Color.\n   *\n   * In color science, color appearance models can account for this and\n   * calculate the appearance of a color in different settings. HCT is based on\n   * CAM16, a color appearance model, and uses it to make these calculations.\n   *\n   * See [ViewingConditions.make] for parameters affecting color appearance.\n   */\n  inViewingConditions(vc: ViewingConditions): Hct {\n    // 1. Use CAM16 to find XYZ coordinates of color in specified VC.\n    const cam = Cam16.fromInt(this.toInt());\n    const viewedInVc = cam.xyzInViewingConditions(vc);\n\n    // 2. Create CAM16 of those XYZ coordinates in default VC.\n    const recastInVc = Cam16.fromXyzInViewingConditions(\n        viewedInVc[0],\n        viewedInVc[1],\n        viewedInVc[2],\n        ViewingConditions.make(),\n    );\n\n    // 3. Create HCT from:\n    // - CAM16 using default VC with XYZ coordinates in specified VC.\n    // - L* converted from Y in XYZ coordinates in specified VC.\n    const recastHct = Hct.from(\n        recastInVc.hue,\n        recastInVc.chroma,\n        utils.lstarFromY(viewedInVc[1]),\n    );\n    return recastHct;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\nimport * as utils from '../utils/color_utils.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * Utility methods for calculating contrast given two colors, or calculating a\n * color given one color and a contrast ratio.\n *\n * Contrast ratio is calculated using XYZ's Y. When linearized to match human\n * perception, Y becomes HCT's tone and L*a*b*'s' L*. Informally, this is the\n * lightness of a color.\n *\n * Methods refer to tone, T in the the HCT color space.\n * Tone is equivalent to L* in the L*a*b* color space, or L in the LCH color\n * space.\n */\nexport class Contrast {\n  /**\n   * Returns a contrast ratio, which ranges from 1 to 21.\n   *\n   * @param toneA Tone between 0 and 100. Values outside will be clamped.\n   * @param toneB Tone between 0 and 100. Values outside will be clamped.\n   */\n  static ratioOfTones(toneA: number, toneB: number): number {\n    toneA = math.clampDouble(0.0, 100.0, toneA);\n    toneB = math.clampDouble(0.0, 100.0, toneB);\n    return Contrast.ratioOfYs(utils.yFromLstar(toneA), utils.yFromLstar(toneB));\n  }\n\n  static ratioOfYs(y1: number, y2: number): number {\n    const lighter = y1 > y2 ? y1 : y2;\n    const darker = (lighter === y2) ? y1 : y2;\n    return (lighter + 5.0) / (darker + 5.0);\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighter(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const darkY = utils.yFromLstar(tone);\n    const lightY = ratio * (darkY + 5.0) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(lightY) + 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone <= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns -1 if ratio cannot be achieved with tone parameter.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in -1 being returned.\n   * @param ratio Contrast ratio of return value and tone.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darker(tone: number, ratio: number): number {\n    if (tone < 0.0 || tone > 100.0) {\n      return -1.0;\n    }\n\n    const lightY = utils.yFromLstar(tone);\n    const darkY = ((lightY + 5.0) / ratio) - 5.0;\n    const realContrast = Contrast.ratioOfYs(lightY, darkY);\n\n    const delta = Math.abs(realContrast - ratio);\n    if (realContrast < ratio && delta > 0.04) {\n      return -1;\n    }\n\n    // Ensure gamut mapping, which requires a 'range' on tone, will still result\n    // the correct ratio by darkening slightly.\n    const returnValue = utils.lstarFromY(darkY) - 0.4;\n    if (returnValue < 0 || returnValue > 100) {\n      return -1;\n    }\n    return returnValue;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the ratio with tone. For example, there is no color lighter than T100.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 100 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static lighterUnsafe(tone: number, ratio: number): number {\n    const lighterSafe = Contrast.lighter(tone, ratio);\n    return (lighterSafe < 0.0) ? 100.0 : lighterSafe;\n  }\n\n  /**\n   * Returns a tone >= tone parameter that ensures ratio parameter.\n   * Return value is between 0 and 100.\n   * Returns 100 if ratio cannot be achieved with tone parameter.\n   *\n   * This method is unsafe because the returned value is guaranteed to be in\n   * bounds for tone, i.e. between 0 and 100. However, that value may not reach\n   * the [ratio with [tone]. For example, there is no color darker than T0.\n   *\n   * @param tone Tone return value must contrast with.\n   * Range is 0 to 100. Invalid values will result in 0 being returned.\n   * @param ratio Desired contrast ratio of return value and tone parameter.\n   * Range is 1 to 21, invalid values have undefined behavior.\n   */\n  static darkerUnsafe(tone: number, ratio: number): number {\n    const darkerSafe = Contrast.darker(tone, ratio);\n    return (darkerSafe < 0.0) ? 0.0 : darkerSafe;\n  }\n}", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\n\n// material_color_utilities is designed to have a consistent API across\n// platforms and modular components that can be moved around easily. Using a\n// class as a namespace facilitates this.\n//\n// tslint:disable:class-as-namespace\n\n/**\n * Check and/or fix universally disliked colors.\n * Color science studies of color preference indicate universal distaste for\n * dark yellow-greens, and also show this is correlated to distate for\n * biological waste and rotting food.\n *\n * See Palmer and Schloss, 2010 or Schloss and Palmer's Chapter 21 in Handbook\n * of Color Psychology (2015).\n */\nexport class DislikeAnalyzer {\n  /**\n   * Returns true if a color is disliked.\n   *\n   * @param hct A color to be judged.\n   * @return Whether the color is disliked.\n   *\n   * Disliked is defined as a dark yellow-green that is not neutral.\n   */\n  static isDisliked(hct: Hct): boolean {\n    const huePasses =\n        Math.round(hct.hue) >= 90.0 && Math.round(hct.hue) <= 111.0;\n    const chromaPasses = Math.round(hct.chroma) > 16.0;\n    const tonePasses = Math.round(hct.tone) < 65.0;\n\n    return huePasses && chromaPasses && tonePasses;\n  }\n\n  /**\n   * If a color is disliked, lighten it to make it likable.\n   *\n   * @param hct A color to be judged.\n   * @return A new color if the original color is disliked, or the original\n   *   color if it is acceptable.\n   */\n  static fixIfDisliked(hct: Hct): Hct {\n    if (DislikeAnalyzer.isDisliked(hct)) {\n      return Hct.from(\n          hct.hue,\n          hct.chroma,\n          70.0,\n      );\n    }\n\n    return hct;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Contrast} from '../contrast/contrast.js';\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {ContrastCurve} from './contrast_curve.js';\nimport {DynamicScheme} from './dynamic_scheme.js';\nimport {ToneDeltaPair} from './tone_delta_pair.js';\n\n/**\n * @param name The name of the dynamic color. Defaults to empty.\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme.\n * @param isBackground Whether this dynamic color is a background, with\n * some other color as the foreground. Defaults to false.\n * @param background The background of the dynamic color (as a function of a\n *     `DynamicScheme`), if it exists.\n * @param secondBackground A second background of the dynamic color (as a\n *     function of a `DynamicScheme`), if it\n * exists.\n * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n * against its background should behave in various contrast levels options.\n * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n * constraint between two colors. One of them must be the color being\n * constructed.\n */\ninterface FromPaletteOptions {\n  name?: string;\n  palette: (scheme: DynamicScheme) => TonalPalette;\n  tone: (scheme: DynamicScheme) => number;\n  isBackground?: boolean;\n  background?: (scheme: DynamicScheme) => DynamicColor;\n  secondBackground?: (scheme: DynamicScheme) => DynamicColor;\n  contrastCurve?: ContrastCurve;\n  toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<DynamicScheme, Hct>();\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n        args.name ?? '',\n        args.palette,\n        args.tone,\n        args.isBackground ?? false,\n        args.background,\n        args.secondBackground,\n        args.contrastCurve,\n        args.toneDeltaPair,\n    );\n  }\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param name The name of the dynamic color. Defaults to empty.\n   * @param palette Function that provides a TonalPalette given\n   * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n   * replaces the need to specify hue/chroma. By providing a tonal palette, when\n   * contrast adjustments are made, intended chroma can be preserved.\n   * @param tone Function that provides a tone, given a DynamicScheme.\n   * @param isBackground Whether this dynamic color is a background, with\n   * some other color as the foreground. Defaults to false.\n   * @param background The background of the dynamic color (as a function of a\n   *     `DynamicScheme`), if it exists.\n   * @param secondBackground A second background of the dynamic color (as a\n   *     function of a `DynamicScheme`), if it\n   * exists.\n   * @param contrastCurve A `ContrastCurve` object specifying how its contrast\n   * against its background should behave in various contrast levels options.\n   * @param toneDeltaPair A `ToneDeltaPair` object specifying a tone delta\n   * constraint between two colors. One of them must be the color being\n   * constructed.\n   */\n  constructor(\n      readonly name: string,\n      readonly palette: (scheme: DynamicScheme) => TonalPalette,\n      readonly tone: (scheme: DynamicScheme) => number,\n      readonly isBackground: boolean,\n      readonly background?: (scheme: DynamicScheme) => DynamicColor,\n      readonly secondBackground?: (scheme: DynamicScheme) => DynamicColor,\n      readonly contrastCurve?: ContrastCurve,\n      readonly toneDeltaPair?: (scheme: DynamicScheme) => ToneDeltaPair,\n  ) {\n    if ((!background) && secondBackground) {\n      throw new Error(\n          `Color ${name} has secondBackground` +\n          `defined, but background is not defined.`);\n    }\n    if ((!background) && contrastCurve) {\n      throw new Error(\n          `Color ${name} has contrastCurve` +\n          `defined, but background is not defined.`);\n    }\n    if (background && !contrastCurve) {\n      throw new Error(\n          `Color ${name} has background` +\n          `defined, but contrastCurve is not defined.`);\n    }\n  }\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: DynamicScheme): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: DynamicScheme): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const tone = this.getTone(scheme);\n    const answer = this.palette(scheme).getHct(tone);\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: DynamicScheme): number {\n    const decreasingContrast = scheme.contrastLevel < 0;\n\n    // Case 1: dual foreground, pair of colors with delta constraint.\n    if (this.toneDeltaPair) {\n      const toneDeltaPair = this.toneDeltaPair(scheme);\n      const roleA = toneDeltaPair.roleA;\n      const roleB = toneDeltaPair.roleB;\n      const delta = toneDeltaPair.delta;\n      const polarity = toneDeltaPair.polarity;\n      const stayTogether = toneDeltaPair.stayTogether;\n\n      const bg = this.background!(scheme);\n      const bgTone = bg.getTone(scheme);\n\n      const aIsNearer =\n          (polarity === 'nearer' ||\n           (polarity === 'lighter' && !scheme.isDark) ||\n           (polarity === 'darker' && scheme.isDark));\n      const nearer = aIsNearer ? roleA : roleB;\n      const farther = aIsNearer ? roleB : roleA;\n      const amNearer = this.name === nearer.name;\n      const expansionDir = scheme.isDark ? 1 : -1;\n\n      // 1st round: solve to min, each\n      const nContrast = nearer.contrastCurve!.get(scheme.contrastLevel);\n      const fContrast = farther.contrastCurve!.get(scheme.contrastLevel);\n\n      // If a color is good enough, it is not adjusted.\n      // Initial and adjusted tones for `nearer`\n      const nInitialTone = nearer.tone(scheme);\n      let nTone = Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast ?\n          nInitialTone :\n          DynamicColor.foregroundTone(bgTone, nContrast);\n      // Initial and adjusted tones for `farther`\n      const fInitialTone = farther.tone(scheme);\n      let fTone = Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast ?\n          fInitialTone :\n          DynamicColor.foregroundTone(bgTone, fContrast);\n\n      if (decreasingContrast) {\n        // If decreasing contrast, adjust color to the \"bare minimum\"\n        // that satisfies contrast.\n        nTone = DynamicColor.foregroundTone(bgTone, nContrast);\n        fTone = DynamicColor.foregroundTone(bgTone, fContrast);\n      }\n\n      if ((fTone - nTone) * expansionDir >= delta) {\n        // Good! Tones satisfy the constraint; no change needed.\n      } else {\n        // 2nd round: expand farther to match delta.\n        fTone = math.clampDouble(0, 100, nTone + delta * expansionDir);\n        if ((fTone - nTone) * expansionDir >= delta) {\n          // Good! Tones now satisfy the constraint; no change needed.\n        } else {\n          // 3rd round: contract nearer to match delta.\n          nTone = math.clampDouble(0, 100, fTone - delta * expansionDir);\n        }\n      }\n\n      // Avoids the 50-59 awkward zone.\n      if (50 <= nTone && nTone < 60) {\n        // If `nearer` is in the awkward zone, move it away, together with\n        // `farther`.\n        if (expansionDir > 0) {\n          nTone = 60;\n          fTone = Math.max(fTone, nTone + delta * expansionDir);\n        } else {\n          nTone = 49;\n          fTone = Math.min(fTone, nTone + delta * expansionDir);\n        }\n      } else if (50 <= fTone && fTone < 60) {\n        if (stayTogether) {\n          // Fixes both, to avoid two colors on opposite sides of the \"awkward\n          // zone\".\n          if (expansionDir > 0) {\n            nTone = 60;\n            fTone = Math.max(fTone, nTone + delta * expansionDir);\n          } else {\n            nTone = 49;\n            fTone = Math.min(fTone, nTone + delta * expansionDir);\n          }\n        } else {\n          // Not required to stay together; fixes just one.\n          if (expansionDir > 0) {\n            fTone = 60;\n          } else {\n            fTone = 49;\n          }\n        }\n      }\n\n      // Returns `nTone` if this color is `nearer`, otherwise `fTone`.\n      return amNearer ? nTone : fTone;\n    }\n\n    else {\n      // Case 2: No contrast pair; just solve for itself.\n      let answer = this.tone(scheme);\n\n      if (this.background == null) {\n        return answer;  // No adjustment for colors with no background.\n      }\n\n      const bgTone = this.background(scheme).getTone(scheme);\n\n      const desiredRatio = this.contrastCurve!.get(scheme.contrastLevel);\n\n      if (Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {\n        // Don't \"improve\" what's good enough.\n      } else {\n        // Rough improvement.\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (decreasingContrast) {\n        answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n      }\n\n      if (this.isBackground && 50 <= answer && answer < 60) {\n        // Must adjust\n        if (Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {\n          answer = 49;\n        } else {\n          answer = 60;\n        }\n      }\n\n      if (this.secondBackground) {\n        // Case 3: Adjust for dual backgrounds.\n\n        const [bg1, bg2] = [this.background, this.secondBackground];\n        const [bgTone1, bgTone2] =\n            [bg1(scheme).getTone(scheme), bg2(scheme).getTone(scheme)];\n        const [upper, lower] =\n            [Math.max(bgTone1, bgTone2), Math.min(bgTone1, bgTone2)];\n\n        if (Contrast.ratioOfTones(upper, answer) >= desiredRatio &&\n            Contrast.ratioOfTones(lower, answer) >= desiredRatio) {\n          return answer;\n        }\n\n        // The darkest light tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const lightOption = Contrast.lighter(upper, desiredRatio);\n\n        // The lightest dark tone that satisfies the desired ratio,\n        // or -1 if such ratio cannot be reached.\n        const darkOption = Contrast.darker(lower, desiredRatio);\n\n        // Tones suitable for the foreground.\n        const availables = [];\n        if (lightOption !== -1) availables.push(lightOption);\n        if (darkOption !== -1) availables.push(darkOption);\n\n        const prefersLight = DynamicColor.tonePrefersLightForeground(bgTone1) ||\n            DynamicColor.tonePrefersLightForeground(bgTone2);\n        if (prefersLight) {\n          return (lightOption < 0) ? 100 : lightOption;\n        }\n        if (availables.length === 1) {\n          return availables[0];\n        }\n        return (darkOption < 0) ? 0 : darkOption;\n      }\n\n      return answer;\n    }\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n          lighterRatio < ratio && darkerRatio < ratio;\n      return lighterRatio >= ratio || lighterRatio >= darkerRatio ||\n              negligibleDifference ?\n          lighterTone :\n          darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone :\n                                                                   lighterTone;\n    }\n  }\n\n  /**\n   * Returns whether [tone] prefers a light foreground.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   * Since `tertiaryContainer` in dark monochrome scheme requires a tone of\n   * 60, it should not be adjusted. Therefore, 60 is excluded here.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) < 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (DynamicColor.tonePrefersLightForeground(tone) &&\n        !DynamicColor.toneAllowsLightForeground(tone)) {\n      return 49.0;\n    }\n    return tone;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\n\n/**\n *  A convenience class for retrieving colors that are constant in hue and\n *  chroma, but vary in tone.\n */\nexport class TonalPalette {\n  private readonly cache = new Map<number, number>();\n\n  /**\n   * @param argb ARGB representation of a color\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromInt(argb: number): TonalPalette {\n    const hct = Hct.fromInt(argb);\n    return TonalPalette.fromHct(hct);\n  }\n\n  /**\n   * @param hct Hct\n   * @return Tones matching that color's hue and chroma.\n   */\n  static fromHct(hct: Hct) {\n    return new TonalPalette(hct.hue, hct.chroma, hct);\n  }\n\n  /**\n   * @param hue HCT hue\n   * @param chroma HCT chroma\n   * @return Tones matching hue and chroma.\n   */\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\n    const keyColor = new KeyColor(hue, chroma).create();\n    return new TonalPalette(hue, chroma, keyColor);\n  }\n\n  private constructor(readonly hue: number, readonly chroma: number, readonly keyColor: Hct) {}\n\n  /**\n   * @param tone HCT tone, measured from 0 to 100.\n   * @return ARGB representation of a color with that tone.\n   */\n  tone(tone: number): number {\n    let argb = this.cache.get(tone);\n    if (argb === undefined) {\n      argb = Hct.from(this.hue, this.chroma, tone).toInt();\n      this.cache.set(tone, argb);\n    }\n    return argb;\n  }\n\n  /**\n   * @param tone HCT tone.\n   * @return HCT representation of a color with that tone.\n   */\n  getHct(tone: number): Hct {\n    return Hct.fromInt(this.tone(tone));\n  }\n}\n\n/**\n * Key color is a color that represents the hue and chroma of a tonal palette\n */\nclass KeyColor {\n  // Cache that maps tone to max chroma to avoid duplicated HCT calculation.\n  private readonly chromaCache = new Map<number, number>();\n  private readonly maxChromaValue = 200.0;\n\n  constructor(readonly hue: number, readonly requestedChroma: number) {}\n\n  /**\n   * Creates a key color from a [hue] and a [chroma].\n   * The key color is the first tone, starting from T50, matching the given hue\n   * and chroma.\n   *\n   * @return Key color [Hct]\n   */\n  create(): Hct {\n    // Pivot around T50 because T50 has the most chroma available, on\n    // average. Thus it is most likely to have a direct answer.\n    const pivotTone = 50;\n    const toneStepSize = 1;\n    // Epsilon to accept values slightly higher than the requested chroma.\n    const epsilon = 0.01;\n\n    // Binary search to find the tone that can provide a chroma that is closest\n    // to the requested chroma.\n    let lowerTone = 0;\n    let upperTone = 100;\n    while (lowerTone < upperTone) {\n      const midTone = Math.floor((lowerTone + upperTone) / 2);\n      const isAscending =\n          this.maxChroma(midTone) < this.maxChroma(midTone + toneStepSize);\n      const sufficientChroma =\n          this.maxChroma(midTone) >= this.requestedChroma - epsilon;\n\n      if (sufficientChroma) {\n        // Either range [lowerTone, midTone] or [midTone, upperTone] has\n        // the answer, so search in the range that is closer the pivot tone.\n        if (Math.abs(lowerTone - pivotTone) < Math.abs(upperTone - pivotTone)) {\n          upperTone = midTone;\n        } else {\n          if (lowerTone === midTone) {\n            return Hct.from(this.hue, this.requestedChroma, lowerTone);\n          }\n          lowerTone = midTone;\n        }\n      } else {\n        // As there is no sufficient chroma in the midTone, follow the direction\n        // to the chroma peak.\n        if (isAscending) {\n          lowerTone = midTone + toneStepSize;\n        } else {\n          // Keep midTone for potential chroma peak.\n          upperTone = midTone;\n        }\n      }\n    }\n\n    return Hct.from(this.hue, this.requestedChroma, lowerTone);\n  }\n\n  // Find the maximum chroma for a given tone\n  private maxChroma(tone: number): number {\n    if (this.chromaCache.has(tone)) {\n      return this.chromaCache.get(tone)!;\n    }\n    const chroma = Hct.from(this.hue, this.maxChromaValue, tone).chroma;\n    this.chromaCache.set(tone, chroma);\n    return chroma;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as math from '../utils/math_utils.js';\n\n/**\n * A class containing a value that changes with the contrast level.\n *\n * Usually represents the contrast requirements for a dynamic color on its\n * background. The four values correspond to values for contrast levels -1.0,\n * 0.0, 0.5, and 1.0, respectively.\n */\nexport class ContrastCurve {\n  /**\n   * Creates a `ContrastCurve` object.\n   *\n   * @param low Value for contrast level -1.0\n   * @param normal Value for contrast level 0.0\n   * @param medium Value for contrast level 0.5\n   * @param high Value for contrast level 1.0\n   */\n  constructor(\n      readonly low: number,\n      readonly normal: number,\n      readonly medium: number,\n      readonly high: number,\n  ) {}\n\n  /**\n   * Returns the value at a given contrast level.\n   *\n   * @param contrastLevel The contrast level. 0.0 is the default (normal); -1.0\n   *     is the lowest; 1.0 is the highest.\n   * @return The value. For contrast ratios, a number between 1.0 and 21.0.\n   */\n  get(contrastLevel: number): number {\n    if (contrastLevel <= -1.0) {\n      return this.low;\n    } else if (contrastLevel < 0.0) {\n      return math.lerp(this.low, this.normal, (contrastLevel - (-1)) / 1);\n    } else if (contrastLevel < 0.5) {\n      return math.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);\n    } else if (contrastLevel < 1.0) {\n      return math.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);\n    } else {\n      return this.high;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DynamicColor} from './dynamic_color.js';\n\n/**\n * Describes the different in tone between colors.\n */\nexport type TonePolarity = 'darker'|'lighter'|'nearer'|'farther';\n\n/**\n * Documents a constraint between two DynamicColors, in which their tones must\n * have a certain distance from each other.\n *\n * Prefer a DynamicColor with a background, this is for special cases when\n * designers want tonal distance, literally contrast, between two colors that\n * don't have a background / foreground relationship or a contrast guarantee.\n */\nexport class ToneDeltaPair {\n  /**\n   * Documents a constraint in tone distance between two DynamicColors.\n   *\n   * The polarity is an adjective that describes \"A\", compared to \"B\".\n   *\n   * For instance, ToneDeltaPair(A, B, 15, 'darker', stayTogether) states that\n   * A's tone should be at least 15 darker than B's.\n   *\n   * 'nearer' and 'farther' describes closeness to the surface roles. For\n   * instance, ToneDeltaPair(A, B, 10, 'nearer', stayTogether) states that A\n   * should be 10 lighter than B in light mode, and 10 darker than B in dark\n   * mode.\n   *\n   * @param roleA The first role in a pair.\n   * @param roleB The second role in a pair.\n   * @param delta Required difference between tones. Absolute value, negative\n   * values have undefined behavior.\n   * @param polarity The relative relation between tones of roleA and roleB,\n   * as described above.\n   * @param stayTogether Whether these two roles should stay on the same side of\n   * the \"awkward zone\" (T50-59). This is necessary for certain cases where\n   * one role has two backgrounds.\n   */\n  constructor(\n      readonly roleA: DynamicColor,\n      readonly roleB: DynamicColor,\n      readonly delta: number,\n      readonly polarity: TonePolarity,\n      readonly stayTogether: boolean,\n  ) {}\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Set of themes supported by Dynamic Color.\n * Instantiate the corresponding subclass, ex. SchemeTonalSpot, to create\n * colors corresponding to the theme.\n */\nexport enum Variant {\n  MONOCHROME,\n  NEUTRAL,\n  TONAL_SPOT,\n  VIBRANT,\n  EXPRESSIVE,\n  FIDELITY,\n  CONTENT,\n  RAINBOW,\n  FRUIT_SALAD\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DislikeAnalyzer} from '../dislike/dislike_analyzer.js';\nimport {Hct} from '../hct/hct.js';\n\nimport {ContrastCurve} from './contrast_curve.js';\nimport {DynamicColor} from './dynamic_color.js';\nimport {DynamicScheme} from './dynamic_scheme.js';\nimport {ToneDeltaPair} from './tone_delta_pair.js';\nimport {Variant} from './variant.js';\n\nfunction isFidelity(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.FIDELITY ||\n      scheme.variant === Variant.CONTENT;\n}\n\nfunction isMonochrome(scheme: DynamicScheme): boolean {\n  return scheme.variant === Variant.MONOCHROME;\n}\n\nfunction findDesiredChromaByTone(\n    hue: number, chroma: number, tone: number,\n    byDecreasingTone: boolean): number {\n  let answer = tone;\n\n  let closestToChroma = Hct.from(hue, chroma, tone);\n  if (closestToChroma.chroma < chroma) {\n    let chromaPeak = closestToChroma.chroma;\n    while (closestToChroma.chroma < chroma) {\n      answer += byDecreasingTone ? -1.0 : 1.0;\n      const potentialSolution = Hct.from(hue, chroma, answer);\n      if (chromaPeak > potentialSolution.chroma) {\n        break;\n      }\n      if (Math.abs(potentialSolution.chroma - chroma) < 0.4) {\n        break;\n      }\n\n      const potentialDelta = Math.abs(potentialSolution.chroma - chroma);\n      const currentDelta = Math.abs(closestToChroma.chroma - chroma);\n      if (potentialDelta < currentDelta) {\n        closestToChroma = potentialSolution;\n      }\n      chromaPeak = Math.max(chromaPeak, potentialSolution.chroma);\n    }\n  }\n\n  return answer;\n}\n\n/**\n * DynamicColors for the colors in the Material Design system.\n */\n// Material Color Utilities namespaces the various utilities it provides.\n// tslint:disable-next-line:class-as-namespace\nexport class MaterialDynamicColors {\n  static contentAccentToneDelta = 15.0;\n  static highestSurface(s: DynamicScheme): DynamicColor {\n    return s.isDark ? MaterialDynamicColors.surfaceBright :\n                      MaterialDynamicColors.surfaceDim;\n  }\n\n  static primaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'primary_palette_key_color',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.primaryPalette.keyColor.tone,\n  });\n\n  static secondaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'secondary_palette_key_color',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.secondaryPalette.keyColor.tone,\n  });\n\n  static tertiaryPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'tertiary_palette_key_color',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => s.tertiaryPalette.keyColor.tone,\n  });\n\n  static neutralPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_palette_key_color',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.neutralPalette.keyColor.tone,\n  });\n\n  static neutralVariantPaletteKeyColor = DynamicColor.fromPalette({\n    name: 'neutral_variant_palette_key_color',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.neutralVariantPalette.keyColor.tone,\n  });\n\n  static background = DynamicColor.fromPalette({\n    name: 'background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static onBackground = DynamicColor.fromPalette({\n    name: 'on_background',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.background,\n    contrastCurve: new ContrastCurve(3, 3, 4.5, 7),\n  });\n\n  static surface = DynamicColor.fromPalette({\n    name: 'surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 6 : 98,\n    isBackground: true,\n  });\n\n  static surfaceDim = DynamicColor.fromPalette({\n    name: 'surface_dim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n        s.isDark ? 6 : new ContrastCurve(87, 87, 80, 75).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceBright = DynamicColor.fromPalette({\n    name: 'surface_bright',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n        s.isDark ? new ContrastCurve(24, 24, 29, 34).get(s.contrastLevel) : 98,\n    isBackground: true,\n  });\n\n  static surfaceContainerLowest = DynamicColor.fromPalette({\n    name: 'surface_container_lowest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) =>\n        s.isDark ? new ContrastCurve(4, 4, 2, 0).get(s.contrastLevel) : 100,\n    isBackground: true,\n  });\n\n  static surfaceContainerLow = DynamicColor.fromPalette({\n    name: 'surface_container_low',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n        new ContrastCurve(10, 10, 11, 12).get(s.contrastLevel) :\n        new ContrastCurve(96, 96, 96, 95).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainer = DynamicColor.fromPalette({\n    name: 'surface_container',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n        new ContrastCurve(12, 12, 16, 20).get(s.contrastLevel) :\n        new ContrastCurve(94, 94, 92, 90).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainerHigh = DynamicColor.fromPalette({\n    name: 'surface_container_high',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n        new ContrastCurve(17, 17, 21, 25).get(s.contrastLevel) :\n        new ContrastCurve(92, 92, 88, 85).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static surfaceContainerHighest = DynamicColor.fromPalette({\n    name: 'surface_container_highest',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ?\n        new ContrastCurve(22, 22, 26, 30).get(s.contrastLevel) :\n        new ContrastCurve(90, 90, 84, 80).get(s.contrastLevel),\n    isBackground: true,\n  });\n\n  static onSurface = DynamicColor.fromPalette({\n    name: 'on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 10,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static surfaceVariant = DynamicColor.fromPalette({\n    name: 'surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n  });\n\n  static onSurfaceVariant = DynamicColor.fromPalette({\n    name: 'on_surface_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 80 : 30,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static inverseSurface = DynamicColor.fromPalette({\n    name: 'inverse_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 90 : 20,\n  });\n\n  static inverseOnSurface = DynamicColor.fromPalette({\n    name: 'inverse_on_surface',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => s.isDark ? 20 : 95,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static outline = DynamicColor.fromPalette({\n    name: 'outline',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 60 : 50,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1.5, 3, 4.5, 7),\n  });\n\n  static outlineVariant = DynamicColor.fromPalette({\n    name: 'outline_variant',\n    palette: (s) => s.neutralVariantPalette,\n    tone: (s) => s.isDark ? 30 : 80,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n  });\n\n  static shadow = DynamicColor.fromPalette({\n    name: 'shadow',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static scrim = DynamicColor.fromPalette({\n    name: 'scrim',\n    palette: (s) => s.neutralPalette,\n    tone: (s) => 0,\n  });\n\n  static surfaceTint = DynamicColor.fromPalette({\n    name: 'surface_tint',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n  });\n\n  static primary = DynamicColor.fromPalette({\n    name: 'primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 100 : 0;\n          }\n          return s.isDark ? 80 : 40;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n        10, 'nearer', false),\n  });\n\n  static onPrimary = DynamicColor.fromPalette({\n    name: 'on_primary',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n          }\n          return s.isDark ? 20 : 100;\n        },\n    background: (s) => MaterialDynamicColors.primary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static primaryContainer = DynamicColor.fromPalette({\n    name: 'primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isFidelity(s)) {\n            return s.sourceColorHct.tone;\n          }\n          if (isMonochrome(s)) {\n            return s.isDark ? 85 : 25;\n          }\n          return s.isDark ? 30 : 90;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryContainer, MaterialDynamicColors.primary,\n        10, 'nearer', false),\n  });\n\n  static onPrimaryContainer = DynamicColor.fromPalette({\n    name: 'on_primary_container',\n    palette: (s) => s.primaryPalette,\n    tone:\n        (s) => {\n          if (isFidelity(s)) {\n            return DynamicColor.foregroundTone(\n                MaterialDynamicColors.primaryContainer.tone(s), 4.5);\n          }\n          if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n          }\n          return s.isDark ? 90 : 30;\n        },\n    background: (s) => MaterialDynamicColors.primaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static inversePrimary = DynamicColor.fromPalette({\n    name: 'inverse_primary',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => s.isDark ? 40 : 80,\n    background: (s) => MaterialDynamicColors.inverseSurface,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n  });\n\n  static secondary = DynamicColor.fromPalette({\n    name: 'secondary',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryContainer,\n        MaterialDynamicColors.secondary, 10, 'nearer', false),\n  });\n\n  static onSecondary = DynamicColor.fromPalette({\n    name: 'on_secondary',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 100;\n          } else {\n            return s.isDark ? 20 : 100;\n          }\n        },\n    background: (s) => MaterialDynamicColors.secondary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static secondaryContainer = DynamicColor.fromPalette({\n    name: 'secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          const initialTone = s.isDark ? 30 : 90;\n          if (isMonochrome(s)) {\n            return s.isDark ? 30 : 85;\n          }\n          if (!isFidelity(s)) {\n            return initialTone;\n          }\n          return findDesiredChromaByTone(\n              s.secondaryPalette.hue, s.secondaryPalette.chroma, initialTone,\n              s.isDark ? false : true);\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryContainer,\n        MaterialDynamicColors.secondary, 10, 'nearer', false),\n  });\n\n  static onSecondaryContainer = DynamicColor.fromPalette({\n    name: 'on_secondary_container',\n    palette: (s) => s.secondaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 90 : 10;\n          }\n          if (!isFidelity(s)) {\n            return s.isDark ? 90 : 30;\n          }\n          return DynamicColor.foregroundTone(\n              MaterialDynamicColors.secondaryContainer.tone(s), 4.5);\n        },\n    background: (s) => MaterialDynamicColors.secondaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static tertiary = DynamicColor.fromPalette({\n    name: 'tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 90 : 25;\n          }\n          return s.isDark ? 80 : 40;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n        10, 'nearer', false),\n  });\n\n  static onTertiary = DynamicColor.fromPalette({\n    name: 'on_tertiary',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 10 : 90;\n          }\n          return s.isDark ? 20 : 100;\n        },\n    background: (s) => MaterialDynamicColors.tertiary,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static tertiaryContainer = DynamicColor.fromPalette({\n    name: 'tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 60 : 49;\n          }\n          if (!isFidelity(s)) {\n            return s.isDark ? 30 : 90;\n          }\n          const proposedHct = s.tertiaryPalette.getHct(s.sourceColorHct.tone);\n          return DislikeAnalyzer.fixIfDisliked(proposedHct).tone;\n        },\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryContainer, MaterialDynamicColors.tertiary,\n        10, 'nearer', false),\n  });\n\n  static onTertiaryContainer = DynamicColor.fromPalette({\n    name: 'on_tertiary_container',\n    palette: (s) => s.tertiaryPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 0 : 100;\n          }\n          if (!isFidelity(s)) {\n            return s.isDark ? 90 : 30;\n          }\n          return DynamicColor.foregroundTone(\n              MaterialDynamicColors.tertiaryContainer.tone(s), 4.5);\n        },\n    background: (s) => MaterialDynamicColors.tertiaryContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static error = DynamicColor.fromPalette({\n    name: 'error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 80 : 40,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 7),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 10,\n        'nearer', false),\n  });\n\n  static onError = DynamicColor.fromPalette({\n    name: 'on_error',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 20 : 100,\n    background: (s) => MaterialDynamicColors.error,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static errorContainer = DynamicColor.fromPalette({\n    name: 'error_container',\n    palette: (s) => s.errorPalette,\n    tone: (s) => s.isDark ? 30 : 90,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.errorContainer, MaterialDynamicColors.error, 10,\n        'nearer', false),\n  });\n\n  static onErrorContainer = DynamicColor.fromPalette({\n    name: 'on_error_container',\n    palette: (s) => s.errorPalette,\n    tone:\n        (s) => {\n          if (isMonochrome(s)) {\n            return s.isDark ? 90 : 10;\n          }\n          return s.isDark ? 90 : 30;\n        },\n    background: (s) => MaterialDynamicColors.errorContainer,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static primaryFixed = DynamicColor.fromPalette({\n    name: 'primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryFixed,\n        MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static primaryFixedDim = DynamicColor.fromPalette({\n    name: 'primary_fixed_dim',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.primaryFixed,\n        MaterialDynamicColors.primaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onPrimaryFixed = DynamicColor.fromPalette({\n    name: 'on_primary_fixed',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onPrimaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_primary_fixed_variant',\n    palette: (s) => s.primaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.primaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.primaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static secondaryFixed = DynamicColor.fromPalette({\n    name: 'secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 80.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryFixed,\n        MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static secondaryFixedDim = DynamicColor.fromPalette({\n    name: 'secondary_fixed_dim',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 70.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.secondaryFixed,\n        MaterialDynamicColors.secondaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onSecondaryFixed = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => 10.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onSecondaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_secondary_fixed_variant',\n    palette: (s) => s.secondaryPalette,\n    tone: (s) => isMonochrome(s) ? 25.0 : 30.0,\n    background: (s) => MaterialDynamicColors.secondaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.secondaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n\n  static tertiaryFixed = DynamicColor.fromPalette({\n    name: 'tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 40.0 : 90.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryFixed,\n        MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static tertiaryFixedDim = DynamicColor.fromPalette({\n    name: 'tertiary_fixed_dim',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 30.0 : 80.0,\n    isBackground: true,\n    background: (s) => MaterialDynamicColors.highestSurface(s),\n    contrastCurve: new ContrastCurve(1, 1, 3, 4.5),\n    toneDeltaPair: (s) => new ToneDeltaPair(\n        MaterialDynamicColors.tertiaryFixed,\n        MaterialDynamicColors.tertiaryFixedDim, 10, 'lighter', true),\n  });\n\n  static onTertiaryFixed = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 100.0 : 10.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(4.5, 7, 11, 21),\n  });\n\n  static onTertiaryFixedVariant = DynamicColor.fromPalette({\n    name: 'on_tertiary_fixed_variant',\n    palette: (s) => s.tertiaryPalette,\n    tone: (s) => isMonochrome(s) ? 90.0 : 30.0,\n    background: (s) => MaterialDynamicColors.tertiaryFixedDim,\n    secondBackground: (s) => MaterialDynamicColors.tertiaryFixed,\n    contrastCurve: new ContrastCurve(3, 4.5, 7, 11),\n  });\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {DynamicColor} from './dynamic_color.js';\nimport {MaterialDynamicColors} from './material_dynamic_colors.js';\nimport {Variant} from './variant.js';\n\n/**\n * @param sourceColorArgb The source color of the theme as an ARGB 32-bit\n *     integer.\n * @param variant The variant, or style, of the theme.\n * @param contrastLevel Value from -1 to 1. -1 represents minimum contrast,\n * 0 represents standard (i.e. the design as spec'd), and 1 represents maximum\n * contrast.\n * @param isDark Whether the scheme is in dark mode or light mode.\n * @param primaryPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually\n * colorful.\n * @param secondaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * less colorful.\n * @param tertiaryPalette Given a tone, produces a color. Hue and chroma of\n * the color are specified in the design specification of the variant. Usually\n * a different hue from primary and colorful.\n * @param neutralPalette Given a tone, produces a color. Hue and chroma of the\n * color are specified in the design specification of the variant. Usually not\n * colorful at all, intended for background & surface colors.\n * @param neutralVariantPalette Given a tone, produces a color. Hue and chroma\n * of the color are specified in the design specification of the variant.\n * Usually not colorful, but slightly more colorful than Neutral. Intended for\n * backgrounds & surfaces.\n */\ninterface DynamicSchemeOptions {\n  sourceColorArgb: number;\n  variant: Variant;\n  contrastLevel: number;\n  isDark: boolean;\n  primaryPalette: TonalPalette;\n  secondaryPalette: TonalPalette;\n  tertiaryPalette: TonalPalette;\n  neutralPalette: TonalPalette;\n  neutralVariantPalette: TonalPalette;\n}\n\n/**\n * Constructed by a set of values representing the current UI state (such as\n * whether or not its dark theme, what the theme style is, etc.), and\n * provides a set of TonalPalettes that can create colors that fit in\n * with the theme style. Used by DynamicColor to resolve into a color.\n */\nexport class DynamicScheme {\n  /**\n   * The source color of the theme as an HCT color.\n   */\n  sourceColorHct: Hct;\n  /**\n   * Given a tone, produces a reddish, colorful, color.\n   */\n  errorPalette: TonalPalette;\n\n  /** The source color of the theme as an ARGB 32-bit integer. */\n  readonly sourceColorArgb: number;\n\n  /** The variant, or style, of the theme. */\n  readonly variant: Variant;\n\n  /**\n   * Value from -1 to 1. -1 represents minimum contrast. 0 represents standard\n   * (i.e. the design as spec'd), and 1 represents maximum contrast.\n   */\n  readonly contrastLevel: number;\n\n  /** Whether the scheme is in dark mode or light mode. */\n  readonly isDark: boolean;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually\n   * colorful.\n   */\n  readonly primaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * less colorful.\n   */\n  readonly secondaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of\n   * the color are specified in the design specification of the variant. Usually\n   * a different hue from primary and colorful.\n   */\n  readonly tertiaryPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma of the\n   * color are specified in the design specification of the variant. Usually not\n   * colorful at all, intended for background & surface colors.\n   */\n  readonly neutralPalette: TonalPalette;\n\n  /**\n   * Given a tone, produces a color. Hue and chroma\n   * of the color are specified in the design specification of the variant.\n   * Usually not colorful, but slightly more colorful than Neutral. Intended for\n   * backgrounds & surfaces.\n   */\n  readonly neutralVariantPalette: TonalPalette;\n\n  constructor(args: DynamicSchemeOptions) {\n    this.sourceColorArgb = args.sourceColorArgb;\n    this.variant = args.variant;\n    this.contrastLevel = args.contrastLevel;\n    this.isDark = args.isDark;\n    this.sourceColorHct = Hct.fromInt(args.sourceColorArgb);\n    this.primaryPalette = args.primaryPalette;\n    this.secondaryPalette = args.secondaryPalette;\n    this.tertiaryPalette = args.tertiaryPalette;\n    this.neutralPalette = args.neutralPalette;\n    this.neutralVariantPalette = args.neutralVariantPalette;\n    this.errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);\n  }\n\n  /**\n   * Support design spec'ing Dynamic Color by schemes that specify hue\n   * rotations that should be applied at certain breakpoints.\n   * @param sourceColor the source color of the theme, in HCT.\n   * @param hues The \"breakpoints\", i.e. the hues at which a rotation should\n   * be apply.\n   * @param rotations The rotation that should be applied when source color's\n   * hue is >= the same index in hues array, and <= the hue at the next index\n   * in hues array.\n   */\n  static getRotatedHue(sourceColor: Hct, hues: number[], rotations: number[]):\n      number {\n    const sourceHue = sourceColor.hue;\n    if (hues.length !== rotations.length) {\n      throw new Error(`mismatch between hue length ${hues.length} & rotations ${\n          rotations.length}`);\n    }\n    if (rotations.length === 1) {\n      return math.sanitizeDegreesDouble(sourceColor.hue + rotations[0]);\n    }\n    const size = hues.length;\n    for (let i = 0; i <= size - 2; i++) {\n      const thisHue = hues[i];\n      const nextHue = hues[i + 1];\n      if (thisHue < sourceHue && sourceHue < nextHue) {\n        return math.sanitizeDegreesDouble(sourceHue + rotations[i]);\n      }\n    }\n    // If this statement executes, something is wrong, there should have been a\n    // rotation found using the arrays.\n    return sourceHue;\n  }\n\n\n  getArgb(dynamicColor: DynamicColor): number {\n    return dynamicColor.getArgb(this);\n  }\n\n  getHct(dynamicColor: DynamicColor): Hct {\n    return dynamicColor.getHct(this);\n  }\n\n  get primaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.primaryPaletteKeyColor);\n  }\n\n  get secondaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryPaletteKeyColor);\n  }\n\n  get tertiaryPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryPaletteKeyColor);\n  }\n\n  get neutralPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralPaletteKeyColor);\n  }\n\n  get neutralVariantPaletteKeyColor(): number {\n    return this.getArgb(MaterialDynamicColors.neutralVariantPaletteKeyColor);\n  }\n\n  get background(): number {\n    return this.getArgb(MaterialDynamicColors.background);\n  }\n\n  get onBackground(): number {\n    return this.getArgb(MaterialDynamicColors.onBackground);\n  }\n\n  get surface(): number {\n    return this.getArgb(MaterialDynamicColors.surface);\n  }\n\n  get surfaceDim(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceDim);\n  }\n\n  get surfaceBright(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceBright);\n  }\n\n  get surfaceContainerLowest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLowest);\n  }\n\n  get surfaceContainerLow(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerLow);\n  }\n\n  get surfaceContainer(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainer);\n  }\n\n  get surfaceContainerHigh(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHigh);\n  }\n\n  get surfaceContainerHighest(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceContainerHighest);\n  }\n\n  get onSurface(): number {\n    return this.getArgb(MaterialDynamicColors.onSurface);\n  }\n\n  get surfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceVariant);\n  }\n\n  get onSurfaceVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSurfaceVariant);\n  }\n\n  get inverseSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseSurface);\n  }\n\n  get inverseOnSurface(): number {\n    return this.getArgb(MaterialDynamicColors.inverseOnSurface);\n  }\n\n  get outline(): number {\n    return this.getArgb(MaterialDynamicColors.outline);\n  }\n\n  get outlineVariant(): number {\n    return this.getArgb(MaterialDynamicColors.outlineVariant);\n  }\n\n  get shadow(): number {\n    return this.getArgb(MaterialDynamicColors.shadow);\n  }\n\n  get scrim(): number {\n    return this.getArgb(MaterialDynamicColors.scrim);\n  }\n\n  get surfaceTint(): number {\n    return this.getArgb(MaterialDynamicColors.surfaceTint);\n  }\n\n  get primary(): number {\n    return this.getArgb(MaterialDynamicColors.primary);\n  }\n\n  get onPrimary(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimary);\n  }\n\n  get primaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.primaryContainer);\n  }\n\n  get onPrimaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryContainer);\n  }\n\n  get inversePrimary(): number {\n    return this.getArgb(MaterialDynamicColors.inversePrimary);\n  }\n\n  get secondary(): number {\n    return this.getArgb(MaterialDynamicColors.secondary);\n  }\n\n  get onSecondary(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondary);\n  }\n\n  get secondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryContainer);\n  }\n\n  get onSecondaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryContainer);\n  }\n\n  get tertiary(): number {\n    return this.getArgb(MaterialDynamicColors.tertiary);\n  }\n\n  get onTertiary(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiary);\n  }\n\n  get tertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryContainer);\n  }\n\n  get onTertiaryContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryContainer);\n  }\n\n  get error(): number {\n    return this.getArgb(MaterialDynamicColors.error);\n  }\n\n  get onError(): number {\n    return this.getArgb(MaterialDynamicColors.onError);\n  }\n\n  get errorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.errorContainer);\n  }\n\n  get onErrorContainer(): number {\n    return this.getArgb(MaterialDynamicColors.onErrorContainer);\n  }\n\n  get primaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixed);\n  }\n\n  get primaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.primaryFixedDim);\n  }\n\n  get onPrimaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixed);\n  }\n\n  get onPrimaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onPrimaryFixedVariant);\n  }\n\n  get secondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixed);\n  }\n\n  get secondaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.secondaryFixedDim);\n  }\n\n  get onSecondaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixed);\n  }\n\n  get onSecondaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onSecondaryFixedVariant);\n  }\n\n  get tertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixed);\n  }\n\n  get tertiaryFixedDim(): number {\n    return this.getArgb(MaterialDynamicColors.tertiaryFixedDim);\n  }\n\n  get onTertiaryFixed(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixed);\n  }\n\n  get onTertiaryFixedVariant(): number {\n    return this.getArgb(MaterialDynamicColors.onTertiaryFixedVariant);\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This file is automatically generated. Do not modify it.\n\nimport {Hct} from '../hct/hct.js';\nimport * as colorUtils from '../utils/color_utils.js';\nimport * as mathUtils from '../utils/math_utils.js';\n\n/**\n * Design utilities using color temperature theory.\n *\n * Analogous colors, complementary color, and cache to efficiently, lazily,\n * generate data for calculations when needed.\n */\nexport class TemperatureCache {\n  constructor(public input: Hct) {}\n\n  hctsByTempCache: Hct[] = [];\n  hctsByHueCache: Hct[] = [];\n  tempsByHctCache = new Map<Hct, number>();\n  inputRelativeTemperatureCache: number = -1.0;\n  complementCache: Hct|null = null;\n\n  get hctsByTemp(): Hct[] {\n    if (this.hctsByTempCache.length > 0) {\n      return this.hctsByTempCache;\n    }\n\n    const hcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = this.tempsByHct;\n    hcts.sort((a, b) => temperaturesByHct.get(a)! - temperaturesByHct.get(b)!);\n    this.hctsByTempCache = hcts;\n    return hcts;\n  }\n\n  get warmest(): Hct {\n    return this.hctsByTemp[this.hctsByTemp.length - 1];\n  }\n\n  get coldest(): Hct {\n    return this.hctsByTemp[0];\n  }\n\n  /**\n   * A set of colors with differing hues, equidistant in temperature.\n   *\n   * In art, this is usually described as a set of 5 colors on a color wheel\n   * divided into 12 sections. This method allows provision of either of those\n   * values.\n   *\n   * Behavior is undefined when [count] or [divisions] is 0.\n   * When divisions < count, colors repeat.\n   *\n   * [count] The number of colors to return, includes the input color.\n   * [divisions] The number of divisions on the color wheel.\n   */\n  analogous(count = 5, divisions = 12): Hct[] {\n    const startHue = Math.round(this.input.hue);\n    const startHct = this.hctsByHue[startHue];\n    let lastTemp = this.relativeTemperature(startHct);\n    const allColors = [startHct];\n\n    let absoluteTotalTempDelta = 0.0;\n    for (let i = 0; i < 360; i++) {\n      const hue = mathUtils.sanitizeDegreesInt(startHue + i);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      lastTemp = temp;\n      absoluteTotalTempDelta += tempDelta;\n    }\n    let hueAddend = 1;\n    const tempStep = absoluteTotalTempDelta / divisions;\n    let totalTempDelta = 0.0;\n    lastTemp = this.relativeTemperature(startHct);\n    while (allColors.length < divisions) {\n      const hue = mathUtils.sanitizeDegreesInt(startHue + hueAddend);\n      const hct = this.hctsByHue[hue];\n      const temp = this.relativeTemperature(hct);\n      const tempDelta = Math.abs(temp - lastTemp);\n      totalTempDelta += tempDelta;\n\n      const desiredTotalTempDeltaForIndex = allColors.length * tempStep;\n      let indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n      let indexAddend = 1;\n      // Keep adding this hue to the answers until its temperature is\n      // insufficient. This ensures consistent behavior when there aren't\n      // [divisions] discrete steps between 0 and 360 in hue with [tempStep]\n      // delta in temperature between them.\n      //\n      // For example, white and black have no analogues: there are no other\n      // colors at T100/T0. Therefore, they should just be added to the array\n      // as answers.\n      while (indexSatisfied && allColors.length < divisions) {\n        allColors.push(hct);\n        const desiredTotalTempDeltaForIndex =\n            ((allColors.length + indexAddend) * tempStep);\n        indexSatisfied = totalTempDelta >= desiredTotalTempDeltaForIndex;\n        indexAddend++;\n      }\n      lastTemp = temp;\n      hueAddend++;\n      if (hueAddend > 360) {\n        while (allColors.length < divisions) {\n          allColors.push(hct);\n        }\n        break;\n      }\n    }\n\n    const answers = [this.input];\n\n    // First, generate analogues from rotating counter-clockwise.\n    const increaseHueCount = Math.floor((count - 1) / 2.0);\n    for (let i = 1; i < (increaseHueCount + 1); i++) {\n      let index = 0 - i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.splice(0, 0, allColors[index]);\n    }\n\n    // Second, generate analogues from rotating clockwise.\n    const decreaseHueCount = count - increaseHueCount - 1;\n    for (let i = 1; i < (decreaseHueCount + 1); i++) {\n      let index = i;\n      while (index < 0) {\n        index = allColors.length + index;\n      }\n      if (index >= allColors.length) {\n        index = index % allColors.length;\n      }\n      answers.push(allColors[index]);\n    }\n\n    return answers;\n  }\n\n  /**\n   * A color that complements the input color aesthetically.\n   *\n   * In art, this is usually described as being across the color wheel.\n   * History of this shows intent as a color that is just as cool-warm as the\n   * input color is warm-cool.\n   */\n  get complement(): Hct {\n    if (this.complementCache != null) {\n      return this.complementCache;\n    }\n\n    const coldestHue = this.coldest.hue;\n    const coldestTemp = this.tempsByHct.get(this.coldest)!;\n\n    const warmestHue = this.warmest.hue;\n    const warmestTemp = this.tempsByHct.get(this.warmest)!;\n    const range = warmestTemp - coldestTemp;\n    const startHueIsColdestToWarmest =\n        TemperatureCache.isBetween(this.input.hue, coldestHue, warmestHue);\n    const startHue = startHueIsColdestToWarmest ? warmestHue : coldestHue;\n    const endHue = startHueIsColdestToWarmest ? coldestHue : warmestHue;\n    const directionOfRotation = 1.0;\n    let smallestError = 1000.0;\n    let answer = this.hctsByHue[Math.round(this.input.hue)];\n\n    const complementRelativeTemp = 1.0 - this.inputRelativeTemperature;\n    // Find the color in the other section, closest to the inverse percentile\n    // of the input color. This is the complement.\n    for (let hueAddend = 0.0; hueAddend <= 360.0; hueAddend += 1.0) {\n      const hue = mathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);\n      if (!TemperatureCache.isBetween(hue, startHue, endHue)) {\n        continue;\n      }\n      const possibleAnswer = this.hctsByHue[Math.round(hue)];\n      const relativeTemp =\n          (this.tempsByHct.get(possibleAnswer)! - coldestTemp) / range;\n      const error = Math.abs(complementRelativeTemp - relativeTemp);\n      if (error < smallestError) {\n        smallestError = error;\n        answer = possibleAnswer;\n      }\n    }\n    this.complementCache = answer;\n    return this.complementCache;\n  }\n\n  /**\n   * Temperature relative to all colors with the same chroma and tone.\n   * Value on a scale from 0 to 1.\n   */\n  relativeTemperature(hct: Hct): number {\n    const range =\n        this.tempsByHct.get(this.warmest)! - this.tempsByHct.get(this.coldest)!;\n    const differenceFromColdest =\n        this.tempsByHct.get(hct)! - this.tempsByHct.get(this.coldest)!;\n    // Handle when there's no difference in temperature between warmest and\n    // coldest: for example, at T100, only one color is available, white.\n    if (range === 0.0) {\n      return 0.5;\n    }\n    return differenceFromColdest / range;\n  }\n\n  /** Relative temperature of the input color. See [relativeTemperature]. */\n  get inputRelativeTemperature(): number {\n    if (this.inputRelativeTemperatureCache >= 0.0) {\n      return this.inputRelativeTemperatureCache;\n    }\n\n    this.inputRelativeTemperatureCache = this.relativeTemperature(this.input);\n    return this.inputRelativeTemperatureCache;\n  }\n\n  /** A Map with keys of HCTs in [hctsByTemp], values of raw temperature. */\n  get tempsByHct(): Map<Hct, number> {\n    if (this.tempsByHctCache.size > 0) {\n      return this.tempsByHctCache;\n    }\n    const allHcts = this.hctsByHue.concat([this.input]);\n    const temperaturesByHct = new Map<Hct, number>();\n    for (const e of allHcts) {\n      temperaturesByHct.set(e, TemperatureCache.rawTemperature(e));\n    }\n    this.tempsByHctCache = temperaturesByHct;\n    return temperaturesByHct;\n  }\n\n  /**\n   * HCTs for all hues, with the same chroma/tone as the input.\n   * Sorted ascending, hue 0 to 360.\n   */\n  get hctsByHue(): Hct[] {\n    if (this.hctsByHueCache.length > 0) {\n      return this.hctsByHueCache;\n    }\n    const hcts: Hct[] = [];\n    for (let hue = 0.0; hue <= 360.0; hue += 1.0) {\n      const colorAtHue = Hct.from(hue, this.input.chroma, this.input.tone);\n      hcts.push(colorAtHue);\n    }\n    this.hctsByHueCache = hcts;\n    return this.hctsByHueCache;\n  }\n\n  /** Determines if an angle is between two other angles, rotating clockwise. */\n  static isBetween(angle: number, a: number, b: number): boolean {\n    if (a < b) {\n      return a <= angle && angle <= b;\n    }\n    return a <= angle || angle <= b;\n  }\n\n  /**\n   * Value representing cool-warm factor of a color.\n   * Values below 0 are considered cool, above, warm.\n   *\n   * Color science has researched emotion and harmony, which art uses to select\n   * colors. Warm-cool is the foundation of analogous and complementary colors.\n   * See:\n   * - Li-Chen Ou's Chapter 19 in Handbook of Color Psychology (2015).\n   * - Josef Albers' Interaction of Color chapters 19 and 21.\n   *\n   * Implementation of Ou, Woodcock and Wright's algorithm, which uses\n   * L*a*b* / LCH color space.\n   * Return value has these properties:\n   * - Values below 0 are cool, above 0 are warm.\n   * - Lower bound: -0.52 - (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, -9.66.\n   * - Upper bound: -0.52 + (chroma ^ 1.07 / 20). L*a*b* chroma is infinite.\n   *   Assuming max of 130 chroma, 8.61.\n   */\n  static rawTemperature(color: Hct): number {\n    const lab = colorUtils.labFromArgb(color.toInt());\n    const hue = mathUtils.sanitizeDegreesDouble(\n        Math.atan2(lab[2], lab[1]) * 180.0 / Math.PI);\n    const chroma = Math.sqrt((lab[1] * lab[1]) + (lab[2] * lab[2]));\n    const temperature = -0.5 +\n        0.02 * Math.pow(chroma, 1.07) *\n            Math.cos(\n                mathUtils.sanitizeDegreesDouble(hue - 50.0) * Math.PI / 180.0,\n            );\n    return temperature;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DynamicScheme} from '../dynamiccolor/dynamic_scheme.js';\nimport {Variant} from '../dynamiccolor/variant.js';\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * A Dynamic Color theme that is intentionally detached from the source color.\n */\nexport class SchemeExpressive extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues: number[] = [\n    0.0,\n    21.0,\n    51.0,\n    121.0,\n    151.0,\n    191.0,\n    271.0,\n    321.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations: number[] = [\n    45.0,\n    95.0,\n    45.0,\n    20.0,\n    45.0,\n    90.0,\n    45.0,\n    45.0,\n    45.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations: number[] = [\n    120.0,\n    120.0,\n    20.0,\n    45.0,\n    20.0,\n    15.0,\n    20.0,\n    120.0,\n    120.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorArgb: sourceColorHct.toInt(),\n      variant: Variant.EXPRESSIVE,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(\n          math.sanitizeDegreesDouble(sourceColorHct.hue + 240.0), 40.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeExpressive.hues,\n              SchemeExpressive.secondaryRotations),\n          24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeExpressive.hues,\n              SchemeExpressive.tertiaryRotations),\n          32.0),\n      neutralPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 8.0),\n      neutralVariantPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue + 15, 12.0),\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DynamicScheme} from '../dynamiccolor/dynamic_scheme.js';\nimport {Variant} from '../dynamiccolor/variant.js';\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\n\n/**\n * A Dynamic Color theme that maxes out colorfulness at each position in the\n * Primary Tonal Palette.\n */\nexport class SchemeVibrant extends DynamicScheme {\n  /**\n   * Hues (in degrees) used at breakpoints such that designers can specify a\n   * hue rotation that occurs at a given break point.\n   */\n  private static readonly hues = [\n    0.0,\n    41.0,\n    61.0,\n    101.0,\n    131.0,\n    181.0,\n    251.0,\n    301.0,\n    360.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Secondary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly secondaryRotations = [\n    18.0,\n    15.0,\n    10.0,\n    12.0,\n    15.0,\n    18.0,\n    15.0,\n    12.0,\n    12.0,\n  ];\n\n  /**\n   * Hue rotations (in degrees) of the Tertiary [TonalPalette],\n   * corresponding to the breakpoints in [hues].\n   */\n  private static readonly tertiaryRotations = [\n    35.0,\n    30.0,\n    20.0,\n    25.0,\n    30.0,\n    35.0,\n    30.0,\n    25.0,\n    25.0,\n  ];\n\n  constructor(sourceColorHct: Hct, isDark: boolean, contrastLevel: number) {\n    super({\n      sourceColorArgb: sourceColorHct.toInt(),\n      variant: Variant.VIBRANT,\n      contrastLevel,\n      isDark,\n      primaryPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 200.0),\n      secondaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeVibrant.hues,\n              SchemeVibrant.secondaryRotations),\n          24.0),\n      tertiaryPalette: TonalPalette.fromHueAndChroma(\n          DynamicScheme.getRotatedHue(\n              sourceColorHct, SchemeVibrant.hues,\n              SchemeVibrant.tertiaryRotations),\n          32.0),\n      neutralPalette: TonalPalette.fromHueAndChroma(sourceColorHct.hue, 10.0),\n      neutralVariantPalette:\n          TonalPalette.fromHueAndChroma(sourceColorHct.hue, 12.0),\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Hct} from '../hct/hct.js';\nimport * as math from '../utils/math_utils.js';\n\n/**\n * Default options for ranking colors based on usage counts.\n * desired: is the max count of the colors returned.\n * fallbackColorARGB: Is the default color that should be used if no\n *                    other colors are suitable.\n * filter: controls if the resulting colors should be filtered to not include\n *         hues that are not used often enough, and colors that are effectively\n *         grayscale.\n */\ndeclare interface ScoreOptions {\n  desired?: number;\n  fallbackColorARGB?: number;\n  filter?: boolean;\n}\n\nconst SCORE_OPTION_DEFAULTS = {\n  desired: 4,  // 4 colors matches what Android wallpaper picker.\n  fallbackColorARGB: 0xff4285f4,  // Google Blue.\n  filter: true,  // Avoid unsuitable colors.\n};\n\nfunction compare(a: {hct: Hct, score: number}, b: {hct: Hct, score: number}): number {\n  if (a.score > b.score) {\n    return -1;\n  } else if (a.score < b.score) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n *  Given a large set of colors, remove colors that are unsuitable for a UI\n *  theme, and rank the rest based on suitability.\n *\n *  Enables use of a high cluster count for image quantization, thus ensuring\n *  colors aren't muddied, while curating the high cluster count to a much\n *  smaller number of appropriate choices.\n */\nexport class Score {\n  private static readonly TARGET_CHROMA = 48.0;  // A1 Chroma\n  private static readonly WEIGHT_PROPORTION = 0.7;\n  private static readonly WEIGHT_CHROMA_ABOVE = 0.3;\n  private static readonly WEIGHT_CHROMA_BELOW = 0.1;\n  private static readonly CUTOFF_CHROMA = 5.0;\n  private static readonly CUTOFF_EXCITED_PROPORTION = 0.01;\n\n  private constructor() {}\n\n  /**\n   * Given a map with keys of colors and values of how often the color appears,\n   * rank the colors based on suitability for being used for a UI theme.\n   *\n   * @param colorsToPopulation map with keys of colors and values of how often\n   *     the color appears, usually from a source image.\n   * @param {ScoreOptions} options optional parameters.\n   * @return Colors sorted by suitability for a UI theme. The most suitable\n   *     color is the first item, the least suitable is the last. There will\n   *     always be at least one color returned. If all the input colors\n   *     were not suitable for a theme, a default fallback color will be\n   *     provided, Google Blue.\n   */\n  static score(\n    colorsToPopulation: Map<number, number>, options?: ScoreOptions):\n      number[] {\n    const {desired, fallbackColorARGB, filter} = {...SCORE_OPTION_DEFAULTS, ...options};\n    // Get the HCT color for each Argb value, while finding the per hue count and\n    // total count.\n    const colorsHct: Hct[] = [];\n    const huePopulation = new Array<number>(360).fill(0);\n    let populationSum = 0;\n    for (const [argb, population] of colorsToPopulation.entries()) {\n      const hct = Hct.fromInt(argb);\n      colorsHct.push(hct);\n      const hue = Math.floor(hct.hue);\n      huePopulation[hue] += population;\n      populationSum += population;\n    }\n\n    // Hues with more usage in neighboring 30 degree slice get a larger number.\n    const hueExcitedProportions = new Array<number>(360).fill(0.0);\n    for (let hue = 0; hue < 360; hue++) {\n      const proportion = huePopulation[hue] / populationSum;\n      for (let i = hue - 14; i < hue + 16; i++) {\n        const neighborHue = math.sanitizeDegreesInt(i);\n        hueExcitedProportions[neighborHue] += proportion;\n      }\n    }\n\n    // Scores each HCT color based on usage and chroma, while optionally\n    // filtering out values that do not have enough chroma or usage.\n    const scoredHct = new Array<{hct: Hct, score: number}>();\n    for (const hct of colorsHct) {\n      const hue = math.sanitizeDegreesInt(Math.round(hct.hue));\n      const proportion = hueExcitedProportions[hue];\n      if (filter && (hct.chroma < Score.CUTOFF_CHROMA || proportion <= Score.CUTOFF_EXCITED_PROPORTION)) {\n        continue;\n      }\n\n      const proportionScore = proportion * 100.0 * Score.WEIGHT_PROPORTION;\n      const chromaWeight = hct.chroma < Score.TARGET_CHROMA ? Score.WEIGHT_CHROMA_BELOW : Score.WEIGHT_CHROMA_ABOVE;\n      const chromaScore = (hct.chroma - Score.TARGET_CHROMA) * chromaWeight;\n      const score = proportionScore + chromaScore;\n      scoredHct.push({hct, score});\n    }\n    // Sorted so that colors with higher scores come first.\n    scoredHct.sort(compare);\n\n    // Iterates through potential hue differences in degrees in order to select\n    // the colors with the largest distribution of hues possible. Starting at\n    // 90 degrees(maximum difference for 4 colors) then decreasing down to a\n    // 15 degree minimum.\n    const chosenColors: Hct[] = [];\n    for (let differenceDegrees = 90; differenceDegrees >= 15; differenceDegrees--) {\n      chosenColors.length = 0;\n      for (const {hct} of scoredHct) {\n        const duplicateHue = chosenColors.find(chosenHct => {\n          return math.differenceDegrees(hct.hue, chosenHct.hue) < differenceDegrees;\n        });\n        if (!duplicateHue) {\n          chosenColors.push(hct);\n        }\n        if (chosenColors.length >= desired) break;\n      }\n      if (chosenColors.length >= desired) break;\n    }\n    const colors: number[] = [];\n    if (chosenColors.length === 0) {\n      colors.push(fallbackColorARGB);\n    }\n    for (const chosenHct of chosenColors) {\n      colors.push(chosenHct.toInt());\n    }\n    return colors;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as colorUtils from './color_utils.js';\n\n/**\n * Utility methods for hexadecimal representations of colors.\n */\n\n/**\n * @param argb ARGB representation of a color.\n * @return Hex string representing color, ex. #ff0000 for red.\n */\nexport function hexFromArgb(argb: number) {\n  const r = colorUtils.redFromArgb(argb);\n  const g = colorUtils.greenFromArgb(argb);\n  const b = colorUtils.blueFromArgb(argb);\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\n\n  // Pad single-digit output values\n  for (const [i, part] of outParts.entries()) {\n    if (part.length === 1) {\n      outParts[i] = '0' + part;\n    }\n  }\n\n  return '#' + outParts.join('');\n}\n\n/**\n * @param hex String representing color as hex code. Accepts strings with or\n *     without leading #, and string representing the color using 3, 6, or 8\n *     hex characters.\n * @return ARGB representation of color.\n */\nexport function argbFromHex(hex: string) {\n  hex = hex.replace('#', '');\n  const isThree = hex.length === 3;\n  const isSix = hex.length === 6;\n  const isEight = hex.length === 8;\n  if (!isThree && !isSix && !isEight) {\n    throw new Error('unexpected hex ' + hex);\n  }\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (isThree) {\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\n  } else if (isSix) {\n    r = parseIntHex(hex.slice(0, 2));\n    g = parseIntHex(hex.slice(2, 4));\n    b = parseIntHex(hex.slice(4, 6));\n  } else if (isEight) {\n    r = parseIntHex(hex.slice(2, 4));\n    g = parseIntHex(hex.slice(4, 6));\n    b = parseIntHex(hex.slice(6, 8));\n  }\n\n  return (\n      ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\n      0);\n}\n\nfunction parseIntHex(value: string) {\n  // tslint:disable-next-line:ban\n  return parseInt(value, 16);\n}\n"],
  "mappings": "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",
  "names": ["delinearized", "delinearized", "Variant", "desiredTotalTempDeltaForIndex", "differenceDegrees"]
}
