/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var MatTestDialogOpener_1;
import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, NgModule, ViewEncapsulation, } from '@angular/core';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
/** Test component that immediately opens a dialog when bootstrapped. */
export let MatTestDialogOpener = class MatTestDialogOpener {
    static { MatTestDialogOpener_1 = this; }
    /** Static method that prepares this class to open the provided component. */
    static withComponent(component, config) {
        MatTestDialogOpener_1.component = component;
        MatTestDialogOpener_1.config = config;
        return MatTestDialogOpener_1;
    }
    constructor(dialog) {
        this.dialog = dialog;
        if (!MatTestDialogOpener_1.component) {
            throw new Error(`MatTestDialogOpener does not have a component provided.`);
        }
        this.dialogRef = this.dialog.open(MatTestDialogOpener_1.component, MatTestDialogOpener_1.config || {});
        this._afterClosedSubscription = this.dialogRef.afterClosed().subscribe(result => {
            this.closedResult = result;
        });
    }
    ngOnDestroy() {
        this._afterClosedSubscription.unsubscribe();
        MatTestDialogOpener_1.component = undefined;
        MatTestDialogOpener_1.config = undefined;
    }
};
MatTestDialogOpener = MatTestDialogOpener_1 = __decorate([
    Component({
        selector: 'mat-test-dialog-opener',
        template: '',
        changeDetection: ChangeDetectionStrategy.OnPush,
        encapsulation: ViewEncapsulation.None,
    }),
    __metadata("design:paramtypes", [MatDialog])
], MatTestDialogOpener);
export let MatTestDialogOpenerModule = class MatTestDialogOpenerModule {
};
MatTestDialogOpenerModule = __decorate([
    NgModule({
        declarations: [MatTestDialogOpener],
        imports: [MatDialogModule, NoopAnimationsModule],
    })
], MatTestDialogOpenerModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLW9wZW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYXRlcmlhbC9kaWFsb2cvdGVzdGluZy9kaWFsb2ctb3BlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7O0FBR0gsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsUUFBUSxFQUVSLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFtQixlQUFlLEVBQWUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUcxRSx3RUFBd0U7QUFPakUsV0FBTSxtQkFBbUIsR0FBekIsTUFBTSxtQkFBbUI7O0lBZTlCLDZFQUE2RTtJQUM3RSxNQUFNLENBQUMsYUFBYSxDQUNsQixTQUEyQixFQUMzQixNQUF3QjtRQUV4QixxQkFBbUIsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzFDLHFCQUFtQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDcEMsT0FBTyxxQkFBK0QsQ0FBQztJQUN6RSxDQUFDO0lBRUQsWUFBbUIsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNsQyxJQUFJLENBQUMscUJBQW1CLENBQUMsU0FBUyxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztTQUM1RTtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQy9CLHFCQUFtQixDQUFDLFNBQTZCLEVBQ2pELHFCQUFtQixDQUFDLE1BQU0sSUFBSSxFQUFFLENBQ2pDLENBQUM7UUFDRixJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDOUUsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxxQkFBbUIsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzFDLHFCQUFtQixDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7SUFDekMsQ0FBQztDQUNGLENBQUE7QUE1Q1ksbUJBQW1CO0lBTi9CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsUUFBUSxFQUFFLEVBQUU7UUFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtRQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtLQUN0QyxDQUFDO3FDQTBCMkIsU0FBUztHQXpCekIsbUJBQW1CLENBNEMvQjtBQU1NLFdBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQXlCO0NBQUcsQ0FBQTtBQUE1Qix5QkFBeUI7SUFKckMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7UUFDbkMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLG9CQUFvQixDQUFDO0tBQ2pELENBQUM7R0FDVyx5QkFBeUIsQ0FBRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge0NvbXBvbmVudFR5cGV9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIE5nTW9kdWxlLFxuICBPbkRlc3Ryb3ksXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TWF0RGlhbG9nLCBNYXREaWFsb2dDb25maWcsIE1hdERpYWxvZ01vZHVsZSwgTWF0RGlhbG9nUmVmfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuaW1wb3J0IHtOb29wQW5pbWF0aW9uc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcblxuLyoqIFRlc3QgY29tcG9uZW50IHRoYXQgaW1tZWRpYXRlbHkgb3BlbnMgYSBkaWFsb2cgd2hlbiBib290c3RyYXBwZWQuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtYXQtdGVzdC1kaWFsb2ctb3BlbmVyJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0VGVzdERpYWxvZ09wZW5lcjxUID0gdW5rbm93biwgUiA9IHVua25vd24+IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqIENvbXBvbmVudCB0aGF0IHNob3VsZCBiZSBvcGVuZWQgd2l0aCB0aGUgTWF0RGlhbG9nIGBvcGVuYCBtZXRob2QuICovXG4gIHByb3RlY3RlZCBzdGF0aWMgY29tcG9uZW50OiBDb21wb25lbnRUeXBlPHVua25vd24+IHwgdW5kZWZpbmVkO1xuXG4gIC8qKiBDb25maWcgdGhhdCBzaG91bGQgYmUgcHJvdmlkZWQgdG8gdGhlIE1hdERpYWxvZyBgb3BlbmAgbWV0aG9kLiAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGNvbmZpZzogTWF0RGlhbG9nQ29uZmlnIHwgdW5kZWZpbmVkO1xuXG4gIC8qKiBNYXREaWFsb2dSZWYgcmV0dXJuZWQgZnJvbSB0aGUgTWF0RGlhbG9nIGBvcGVuYCBtZXRob2QuICovXG4gIGRpYWxvZ1JlZjogTWF0RGlhbG9nUmVmPFQsIFI+O1xuXG4gIC8qKiBEYXRhIHBhc3NlZCB0byB0aGUgYE1hdERpYWxvZ2AgY2xvc2UgbWV0aG9kLiAqL1xuICBjbG9zZWRSZXN1bHQ6IFIgfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfYWZ0ZXJDbG9zZWRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICAvKiogU3RhdGljIG1ldGhvZCB0aGF0IHByZXBhcmVzIHRoaXMgY2xhc3MgdG8gb3BlbiB0aGUgcHJvdmlkZWQgY29tcG9uZW50LiAqL1xuICBzdGF0aWMgd2l0aENvbXBvbmVudDxUID0gdW5rbm93biwgUiA9IHVua25vd24+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50VHlwZTxUPixcbiAgICBjb25maWc/OiBNYXREaWFsb2dDb25maWcsXG4gICkge1xuICAgIE1hdFRlc3REaWFsb2dPcGVuZXIuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgIE1hdFRlc3REaWFsb2dPcGVuZXIuY29uZmlnID0gY29uZmlnO1xuICAgIHJldHVybiBNYXRUZXN0RGlhbG9nT3BlbmVyIGFzIENvbXBvbmVudFR5cGU8TWF0VGVzdERpYWxvZ09wZW5lcjxULCBSPj47XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlhbG9nOiBNYXREaWFsb2cpIHtcbiAgICBpZiAoIU1hdFRlc3REaWFsb2dPcGVuZXIuY29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1hdFRlc3REaWFsb2dPcGVuZXIgZG9lcyBub3QgaGF2ZSBhIGNvbXBvbmVudCBwcm92aWRlZC5gKTtcbiAgICB9XG5cbiAgICB0aGlzLmRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nLm9wZW48VCwgUj4oXG4gICAgICBNYXRUZXN0RGlhbG9nT3BlbmVyLmNvbXBvbmVudCBhcyBDb21wb25lbnRUeXBlPFQ+LFxuICAgICAgTWF0VGVzdERpYWxvZ09wZW5lci5jb25maWcgfHwge30sXG4gICAgKTtcbiAgICB0aGlzLl9hZnRlckNsb3NlZFN1YnNjcmlwdGlvbiA9IHRoaXMuZGlhbG9nUmVmLmFmdGVyQ2xvc2VkKCkuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XG4gICAgICB0aGlzLmNsb3NlZFJlc3VsdCA9IHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2FmdGVyQ2xvc2VkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgTWF0VGVzdERpYWxvZ09wZW5lci5jb21wb25lbnQgPSB1bmRlZmluZWQ7XG4gICAgTWF0VGVzdERpYWxvZ09wZW5lci5jb25maWcgPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTWF0VGVzdERpYWxvZ09wZW5lcl0sXG4gIGltcG9ydHM6IFtNYXREaWFsb2dNb2R1bGUsIE5vb3BBbmltYXRpb25zTW9kdWxlXSxcbn0pXG5leHBvcnQgY2xhc3MgTWF0VGVzdERpYWxvZ09wZW5lck1vZHVsZSB7fVxuIl19