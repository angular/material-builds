/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Class that tracks the error state of a component.
 * @docs-private
 */
export class _ErrorStateTracker {
    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {
        this._defaultMatcher = _defaultMatcher;
        this.ngControl = ngControl;
        this._parentFormGroup = _parentFormGroup;
        this._parentForm = _parentForm;
        this._stateChanges = _stateChanges;
        /** Whether the tracker is currently in an error state. */
        this.errorState = false;
    }
    /** Updates the error state based on the provided error state matcher. */
    updateErrorState() {
        const oldState = this.errorState;
        const parent = this._parentFormGroup || this._parentForm;
        const matcher = this.matcher || this._defaultMatcher;
        const control = this.ngControl ? this.ngControl.control : null;
        // Note: the null check here shouldn't be necessary, but there's an internal
        // test that appears to pass an object whose `isErrorState` isn't a function.
        const newState = typeof matcher?.isErrorState === 'function' ? matcher.isErrorState(control, parent) : false;
        if (newState !== oldState) {
            this.errorState = newState;
            this._stateChanges.next();
        }
    }
}
export function mixinErrorState(base) {
    return class extends base {
        /** Whether the component is in an error state. */
        get errorState() {
            return this._getTracker().errorState;
        }
        set errorState(value) {
            this._getTracker().errorState = value;
        }
        /** An object used to control the error state of the component. */
        get errorStateMatcher() {
            return this._getTracker().matcher;
        }
        set errorStateMatcher(value) {
            this._getTracker().matcher = value;
        }
        /** Updates the error state based on the provided error state matcher. */
        updateErrorState() {
            this._getTracker().updateErrorState();
        }
        _getTracker() {
            if (!this._tracker) {
                this._tracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, this.ngControl, this._parentFormGroup, this._parentForm, this.stateChanges);
            }
            return this._tracker;
        }
        constructor(...args) {
            super(...args);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,