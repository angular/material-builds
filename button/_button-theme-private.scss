@use 'sass:map';
@use '@material/ripple/ripple-theme' as mdc-ripple-theme;
@use '@material/theme/theme-color' as mdc-theme-color;

@use '../core/mdc-helpers/mdc-helpers';
@use '../core/theming/inspection';

@mixin _ripple-color($color) {
  --mat-mdc-button-persistent-ripple-color: #{$color};
  --mat-mdc-button-ripple-color: #{rgba($color, 0.1)};
}

@mixin ripple-theme-styles($theme, $is-filled) {
  $opacities: if(inspection.get-theme-type($theme) == dark,
    mdc-ripple-theme.$light-ink-opacities, mdc-ripple-theme.$dark-ink-opacities);

  // Ideally these styles would be structural, but MDC bases some of the opacities on the theme.
  &:hover .mat-mdc-button-persistent-ripple::before {
    opacity: map.get($opacities, hover);
  }

  &.cdk-program-focused,
  &.cdk-keyboard-focused {
    .mat-mdc-button-persistent-ripple::before {
      opacity: map.get($opacities, focus);
    }
  }

  &:active .mat-mdc-button-persistent-ripple::before {
    opacity: map.get($opacities, press);
  }

  @include _ripple-color(mdc-theme-color.prop-value(on-surface));

  &.mat-primary {
    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-primary, primary)));
  }

  &.mat-accent {
    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-secondary, secondary)));
  }

  &.mat-warn {
    @include _ripple-color(mdc-theme-color.prop-value(if($is-filled, on-error, error)));
  }
}

// Hides the touch target on lower densities.
@mixin touch-target-density($scale) {
  @include mdc-helpers.if-touch-targets-unsupported($scale) {
    .mat-mdc-button-touch-target {
      display: none;
    }
  }
}
