@use 'sass:map';
@use 'sass:list';
@use '../core/tokens/m3-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mat, checkbox);

/// Generates custom tokens for mat-checkbox.
@function get-tokens($theme, $color-variant: null) {
  $system: m3-utils.get-system($theme);
  @if $color-variant {
    $system: m3-utils.replace-colors-with-variant($system, primary, $color-variant);
  }

  @return (
    base: (
      selected-focus-state-layer-opacity: map.get($system, focus-state-layer-opacity),
      selected-hover-state-layer-opacity: map.get($system, hover-state-layer-opacity),
      selected-pressed-state-layer-opacity: map.get($system, pressed-state-layer-opacity),
      unselected-focus-state-layer-opacity: map.get($system, focus-state-layer-opacity),
      unselected-hover-state-layer-opacity: map.get($system, hover-state-layer-opacity),
      unselected-pressed-state-layer-opacity: map.get($system, pressed-state-layer-opacity),
    ),
    color: (
      disabled-label-color: m3-utils.color-with-opacity(map.get($system, on-surface), 38%),
      disabled-selected-checkmark-color: map.get($system, surface),
      disabled-selected-icon-color: m3-utils.color-with-opacity(map.get($system, on-surface), 38%),
      disabled-unselected-icon-color:
          m3-utils.color-with-opacity(map.get($system, on-surface), 38%),
      label-text-color: map.get($system, on-surface),
      selected-checkmark-color: map.get($system, on-primary),
      selected-focus-icon-color: map.get($system, primary),
      selected-focus-state-layer-color: map.get($system, primary),
      selected-hover-icon-color: map.get($system, primary),
      selected-hover-state-layer-color: map.get($system, primary),
      selected-icon-color: map.get($system, primary),
      selected-pressed-icon-color: map.get($system, primary),
      selected-pressed-state-layer-color: map.get($system, on-surface),
      unselected-focus-icon-color: map.get($system, on-surface),
      unselected-focus-state-layer-color: map.get($system, on-surface),
      unselected-hover-icon-color: map.get($system, on-surface),
      unselected-hover-state-layer-color: map.get($system, on-surface),
      unselected-icon-color: map.get($system, on-surface-variant),
      unselected-pressed-state-layer-color: map.get($system, primary),
    ),
    typography: (
      label-text-font: map.get($system, body-medium-font),
      label-text-line-height: map.get($system, body-medium-line-height),
      label-text-size: map.get($system, body-medium-size),
      label-text-tracking: map.get($system, body-medium-tracking),
      label-text-weight: map.get($system, body-medium-weight),
    ),
    density: get-density-tokens(map.get($theme, inspection.$internals, density-scale)),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($scale) {
  $scale: theming.clamp-density($scale, -3);
  $index: ($scale * -1) + 1;

  @return (
    touch-target-display: list.nth((block, block, none, none), $index),
    state-layer-size: list.nth((40px, 36px, 32px, 28px), $index)
  );
}
