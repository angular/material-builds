@use 'sass:map';
@use '../core/tokens/m2-utils';
@use '../core/tokens/m3-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens($theme) {
  $system: m2-utils.get-system($theme);

  @return (
    checkbox-disabled-selected-checkmark-color: #fff,
    checkbox-selected-focus-state-layer-opacity: map.get($system, focus-state-layer-opacity),
    checkbox-selected-hover-state-layer-opacity: map.get($system, hover-state-layer-opacity),
    checkbox-selected-pressed-state-layer-opacity: map.get($system, pressed-state-layer-opacity),
    checkbox-unselected-focus-state-layer-opacity: map.get($system, focus-state-layer-opacity),
    checkbox-unselected-hover-state-layer-opacity: map.get($system, hover-state-layer-opacity),
    checkbox-unselected-pressed-state-layer-opacity: map.get($system, pressed-state-layer-opacity),
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme, $palette-name: accent, $exclude: ()) {
  $system: m2-utils.get-system($theme);

  $is-dark: inspection.get-theme-type($theme) == dark;
  $foreground-base: inspection.get-theme-color($theme, foreground, base);
  $palette-default: inspection.get-theme-color($theme, $palette-name, default);
  $disabled: m3-utils.color-with-opacity(map.get($system, on-surface), 38%);
  $palette-selected: inspection.get-theme-color($theme, $palette-name);
  $border-color: inspection.get-theme-color($theme, foreground, base, 0.54);
  $selected-checkmark-color:
    inspection.get-theme-color($theme, $palette-name, default-contrast);

  $tokens: (
    checkbox-disabled-label-color: $disabled,
    checkbox-label-text-color: map.get($system, on-surface),
    checkbox-disabled-selected-icon-color: $disabled,
    checkbox-disabled-unselected-icon-color: $disabled,
    checkbox-selected-checkmark-color: $selected-checkmark-color,
    checkbox-selected-focus-icon-color: $palette-selected,
    checkbox-selected-hover-icon-color: $palette-selected,
    checkbox-selected-icon-color: $palette-selected,
    checkbox-selected-pressed-icon-color: $palette-selected,
    checkbox-unselected-focus-icon-color: map.get($system, on-surface),
    checkbox-unselected-hover-icon-color: map.get($system, on-surface),
    checkbox-unselected-icon-color: $border-color,
    checkbox-selected-focus-state-layer-color: $palette-default,
    checkbox-selected-hover-state-layer-color: $palette-default,
    checkbox-selected-pressed-state-layer-color: $palette-default,
    checkbox-unselected-focus-state-layer-color: map.get($system, on-surface),
    checkbox-unselected-hover-state-layer-color: map.get($system, on-surface),
    checkbox-unselected-pressed-state-layer-color: $foreground-base,
  );

  @each $token in $exclude {
    $tokens: map.remove($tokens, $token);
  }

  @return $tokens;
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return (
    checkbox-label-text-font: inspection.get-theme-typography($theme, body-2, font-family),
    checkbox-label-text-line-height: inspection.get-theme-typography($theme, body-2, line-height),
    checkbox-label-text-size: inspection.get-theme-typography($theme, body-2, font-size),
    checkbox-label-text-tracking: inspection.get-theme-typography($theme, body-2, letter-spacing),
    checkbox-label-text-weight: inspection.get-theme-typography($theme, body-2, font-weight)
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $scale: theming.clamp-density(inspection.get-theme-density($theme), -3);

  @return (
    checkbox-touch-target-display: if($scale < -1, none, block),
    checkbox-state-layer-size: map.get((
      0: 40px,
      -1: 36px,
      -2: 32px,
      -3: 28px,
    ), $scale)
  );
}
