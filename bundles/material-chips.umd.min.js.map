{"version":3,"sources":["src/material/material-chips.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","chips","cdk","keycodes","core","common","coercion","platform","rxjs","operators","platformBrowser","animations","a11y","bidi","collections","forms","formField","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","MatChipSelectionChange","source","selected","isUserInput","_MatChipMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatChipBase","_elementRef","MatChipAvatar","decorators","type","Directive","args","selector","host","class","MatChipTrailingIcon","MatChip","_super","_ngZone","globalRippleOptions","animationMode","_changeDetectorRef","tabIndex","_document","_this","_hasFocus","chipListSelectable","_chipListMultiple","_selected","_selectable","_removable","_onFocus","Subject","_onBlur","selectionChange","EventEmitter","destroyed","removed","_addHostClassName","_chipRippleTarget","document","createElement","classList","add","nativeElement","appendChild","_chipRipple","RippleRenderer","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","defineProperty","get","disabled","disableRipple","enumerable","configurable","set","coercedValue","coerceBooleanProperty","_dispatchSelectionChange","undefined","_value","textContent","selectable","toString","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","_markForCheck","deselect","selectViaInteraction","toggleSelected","focus","remove","removable","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","DELETE","BACKSPACE","SPACE","_blur","onStable","asObservable","pipe","take","subscribe","run","markForCheck","inputs","exportAs","[attr.tabindex]","role","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","[class._mat-animation-noopable]","[attr.disabled]","[attr.aria-disabled]","[attr.aria-selected]","(click)","(keydown)","(focus)","(blur)","ctorParameters","ElementRef","NgZone","Platform","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","ANIMATION_MODULE_TYPE","ChangeDetectorRef","Attribute","DOCUMENT","propDecorators","avatar","ContentChild","trailingIcon","removeIcon","forwardRef","MatChipRemove","Input","Output","_parentChip","elementRef","nodeName","setAttribute","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","InjectionToken","_MatChipListMixinBase","mixinErrorState","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","_disabled","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","empty","_syncChipsState","fn","_initializeSelection","writeValue","_chipInput","id","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","forEach","merge","apply","map","ngAfterContentInit","_keyManager","FocusKeyManager","withWrap","withVerticalOrientation","withHorizontalOrientation","takeUntil","dir","tabOut","_allowFocusEscape","changes","startWith","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","SelectionModel","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","_isInputEmpty","setLastItemActive","contains","HOME","END","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","chipFocusChanges","chipIndex","toArray","indexOf","updateActiveItem","chipBlurChanges","chipRemoveChanges","currentElement","parentElement","some","Component","template","[attr.aria-describedby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-multiselectable]","[attr.role]","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","[attr.aria-orientation]","[id]","providers","provide","MatFormFieldControl","useExisting","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","Directionality","NgForm","FormGroupDirective","ErrorStateMatcher","NgControl","Self","errorStateMatcher","compareWith","required","ContentChildren","descendants","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_inputElement","_chipList","ngOnChanges","TAB","hasModifierKey","_emitChipEnd","addOnBlur","_focus","_isSeparatorKey","input","_onInput","separators","has","(input)","[attr.placeholder]","chipList","CHIP_DECLARATIONS","Éµ0","ENTER","MatChipsModule","NgModule","declarations","useValue"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,yBAA0BA,QAAQ,iBAAkBA,QAAQ,0BAA2BA,QAAQ,mBAAoBA,QAAQ,yBAA0BA,QAAQ,yBAA0BA,QAAQ,QAASA,QAAQ,kBAAmBA,QAAQ,wCAAyCA,QAAQ,qBAAsBA,QAAQ,qBAAsBA,QAAQ,4BAA6BA,QAAQ,kBAAmBA,QAAQ,iCAC9d,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,0BAA2B,CAAC,UAAW,wBAAyB,gBAAiB,yBAA0B,kBAAmB,wBAAyB,wBAAyB,OAAQ,iBAAkB,uCAAwC,oBAAqB,oBAAqB,2BAA4B,iBAAkB,gCAAiCJ,GACrYA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,MAAQ,IAAKV,EAAOQ,GAAGG,IAAIC,SAAUZ,EAAOQ,GAAGK,KAAMb,EAAOQ,GAAGC,SAASI,KAAMb,EAAOQ,GAAGM,OAAQd,EAAOQ,GAAGG,IAAII,SAAUf,EAAOQ,GAAGG,IAAIK,SAAUhB,EAAOiB,KAAMjB,EAAOiB,KAAKC,UAAWlB,EAAOQ,GAAGW,gBAAgBC,WAAYpB,EAAOQ,GAAGG,IAAIU,KAAMrB,EAAOQ,GAAGG,IAAIW,KAAMtB,EAAOQ,GAAGG,IAAIY,YAAavB,EAAOQ,GAAGgB,MAAOxB,EAAOQ,GAAGC,SAASgB,WAHvc,CAIEC,MAAM,SAAWxB,EAASU,EAAUC,EAAMc,EAAQb,EAAQC,EAAUC,EAAUC,EAAMC,EAAWE,EAAYC,EAAMC,EAAMC,EAAaC,EAAOC,GAAa;;;;;;;;;;;;;;oFAkBtJ,IAAIG,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAASO,EAAUR,EAAGC,GAElB,SAASQ,IAAOZ,KAAKa,YAAcV,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEW,UAAkB,OAANV,EAAaC,OAAOU,OAAOX,IAAMQ,EAAGE,UAAYV,EAAEU,UAAW,IAAIF,GA6FnF,SAASI,EAAOC,EAAGC,GACf,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEM,KAAKR,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAAMF,EAAGG,KAAKP,EAAEQ,OAExE,MAAOC,GAASR,EAAI,CAAEQ,MAAOA,GAC7B,QACI,IACQT,IAAMA,EAAEM,OAAST,EAAIK,EAAU,SAAIL,EAAEM,KAAKD,GAElD,QAAU,GAAID,EAAG,MAAMA,EAAEQ,OAE7B,OAAOL,EAGX,SAASM,IACL,IAAK,IAAIN,EAAK,GAAIF,EAAI,EAAGA,EAAIS,UAAUC,OAAQV,IAC3CE,EAAKA,EAAGS,OAAOnB,EAAOiB,UAAUT,KACpC,OAAOE;;;;;;;;AAkEX,IAAIU,EACA,SAASA,EAETC,EAEAC,EAEAC,QACwB,IAAhBA,IAA0BA,GAAc,GAC5CvC,KAAKqC,OAASA,EACdrC,KAAKsC,SAAWA,EAChBtC,KAAKuC,YAAcA,GAYvBC,EAAoBvC,EAAOwC,cAAcxC,EAAOyC,WAAWzC,EAAO0C,mBAAmB1C,EAAO2C,eAL5F,SAASC,EAAYC,GACjB9C,KAAK8C,YAAcA,MAIkG,YAAa,GAKtIC,EAA+B,WAC/B,SAASA,KAQT,OANAA,EAAcC,WAAa,CACvB,CAAEC,KAAM9D,EAAK+D,UAAWC,KAAM,CAAC,CACnBC,SAAU,mCACVC,KAAM,CAAEC,MAAS,uBAG1BP,EATuB,GAe9BQ,EAAqC,WACrC,SAASA,KAQT,OANAA,EAAoBP,WAAa,CAC7B,CAAEC,KAAM9D,EAAK+D,UAAWC,KAAM,CAAC,CACnBC,SAAU,gDACVC,KAAM,CAAEC,MAAS,8BAG1BC,EAT6B,GAcpCC,EAAyB,SAAUC,GAEnC,SAASD,EAAQV,EAAaY,EAASpE,EAAUqE,EAEjDC,EAEAC,EAAoBC,EAEpBC,GACI,IAAIC,EAAQP,EAAOhC,KAAKzB,KAAM8C,IAAgB9C,KAmC9C,OAlCAgE,EAAMlB,YAAcA,EACpBkB,EAAMN,QAAUA,EAChBM,EAAMH,mBAAqBA,EAE3BG,EAAMC,WAAY,EAElBD,EAAME,oBAAqB,EAE3BF,EAAMG,mBAAoB,EAC1BH,EAAMI,WAAY,EAClBJ,EAAMK,aAAc,EACpBL,EAAMM,YAAa,EAEnBN,EAAMO,SAAW,IAAIhF,EAAKiF,QAE1BR,EAAMS,QAAU,IAAIlF,EAAKiF,QAEzBR,EAAMU,gBAAkB,IAAIvF,EAAKwF,aAEjCX,EAAMY,UAAY,IAAIzF,EAAKwF,aAE3BX,EAAMa,QAAU,IAAI1F,EAAKwF,aACzBX,EAAMc,oBAINd,EAAMe,mBAAqBhB,GAAaiB,UAAUC,cAAc,OAChEjB,EAAMe,kBAAkBG,UAAUC,IAAI,mBACtCnB,EAAMlB,YAAYsC,cAAcC,YAAYrB,EAAMe,mBAClDf,EAAMsB,YAAc,IAAIrF,EAAOsF,eAAevB,EAAON,EAASM,EAAMe,kBAAmBzF,GACvF0E,EAAMsB,YAAYE,mBAAmB1C,GACrCkB,EAAMyB,aAAe9B,GAAuB,GAC5CK,EAAM0B,oBAAwC,mBAAlB9B,EAC5BI,EAAMF,SAAuB,MAAZA,GAAoB6B,SAAS7B,KAAoB,EAC3DE,EAyPX,OApSArD,EAAU6C,EAASC,GA6CnBpD,OAAOuF,eAAepC,EAAQ1C,UAAW,iBAAkB,CAKvD+E,IAAK,WACD,OAAO7F,KAAK8F,UAAY9F,KAAK+F,iBAAmB/F,KAAKyF,aAAaK,UAEtEE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAepC,EAAQ1C,UAAW,WAAY,CAEjD+E,IAAK,WAAc,OAAO7F,KAAKoE,WAC/B8B,IAAK,SAAUpE,GACX,IAAIqE,EAAe9G,EAAS+G,sBAAsBtE,GAC9CqE,IAAiBnG,KAAKoE,YACtBpE,KAAKoE,UAAY+B,EACjBnG,KAAKqG,6BAGbL,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAepC,EAAQ1C,UAAW,QAAS,CAE9C+E,IAAK,WACD,YAAuBS,IAAhBtG,KAAKuG,OACNvG,KAAKuG,OACLvG,KAAK8C,YAAYsC,cAAcoB,aAEzCN,IAAK,SAAUpE,GAAS9B,KAAKuG,OAASzE,GACtCkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAepC,EAAQ1C,UAAW,aAAc,CAOnD+E,IAAK,WAAc,OAAO7F,KAAKqE,aAAerE,KAAKkE,oBACnDgC,IAAK,SAAUpE,GACX9B,KAAKqE,YAAchF,EAAS+G,sBAAsBtE,IAEtDkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAepC,EAAQ1C,UAAW,YAAa,CAIlD+E,IAAK,WAAc,OAAO7F,KAAKsE,YAC/B4B,IAAK,SAAUpE,GACX9B,KAAKsE,WAAajF,EAAS+G,sBAAsBtE,IAErDkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAepC,EAAQ1C,UAAW,eAAgB,CAErD+E,IAAK,WAGD,OAAO7F,KAAKyG,aAAezG,KAAKmE,mBAAqBnE,KAAKsC,UACtDtC,KAAKsC,SAASoE,WAAa,MAEnCV,YAAY,EACZC,cAAc,IAElBzC,EAAQ1C,UAAUgE,kBAAoB,WAClC,IACI6B,EAAU3G,KAAK8C,YAAYsC,cAC3BuB,EAAQC,aAFY,mBAAA,mBAGpBD,EAAQE,QAAQC,cAChBH,EAAQzB,UAAUC,IAJE,kBAQpBwB,EAAQzB,UAAUC,IAAI,sBAG9B3B,EAAQ1C,UAAUiG,YAAc,WAC5B/G,KAAK4E,UAAUoC,KAAK,CAAEC,KAAMjH,OAC5BA,KAAKsF,YAAY4B,wBAGrB1D,EAAQ1C,UAAUqG,OAAS,WAClBnH,KAAKoE,YACNpE,KAAKoE,WAAY,EACjBpE,KAAKqG,2BACLrG,KAAKoH,kBAIb5D,EAAQ1C,UAAUuG,SAAW,WACrBrH,KAAKoE,YACLpE,KAAKoE,WAAY,EACjBpE,KAAKqG,2BACLrG,KAAKoH,kBAIb5D,EAAQ1C,UAAUwG,qBAAuB,WAChCtH,KAAKoE,YACNpE,KAAKoE,WAAY,EACjBpE,KAAKqG,0BAAyB,GAC9BrG,KAAKoH,kBAIb5D,EAAQ1C,UAAUyG,eAAiB,SAAUhF,GAKzC,YAJoB,IAAhBA,IAA0BA,GAAc,GAC5CvC,KAAKoE,WAAapE,KAAKsC,SACvBtC,KAAKqG,yBAAyB9D,GAC9BvC,KAAKoH,gBACEpH,KAAKsC,UAGhBkB,EAAQ1C,UAAU0G,MAAQ,WACjBxH,KAAKiE,YACNjE,KAAK8C,YAAYsC,cAAcoC,QAC/BxH,KAAKuE,SAAS5C,KAAK,CAAEsF,KAAMjH,QAE/BA,KAAKiE,WAAY,GAQrBT,EAAQ1C,UAAU2G,OAAS,WACnBzH,KAAK0H,WACL1H,KAAK6E,QAAQmC,KAAK,CAAEC,KAAMjH,QAIlCwD,EAAQ1C,UAAU6G,aAAe,SAAUC,GACnC5H,KAAK8F,SACL8B,EAAMC,iBAGND,EAAME,mBAIdtE,EAAQ1C,UAAUiH,eAAiB,SAAUH,GACzC,IAAI5H,KAAK8F,SAGT,OAAQ8B,EAAMI,SACV,KAAK9I,EAAS+I,OACd,KAAK/I,EAASgJ,UAEVlI,KAAKyH,SAELG,EAAMC,iBACN,MACJ,KAAK3I,EAASiJ,MAENnI,KAAKyG,YACLzG,KAAKuH,gBAAe,GAGxBK,EAAMC,mBAIlBrE,EAAQ1C,UAAUsH,MAAQ,WACtB,IAAIpE,EAAQhE,KAKZA,KAAK0D,QAAQ2E,SACRC,eACAC,KAAK/I,EAAUgJ,KAAK,IACpBC,WAAU,WACXzE,EAAMN,QAAQgF,KAAI,WACd1E,EAAMC,WAAY,EAClBD,EAAMS,QAAQ9C,KAAK,CAAEsF,KAAMjD,WAIvCR,EAAQ1C,UAAUuF,yBAA2B,SAAU9D,QAC/B,IAAhBA,IAA0BA,GAAc,GAC5CvC,KAAK0E,gBAAgBsC,KAAK,CACtB3E,OAAQrC,KACRuC,YAAaA,EACbD,SAAUtC,KAAKoE,aAGvBZ,EAAQ1C,UAAUsG,cAAgB,WAE1BpH,KAAK6D,oBACL7D,KAAK6D,mBAAmB8E,gBAGhCnF,EAAQR,WAAa,CACjB,CAAEC,KAAM9D,EAAK+D,UAAWC,KAAM,CAAC,CACnBC,SAAU,yDACVwF,OAAQ,CAAC,QAAS,WAAY,gBAAiB,YAC/CC,SAAU,UACVxF,KAAM,CACFC,MAAS,+BACTwF,kBAAmB,6BACnBC,KAAQ,SACRC,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7BC,kCAAmC,sBACnCC,kBAAmB,mBACnBC,uBAAwB,sBACxBC,uBAAwB,eACxBC,UAAW,uBACXC,YAAa,yBACbC,UAAW,UACXC,SAAU,eAK9BnG,EAAQoG,eAAiB,WAAc,MAAO,CAC1C,CAAE3G,KAAM9D,EAAK0K,YACb,CAAE5G,KAAM9D,EAAK2K,QACb,CAAE7G,KAAM3D,EAASyK,UACjB,CAAE9G,UAAMqD,EAAWtD,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,UAAY,CAAE/G,KAAM9D,EAAK8K,OAAQ9G,KAAM,CAAClD,EAAOiK,8BAC5F,CAAEjH,KAAMkH,OAAQnH,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,UAAY,CAAE/G,KAAM9D,EAAK8K,OAAQ9G,KAAM,CAACzD,EAAW0K,0BAC7F,CAAEnH,KAAM9D,EAAKkL,mBACb,CAAEpH,KAAMkH,OAAQnH,WAAY,CAAC,CAAEC,KAAM9D,EAAKmL,UAAWnH,KAAM,CAAC,eAC5D,CAAEF,UAAMqD,EAAWtD,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,UAAY,CAAE/G,KAAM9D,EAAK8K,OAAQ9G,KAAM,CAAC/D,EAAOmL,eAEhG/G,EAAQgH,eAAiB,CACrBC,OAAQ,CAAC,CAAExH,KAAM9D,EAAKuL,aAAcvH,KAAM,CAACJ,KAC3C4H,aAAc,CAAC,CAAE1H,KAAM9D,EAAKuL,aAAcvH,KAAM,CAACI,KACjDqH,WAAY,CAAC,CAAE3H,KAAM9D,EAAKuL,aAAcvH,KAAM,CAAChE,EAAK0L,YAAW,WAAc,OAAOC,QACpFxI,SAAU,CAAC,CAAEW,KAAM9D,EAAK4L,QACxBjJ,MAAO,CAAC,CAAEmB,KAAM9D,EAAK4L,QACrBtE,WAAY,CAAC,CAAExD,KAAM9D,EAAK4L,QAC1BrD,UAAW,CAAC,CAAEzE,KAAM9D,EAAK4L,QACzBrG,gBAAiB,CAAC,CAAEzB,KAAM9D,EAAK6L,SAC/BpG,UAAW,CAAC,CAAE3B,KAAM9D,EAAK6L,SACzBnG,QAAS,CAAC,CAAE5B,KAAM9D,EAAK6L,UAEpBxH,EArSiB,CAsS1BhB,GAcEsI,EAA+B,WAC/B,SAASA,EAAcG,EAEvBC,GACIlL,KAAKiL,YAAcA,EAEfC,GAAoD,WAAtCA,EAAW9F,cAAc+F,UACvCD,EAAW9F,cAAcgG,aAAa,OAAQ,UA8BtD,OA1BAN,EAAchK,UAAU6G,aAAe,SAAUC,GAC7C,IAAIyD,EAAarL,KAAKiL,YAClBI,EAAW3D,YAAc2D,EAAWvF,UACpCuF,EAAW5D,SAOfG,EAAME,mBAEVgD,EAAc9H,WAAa,CACvB,CAAEC,KAAM9D,EAAK+D,UAAWC,KAAM,CAAC,CACnBC,SAAU,kBACVC,KAAM,CACFC,MAAS,yCACTkG,UAAW,4BAK/BsB,EAAclB,eAAiB,WAAc,MAAO,CAChD,CAAE3G,KAAMO,GACR,CAAEP,KAAM9D,EAAK0K,cAEViB,EArCuB,GAgD9BQ,EAA4B,IAAInM,EAAKoM,eAAe,6BAsBpDC,EAAwBvL,EAAOwL,iBAV/B,SAASC,EAAgBC,EAA2BC,EAAaC,EAEjEC,GACI9L,KAAK2L,0BAA4BA,EACjC3L,KAAK4L,YAAcA,EACnB5L,KAAK6L,iBAAmBA,EACxB7L,KAAK8L,UAAYA,KAMrBC,EAAe,EAEfC,EACA,SAASA,EAET3J,EAEAP,GACI9B,KAAKqC,OAASA,EACdrC,KAAK8B,MAAQA,GAOjBmK,EAA6B,SAAUxI,GAEvC,SAASwI,EAAYnJ,EAAae,EAAoBqI,EAAMN,EAAaC,EAAkBF,EAE3FG,GACI,IAAI9H,EAAQP,EAAOhC,KAAKzB,KAAM2L,EAA2BC,EAAaC,EAAkBC,IAAc9L,KAiDtG,OAhDAgE,EAAMlB,YAAcA,EACpBkB,EAAMH,mBAAqBA,EAC3BG,EAAMkI,KAAOA,EACblI,EAAM8H,UAAYA,EAKlB9H,EAAMmI,YAAc,gBAMpBnI,EAAMoI,wBAA0B,KAEhCpI,EAAMqI,WAAa,IAAI9M,EAAKiF,QAE5BR,EAAMsI,KAAO,iBAAmBP,IAEhC/H,EAAMuI,UAAY,EAKlBvI,EAAMwI,cAAgB,KAEtBxI,EAAMyI,WAAa,aAEnBzI,EAAM0I,UAAY,aAClB1I,EAAM2I,WAAY,EAClB3I,EAAM4I,aAAe,SAAUC,EAAIC,GAAM,OAAOD,IAAOC,GACvD9I,EAAM+I,WAAY,EAClB/I,EAAMgJ,WAAY,EAElBhJ,EAAMiJ,gBAAkB,aACxBjJ,EAAMK,aAAc,EAEpBL,EAAMkJ,OAAS,IAAI/N,EAAKwF,aAMxBX,EAAMmJ,YAAc,IAAIhO,EAAKwF,aACzBX,EAAM8H,YACN9H,EAAM8H,UAAUsB,cAAgBpJ,GAE7BA,EA2pBX,OAhtBArD,EAAUsL,EAAaxI,GAuDvBpD,OAAOuF,eAAeqG,EAAYnL,UAAW,WAAY,CAErD+E,IAAK,WACD,OAAO7F,KAAKqN,SAAWrN,KAAKsN,gBAAgBhL,SAAWtC,KAAKsN,gBAAgBhL,SAAS,IAEzF0D,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,OAAQ,CAEjD+E,IAAK,WAAc,OAAO7F,KAAKuN,MAAQ,KAAO,WAC9CvH,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,WAAY,CAErD+E,IAAK,WAAc,OAAO7F,KAAK2M,WAC/BzG,IAAK,SAAUpE,GACX9B,KAAK2M,UAAYtN,EAAS+G,sBAAsBtE,GAChD9B,KAAKwN,mBAETxH,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,cAAe,CAMxD+E,IAAK,WAAc,OAAO7F,KAAK4M,cAC/B1G,IAAK,SAAUuH,GACXzN,KAAK4M,aAAea,EAChBzN,KAAKsN,iBAELtN,KAAK0N,wBAGb1H,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,QAAS,CAKlD+E,IAAK,WAAc,OAAO7F,KAAKuG,QAC/BL,IAAK,SAAUpE,GACX9B,KAAK2N,WAAW7L,GAChB9B,KAAKuG,OAASzE,GAElBkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,KAAM,CAK/C+E,IAAK,WACD,OAAO7F,KAAK4N,WAAa5N,KAAK4N,WAAWC,GAAK7N,KAAKsM,MAEvDtG,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,WAAY,CAKrD+E,IAAK,WAAc,OAAO7F,KAAK+M,WAC/B7G,IAAK,SAAUpE,GACX9B,KAAK+M,UAAY1N,EAAS+G,sBAAsBtE,GAChD9B,KAAK8N,aAAanM,QAEtBqE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,cAAe,CAKxD+E,IAAK,WACD,OAAO7F,KAAK4N,WAAa5N,KAAK4N,WAAWG,YAAc/N,KAAKgO,cAEhE9H,IAAK,SAAUpE,GACX9B,KAAKgO,aAAelM,EACpB9B,KAAK8N,aAAanM,QAEtBqE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,UAAW,CAEpD+E,IAAK,WACD,OAAQ7F,KAAK4N,YAAc5N,KAAK4N,WAAWK,SAAYjO,KAAKkO,mBAEhElI,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,QAAS,CAKlD+E,IAAK,WACD,QAAS7F,KAAK4N,YAAc5N,KAAK4N,WAAWL,QAAgC,IAAtBvN,KAAKhB,MAAMkD,QAErE8D,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,mBAAoB,CAK7D+E,IAAK,WAAc,OAAQ7F,KAAKuN,OAASvN,KAAKiO,SAC9CjI,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,WAAY,CAKrD+E,IAAK,WAAc,OAAO7F,KAAK8L,YAAc9L,KAAK8L,UAAUhG,SAAW9F,KAAKgN,WAC5E9G,IAAK,SAAUpE,GACX9B,KAAKgN,UAAY3N,EAAS+G,sBAAsBtE,GAChD9B,KAAKwN,mBAETxH,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,aAAc,CAKvD+E,IAAK,WAAc,OAAO7F,KAAKqE,aAC/B6B,IAAK,SAAUpE,GACX,IAAIkC,EAAQhE,KACZA,KAAKqE,YAAchF,EAAS+G,sBAAsBtE,GAC9C9B,KAAKhB,OACLgB,KAAKhB,MAAMmP,SAAQ,SAAUlH,GAAQ,OAAOA,EAAK/C,mBAAqBF,EAAMK,gBAGpF2B,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,WAAY,CACrDoF,IAAK,SAAUpE,GACX9B,KAAKwM,cAAgB1K,EACrB9B,KAAKuM,UAAYzK,GAErBkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,uBAAwB,CAEjE+E,IAAK,WACD,OAAOtG,EAAK6O,MAAMC,WAAM,EAAQrM,EAAShC,KAAKhB,MAAMsP,KAAI,SAAUrH,GAAQ,OAAOA,EAAKvC,sBAE1FsB,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,mBAAoB,CAE7D+E,IAAK,WACD,OAAOtG,EAAK6O,MAAMC,WAAM,EAAQrM,EAAShC,KAAKhB,MAAMsP,KAAI,SAAUrH,GAAQ,OAAOA,EAAK1C,eAE1FyB,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,kBAAmB,CAE5D+E,IAAK,WACD,OAAOtG,EAAK6O,MAAMC,WAAM,EAAQrM,EAAShC,KAAKhB,MAAMsP,KAAI,SAAUrH,GAAQ,OAAOA,EAAKxC,cAE1FuB,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAeqG,EAAYnL,UAAW,oBAAqB,CAE9D+E,IAAK,WACD,OAAOtG,EAAK6O,MAAMC,WAAM,EAAQrM,EAAShC,KAAKhB,MAAMsP,KAAI,SAAUrH,GAAQ,OAAOA,EAAKrC,gBAE1FoB,YAAY,EACZC,cAAc,IAElBgG,EAAYnL,UAAUyN,mBAAqB,WACvC,IAAIvK,EAAQhE,KACZA,KAAKwO,YAAc,IAAI7O,EAAK8O,gBAAgBzO,KAAKhB,OAC5C0P,WACAC,0BACAC,0BAA0B5O,KAAKkM,KAAOlM,KAAKkM,KAAKpK,MAAQ,OACzD9B,KAAKkM,MACLlM,KAAKkM,KAAKgB,OACL3E,KAAK/I,EAAUqP,UAAU7O,KAAKqM,aAC9B5D,WAAU,SAAUqG,GAAO,OAAO9K,EAAMwK,YAAYI,0BAA0BE,MAEvF9O,KAAKwO,YAAYO,OAAOxG,KAAK/I,EAAUqP,UAAU7O,KAAKqM,aAAa5D,WAAU,WACzEzE,EAAMgL,uBAGVhP,KAAKhB,MAAMiQ,QAAQ1G,KAAK/I,EAAU0P,UAAU,MAAO1P,EAAUqP,UAAU7O,KAAKqM,aAAa5D,WAAU,WAC3FzE,EAAM8B,UAGNqJ,QAAQC,UAAUC,MAAK,WACnBrL,EAAMwJ,qBAGdxJ,EAAMsL,cAENtL,EAAM0J,uBAEN1J,EAAMuL,kBAENvL,EAAMwL,gCACNxL,EAAM8J,aAAanM,WAG3BsK,EAAYnL,UAAU2O,SAAW,WAC7BzP,KAAKsN,gBAAkB,IAAIzN,EAAY6P,eAAe1P,KAAKqN,cAAU/G,GAAW,GAChFtG,KAAK8N,aAAanM,QAEtBsK,EAAYnL,UAAU6O,UAAY,WAC1B3P,KAAK8L,YAIL9L,KAAK4P,mBACD5P,KAAK8L,UAAUhG,WAAa9F,KAAKgN,YACjChN,KAAK8F,WAAa9F,KAAK8L,UAAUhG,YAI7CmG,EAAYnL,UAAUiG,YAAc,WAChC/G,KAAKqM,WAAW1K,OAChB3B,KAAKqM,WAAWwD,WAChB7P,KAAK8N,aAAa+B,WAClB7P,KAAK8P,sBAGT7D,EAAYnL,UAAUiP,cAAgB,SAAUC,GAC5ChQ,KAAK4N,WAAaoC,GAMtB/D,EAAYnL,UAAUmP,kBAAoB,SAAUC,GAAOlQ,KAAKmQ,iBAAmBD,EAAIE,KAAK,MAE5FnE,EAAYnL,UAAU6M,WAAa,SAAU7L,GACrC9B,KAAKhB,OACLgB,KAAKqQ,qBAAqBvO,GAAO,IAIzCmK,EAAYnL,UAAUwP,iBAAmB,SAAU7C,GAC/CzN,KAAK0M,UAAYe,GAGrBxB,EAAYnL,UAAUyP,kBAAoB,SAAU9C,GAChDzN,KAAKyM,WAAagB,GAGtBxB,EAAYnL,UAAU0P,iBAAmB,SAAUC,GAC/CzQ,KAAK8F,SAAW2K,EAChBzQ,KAAK8N,aAAanM,QAMtBsK,EAAYnL,UAAU4P,iBAAmB,SAAU9I,GAC1C5H,KAAK2Q,oBAAoB/I,IAC1B5H,KAAKwH,SAObyE,EAAYnL,UAAU0G,MAAQ,SAAUoJ,GAChC5Q,KAAK8F,UAKL9F,KAAK4N,YAAc5N,KAAK4N,WAAWK,UAG9BjO,KAAKhB,MAAMkD,OAAS,GACzBlC,KAAKwO,YAAYqC,qBACjB7Q,KAAK8N,aAAanM,SAGlB3B,KAAK8Q,YAAYF,GACjB5Q,KAAK8N,aAAanM,UAI1BsK,EAAYnL,UAAUgQ,YAAc,SAAUF,GACtC5Q,KAAK4N,YACL5N,KAAK4N,WAAWpG,MAAMoJ,IAM9B3E,EAAYnL,UAAUiQ,SAAW,SAAUnJ,GACvC,IAAIoJ,EAASpJ,EAAMoJ,OAEfpJ,EAAMI,UAAY9I,EAASgJ,WAAalI,KAAKiR,cAAcD,IAC3DhR,KAAKwO,YAAY0C,oBACjBtJ,EAAMC,kBAEDmJ,GAAUA,EAAO9L,UAAUiM,SAAS,cACrCvJ,EAAMI,UAAY9I,EAASkS,MAC3BpR,KAAKwO,YAAYqC,qBACjBjJ,EAAMC,kBAEDD,EAAMI,UAAY9I,EAASmS,KAChCrR,KAAKwO,YAAY0C,oBACjBtJ,EAAMC,kBAGN7H,KAAKwO,YAAY8C,UAAU1J,GAE/B5H,KAAK8N,aAAanM,SAM1BsK,EAAYnL,UAAUyO,gBAAkB,WAEpCvP,KAAKuM,UAAYvM,KAAKwM,gBAAwC,IAAtBxM,KAAKhB,MAAMkD,QAAgB,EAAI,IAM3E+J,EAAYnL,UAAU0O,8BAAgC,WAElD,GAAoC,MAAhCxP,KAAKoM,wBACL,GAAIpM,KAAKhB,MAAMkD,OAAQ,CACnB,IAAIqP,EAAeC,KAAKC,IAAIzR,KAAKoM,wBAAyBpM,KAAKhB,MAAMkD,OAAS,GAC9ElC,KAAKwO,YAAYkD,cAAcH,QAG/BvR,KAAKwH,QAGbxH,KAAKoM,wBAA0B,MAQnCH,EAAYnL,UAAU6Q,cAAgB,SAAUC,GAC5C,OAAOA,GAAS,GAAKA,EAAQ5R,KAAKhB,MAAMkD,QAE5C+J,EAAYnL,UAAUmQ,cAAgB,SAAUtK,GAC5C,SAAIA,GAA8C,UAAnCA,EAAQwE,SAASrE,eAChBH,EACE7E,QAItBmK,EAAYnL,UAAUuP,qBAAuB,SAAUvO,EAAOS,GAC1D,IAAIyB,EAAQhE,KAIZ,QAHoB,IAAhBuC,IAA0BA,GAAc,GAC5CvC,KAAK6R,kBACL7R,KAAKhB,MAAMmP,SAAQ,SAAUlH,GAAQ,OAAOA,EAAKI,cAC7C7G,MAAMsR,QAAQhQ,GACdA,EAAMqM,SAAQ,SAAU4D,GAAgB,OAAO/N,EAAMgO,aAAaD,EAAcxP,MAChFvC,KAAKiS,kBAEJ,CACD,IAAIC,EAAoBlS,KAAKgS,aAAalQ,EAAOS,GAG7C2P,GACI3P,GACAvC,KAAKwO,YAAYkD,cAAcQ,KAS/CjG,EAAYnL,UAAUkR,aAAe,SAAUlQ,EAAOS,GAClD,IAAIyB,EAAQhE,UACQ,IAAhBuC,IAA0BA,GAAc,GAC5C,IAAI2P,EAAoBlS,KAAKhB,MAAMmT,MAAK,SAAUlL,GAC9C,OAAqB,MAAdA,EAAKnF,OAAiBkC,EAAM4I,aAAa3F,EAAKnF,MAAOA,MAMhE,OAJIoQ,IACA3P,EAAc2P,EAAkB5K,uBAAyB4K,EAAkB/K,SAC3EnH,KAAKsN,gBAAgBnG,OAAO+K,IAEzBA,GAEXjG,EAAYnL,UAAU4M,qBAAuB,WACzC,IAAI1J,EAAQhE,KAGZmP,QAAQC,UAAUC,MAAK,YACfrL,EAAM8H,WAAa9H,EAAMuC,UACzBvC,EAAMqM,qBAAqBrM,EAAM8H,UAAY9H,EAAM8H,UAAUhK,MAAQkC,EAAMuC,QAAQ,GACnFvC,EAAM8J,aAAanM,YAQ/BsK,EAAYnL,UAAU+Q,gBAAkB,SAAUO,GAC9CpS,KAAKsN,gBAAgB+E,QACrBrS,KAAKhB,MAAMmP,SAAQ,SAAUlH,GACrBA,IAASmL,GACTnL,EAAKI,cAGbrH,KAAK8N,aAAanM,QAMtBsK,EAAYnL,UAAUmR,YAAc,WAChC,IAAIjO,EAAQhE,KACRA,KAAK2M,YACL3M,KAAKsN,gBAAgB+E,QACrBrS,KAAKhB,MAAMmP,SAAQ,SAAUlH,GACrBA,EAAK3E,UACL0B,EAAMsJ,gBAAgBnG,OAAOF,MAGrCjH,KAAK8N,aAAanM,SAI1BsK,EAAYnL,UAAUwR,kBAAoB,SAAUC,GAChD,IAAIC,EAEAA,EADAhS,MAAMsR,QAAQ9R,KAAKsC,UACLtC,KAAKsC,SAASgM,KAAI,SAAUrH,GAAQ,OAAOA,EAAKnF,SAGhD9B,KAAKsC,SAAWtC,KAAKsC,SAASR,MAAQyQ,EAExDvS,KAAKuG,OAASiM,EACdxS,KAAKkN,OAAOlG,KAAK,IAAIgF,EAAkBhM,KAAMwS,IAC7CxS,KAAKmN,YAAYnG,KAAKwL,GACtBxS,KAAK0M,UAAU8F,GACfxS,KAAK6D,mBAAmB8E,gBAG5BsD,EAAYnL,UAAUsH,MAAQ,WAC1B,IAAIpE,EAAQhE,KACPA,KAAKkO,mBACNlO,KAAKwO,YAAYkD,eAAe,GAE/B1R,KAAK8F,WACF9F,KAAK4N,WAKL6E,YAAW,WACFzO,EAAMiK,SACPjK,EAAM0O,oBAMd1S,KAAK0S,mBAKjBzG,EAAYnL,UAAU4R,eAAiB,WACnC1S,KAAKyM,aACLzM,KAAK6D,mBAAmB8E,eACxB3I,KAAK8N,aAAanM,QAOtBsK,EAAYnL,UAAUkO,kBAAoB,WACtC,IAAIhL,EAAQhE,MACY,IAApBA,KAAKuM,YACLvM,KAAKuM,WAAa,EAClBkG,YAAW,WACPzO,EAAMuI,UAAYvI,EAAMwI,eAAiB,EACzCxI,EAAMH,mBAAmB8E,oBAIrCsD,EAAYnL,UAAUwO,YAAc,WAChCtP,KAAK8P,qBACL9P,KAAK2S,sBACL3S,KAAK4S,0BACL5S,KAAK6S,yBAET5G,EAAYnL,UAAUgP,mBAAqB,WACnC9P,KAAK8S,yBACL9S,KAAK8S,uBAAuBC,cAC5B/S,KAAK8S,uBAAyB,MAE9B9S,KAAKgT,wBACLhT,KAAKgT,sBAAsBD,cAC3B/S,KAAKgT,sBAAwB,MAE7BhT,KAAKiT,6BACLjT,KAAKiT,2BAA2BF,cAChC/S,KAAKiT,2BAA6B,MAElCjT,KAAKkT,0BACLlT,KAAKkT,wBAAwBH,cAC7B/S,KAAKkT,wBAA0B,OAIvCjH,EAAYnL,UAAU8R,wBAA0B,WAC5C,IAAI5O,EAAQhE,KACZA,KAAKiT,2BAA6BjT,KAAKmT,qBAAqB1K,WAAU,SAAUb,GAC5EA,EAAMvF,OAAOC,SACP0B,EAAMsJ,gBAAgBnG,OAAOS,EAAMvF,QACnC2B,EAAMsJ,gBAAgBjG,SAASO,EAAMvF,QAEtC2B,EAAMqJ,UACPrJ,EAAMhF,MAAMmP,SAAQ,SAAUlH,IACrBjD,EAAMsJ,gBAAgB8F,WAAWnM,IAASA,EAAK3E,UAChD2E,EAAKI,cAIbO,EAAMrF,aACNyB,EAAMsO,wBAKlBrG,EAAYnL,UAAU6R,oBAAsB,WACxC,IAAI3O,EAAQhE,KACZA,KAAK8S,uBAAyB9S,KAAKqT,iBAAiB5K,WAAU,SAAUb,GACpE,IAAI0L,EAAYtP,EAAMhF,MAAMuU,UAAUC,QAAQ5L,EAAMX,MAChDjD,EAAM2N,cAAc2B,IACpBtP,EAAMwK,YAAYiF,iBAAiBH,GAEvCtP,EAAM8J,aAAanM,UAEvB3B,KAAKgT,sBAAwBhT,KAAK0T,gBAAgBjL,WAAU,WACxDzE,EAAMoE,QACNpE,EAAM8J,aAAanM,WAG3BsK,EAAYnL,UAAU+R,sBAAwB,WAC1C,IAAI7O,EAAQhE,KACZA,KAAKkT,wBAA0BlT,KAAK2T,kBAAkBlL,WAAU,SAAUb,GACtE,IAAIX,EAAOW,EAAMX,KACbqM,EAAYtP,EAAMhF,MAAMuU,UAAUC,QAAQ5L,EAAMX,MAIhDjD,EAAM2N,cAAc2B,IAAcrM,EAAKhD,YACvCD,EAAMoI,wBAA0BkH,OAK5CrH,EAAYnL,UAAU6P,oBAAsB,SAAU/I,GAElD,IADA,IAAIgM,EAAiBhM,EAAMoJ,OACpB4C,GAAkBA,IAAmB5T,KAAK8C,YAAYsC,eAAe,CACxE,GAAIwO,EAAe1O,UAAUiM,SAAS,YAClC,OAAO,EAEXyC,EAAiBA,EAAeC,cAEpC,OAAO,GAGX5H,EAAYnL,UAAUoN,gBAAkB,WACpC,OAAOlO,KAAKhB,MAAM8U,MAAK,SAAU7M,GAAQ,OAAOA,EAAKhD,cAGzDgI,EAAYnL,UAAU0M,gBAAkB,WACpC,IAAIxJ,EAAQhE,KACRA,KAAKhB,OACLgB,KAAKhB,MAAMmP,SAAQ,SAAUlH,GACzBA,EAAKnB,SAAW9B,EAAMgJ,UACtB/F,EAAK9C,kBAAoBH,EAAMqJ,aAI3CpB,EAAYjJ,WAAa,CACrB,CAAEC,KAAM9D,EAAK4U,UAAW5Q,KAAM,CAAC,CACnBC,SAAU,gBACV4Q,SAAU,qEACVnL,SAAU,cACVxF,KAAM,CACFyF,kBAAmB,8BACnBmL,0BAA2B,2BAC3BC,uBAAwB,yBACxB5K,uBAAwB,sBACxB6K,sBAAuB,aACvBC,8BAA+B,WAC/BC,cAAe,OACfC,iCAAkC,WAClCC,gCAAiC,aACjCC,iCAAkC,WAClCC,0BAA2B,kBAC3BnR,MAAS,gBACToG,UAAW,UACXC,SAAU,UACVF,YAAa,mBACbiL,OAAQ,QAEZC,UAAW,CAAC,CAAEC,QAAS7U,EAAU8U,oBAAqBC,YAAa7I,IACnE8I,cAAe5V,EAAK6V,kBAAkBC,KACtCC,gBAAiB/V,EAAKgW,wBAAwBC,OAC9CC,OAAQ,CAAC,igGAIzBpJ,EAAYrC,eAAiB,WAAc,MAAO,CAC9C,CAAE3G,KAAM9D,EAAK0K,YACb,CAAE5G,KAAM9D,EAAKkL,mBACb,CAAEpH,KAAMrD,EAAK0V,eAAgBtS,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,YACvD,CAAE/G,KAAMnD,EAAMyV,OAAQvS,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,YAChD,CAAE/G,KAAMnD,EAAM0V,mBAAoBxS,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,YAC5D,CAAE/G,KAAMhD,EAAOwV,mBACf,CAAExS,KAAMnD,EAAM4V,UAAW1S,WAAY,CAAC,CAAEC,KAAM9D,EAAK6K,UAAY,CAAE/G,KAAM9D,EAAKwW,UAEhF1J,EAAYzB,eAAiB,CACzBoL,kBAAmB,CAAC,CAAE3S,KAAM9D,EAAK4L,QACjCsC,SAAU,CAAC,CAAEpK,KAAM9D,EAAK4L,QACxB8K,YAAa,CAAC,CAAE5S,KAAM9D,EAAK4L,QAC3BjJ,MAAO,CAAC,CAAEmB,KAAM9D,EAAK4L,QACrB+K,SAAU,CAAC,CAAE7S,KAAM9D,EAAK4L,QACxBgD,YAAa,CAAC,CAAE9K,KAAM9D,EAAK4L,QAC3BjF,SAAU,CAAC,CAAE7C,KAAM9D,EAAK4L,QACxBkC,gBAAiB,CAAC,CAAEhK,KAAM9D,EAAK4L,MAAO5H,KAAM,CAAC,sBAC7CsD,WAAY,CAAC,CAAExD,KAAM9D,EAAK4L,QAC1BjH,SAAU,CAAC,CAAEb,KAAM9D,EAAK4L,QACxBmC,OAAQ,CAAC,CAAEjK,KAAM9D,EAAK6L,SACtBmC,YAAa,CAAC,CAAElK,KAAM9D,EAAK6L,SAC3BhM,MAAO,CAAC,CAAEiE,KAAM9D,EAAK4W,gBAAiB5S,KAAM,CAACK,EAAS,CAGtCwS,aAAa,OAG1B/J,EAjtBqB,CAktB9BT,GAUEyK,EAAiB,EAKjBC,EAA8B,WAC9B,SAASA,EAAapT,EAAaqT,GAC/BnW,KAAK8C,YAAcA,EACnB9C,KAAKmW,gBAAkBA,EAEvBnW,KAAKiO,SAAU,EACfjO,KAAKoW,YAAa,EAMlBpW,KAAKqW,kBAAoBrW,KAAKmW,gBAAgBE,kBAE9CrW,KAAKsW,QAAU,IAAInX,EAAKwF,aAExB3E,KAAK+N,YAAc,GAEnB/N,KAAK6N,GAAK,uBAAyBoI,IACnCjW,KAAKgN,WAAY,EACjBhN,KAAKuW,cAAgBvW,KAAK8C,YAAYsC,cA4H1C,OA1HA/E,OAAOuF,eAAesQ,EAAapV,UAAW,WAAY,CAEtDoF,IAAK,SAAUpE,GACPA,IACA9B,KAAKwW,UAAY1U,EACjB9B,KAAKwW,UAAUzG,cAAc/P,QAGrCgG,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAesQ,EAAapV,UAAW,YAAa,CAIvD+E,IAAK,WAAc,OAAO7F,KAAKoW,YAC/BlQ,IAAK,SAAUpE,GAAS9B,KAAKoW,WAAa/W,EAAS+G,sBAAsBtE,IACzEkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAesQ,EAAapV,UAAW,WAAY,CAEtD+E,IAAK,WAAc,OAAO7F,KAAKgN,WAAchN,KAAKwW,WAAaxW,KAAKwW,UAAU1Q,UAC9EI,IAAK,SAAUpE,GAAS9B,KAAKgN,UAAY3N,EAAS+G,sBAAsBtE,IACxEkE,YAAY,EACZC,cAAc,IAElB5F,OAAOuF,eAAesQ,EAAapV,UAAW,QAAS,CAEnD+E,IAAK,WAAc,OAAQ7F,KAAKuW,cAAczU,OAC9CkE,YAAY,EACZC,cAAc,IAElBiQ,EAAapV,UAAU2V,YAAc,WACjCzW,KAAKwW,UAAU1I,aAAanM,QAGhCuU,EAAapV,UAAUiQ,SAAW,SAAUnJ,GAGpCA,GAASA,EAAMI,UAAY9I,EAASwX,MAAQxX,EAASyX,eAAe/O,EAAO,aAC3E5H,KAAKwW,UAAUxH,oBAEnBhP,KAAK4W,aAAahP,IAGtBsO,EAAapV,UAAUsH,MAAQ,WACvBpI,KAAK6W,WACL7W,KAAK4W,eAET5W,KAAKiO,SAAU,EAEVjO,KAAKwW,UAAUvI,SAChBjO,KAAKwW,UAAUpO,QAEnBpI,KAAKwW,UAAU1I,aAAanM,QAEhCuU,EAAapV,UAAUgW,OAAS,WAC5B9W,KAAKiO,SAAU,EACfjO,KAAKwW,UAAU1I,aAAanM,QAGhCuU,EAAapV,UAAU8V,aAAe,SAAUhP,IACvC5H,KAAKuW,cAAczU,OAAW8F,GAC/B5H,KAAKwW,UAAUzF,SAASnJ,GAEvBA,IAAS5H,KAAK+W,gBAAgBnP,KAC/B5H,KAAKsW,QAAQtP,KAAK,CAAEgQ,MAAOhX,KAAKuW,cAAezU,MAAO9B,KAAKuW,cAAczU,QACrE8F,GACAA,EAAMC,mBAIlBqO,EAAapV,UAAUmW,SAAW,WAE9BjX,KAAKwW,UAAU1I,aAAanM,QAGhCuU,EAAapV,UAAU0G,MAAQ,SAAUoJ,GACrC5Q,KAAKuW,cAAc/O,MAAMoJ,IAG7BsF,EAAapV,UAAUiW,gBAAkB,SAAUnP,GAC/C,GAAI1I,EAASyX,eAAe/O,GACxB,OAAO,EAEX,IAAIsP,EAAalX,KAAKqW,kBAClBrO,EAAUJ,EAAMI,QACpB,OAAOxH,MAAMsR,QAAQoF,GAAcA,EAAW1D,QAAQxL,IAAY,EAAIkP,EAAWC,IAAInP,IAEzFkO,EAAalT,WAAa,CACtB,CAAEC,KAAM9D,EAAK+D,UAAWC,KAAM,CAAC,CACnBC,SAAU,yBACVyF,SAAU,gCACVxF,KAAM,CACFC,MAAS,mCACTmG,YAAa,mBACbE,SAAU,UACVD,UAAW,WACX0N,UAAW,aACX1C,OAAQ,KACRrL,kBAAmB,mBACnBgO,qBAAsB,sBACtBlD,sBAAuB,wEACvBD,uBAAwB,+CAK5CgC,EAAatM,eAAiB,WAAc,MAAO,CAC/C,CAAE3G,KAAM9D,EAAK0K,YACb,CAAE5G,UAAMqD,EAAWtD,WAAY,CAAC,CAAEC,KAAM9D,EAAK8K,OAAQ9G,KAAM,CAACmI,QAEhE4K,EAAa1L,eAAiB,CAC1B8M,SAAU,CAAC,CAAErU,KAAM9D,EAAK4L,MAAO5H,KAAM,CAAC,qBACtC0T,UAAW,CAAC,CAAE5T,KAAM9D,EAAK4L,MAAO5H,KAAM,CAAC,2BACvCkT,kBAAmB,CAAC,CAAEpT,KAAM9D,EAAK4L,MAAO5H,KAAM,CAAC,mCAC/CmT,QAAS,CAAC,CAAErT,KAAM9D,EAAK6L,OAAQ7H,KAAM,CAAC,0BACtC4K,YAAa,CAAC,CAAE9K,KAAM9D,EAAK4L,QAC3B8C,GAAI,CAAC,CAAE5K,KAAM9D,EAAK4L,QAClBjF,SAAU,CAAC,CAAE7C,KAAM9D,EAAK4L,SAErBmL,EAhJsB,GA0J7BqB,EAAoB,CACpBtL,EACAzI,EACA0S,EACApL,EACA/H,EACAQ,GAEAiU,EAAK,CACLnB,kBAAmB,CAACnX,EAASuY,QAE7BC,EAAgC,WAChC,SAASA,KAeT,OAbAA,EAAe1U,WAAa,CACxB,CAAEC,KAAM9D,EAAKwY,SAAUxU,KAAM,CAAC,CAClB3E,QAAS+Y,EACTK,aAAcL,EACd5C,UAAW,CACP1U,EAAOwV,kBACP,CACIb,QAAStJ,EACTuM,SAAUL,QAK3BE,EAhBwB;;;;;;;;AA+BnClZ,EAAQ8M,0BAA4BA,EACpC9M,EAAQgF,QAAUA,EAClBhF,EAAQuE,cAAgBA,EACxBvE,EAAQ0X,aAAeA,EACvB1X,EAAQyN,YAAcA,EACtBzN,EAAQwN,kBAAoBA,EAC5BxN,EAAQsM,cAAgBA,EACxBtM,EAAQ4D,uBAAyBA,EACjC5D,EAAQ+E,oBAAsBA,EAC9B/E,EAAQkZ,eAAiBA,EACzBlZ,EAAQgZ,GAAKA,EAEbnX,OAAOuF,eAAepH,EAAS,aAAc,CAAEsD,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/keycodes'), require('@angular/core'), require('@angular/material/core'), require('@angular/common'), require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('rxjs'), require('rxjs/operators'), require('@angular/platform-browser/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/cdk/collections'), require('@angular/forms'), require('@angular/material/form-field')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/chips', ['exports', '@angular/cdk/keycodes', '@angular/core', '@angular/material/core', '@angular/common', '@angular/cdk/coercion', '@angular/cdk/platform', 'rxjs', 'rxjs/operators', '@angular/platform-browser/animations', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/cdk/collections', '@angular/forms', '@angular/material/form-field'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.chips = {}), global.ng.cdk.keycodes, global.ng.core, global.ng.material.core, global.ng.common, global.ng.cdk.coercion, global.ng.cdk.platform, global.rxjs, global.rxjs.operators, global.ng.platformBrowser.animations, global.ng.cdk.a11y, global.ng.cdk.bidi, global.ng.cdk.collections, global.ng.forms, global.ng.material.formField));\n}(this, (function (exports, keycodes, core, core$1, common, coercion, platform, rxjs, operators, animations, a11y, bidi, collections, forms, formField) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Event object emitted by MatChip when selected or deselected. */\n    var MatChipSelectionChange = /** @class */ (function () {\n        function MatChipSelectionChange(\n        /** Reference to the chip that emitted the event. */\n        source, \n        /** Whether the chip that emitted the event is selected. */\n        selected, \n        /** Whether the selection change was a result of a user interaction. */\n        isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.source = source;\n            this.selected = selected;\n            this.isUserInput = isUserInput;\n        }\n        return MatChipSelectionChange;\n    }());\n    // Boilerplate for applying mixins to MatChip.\n    /** @docs-private */\n    var MatChipBase = /** @class */ (function () {\n        function MatChipBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatChipBase;\n    }());\n    var _MatChipMixinBase = core$1.mixinTabIndex(core$1.mixinColor(core$1.mixinDisableRipple(core$1.mixinDisabled(MatChipBase)), 'primary'), -1);\n    /**\n     * Dummy directive to add CSS class to chip avatar.\n     * @docs-private\n     */\n    var MatChipAvatar = /** @class */ (function () {\n        function MatChipAvatar() {\n        }\n        MatChipAvatar.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-avatar, [matChipAvatar]',\n                        host: { 'class': 'mat-chip-avatar' }\n                    },] }\n        ];\n        return MatChipAvatar;\n    }());\n    /**\n     * Dummy directive to add CSS class to chip trailing icon.\n     * @docs-private\n     */\n    var MatChipTrailingIcon = /** @class */ (function () {\n        function MatChipTrailingIcon() {\n        }\n        MatChipTrailingIcon.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                        host: { 'class': 'mat-chip-trailing-icon' }\n                    },] }\n        ];\n        return MatChipTrailingIcon;\n    }());\n    /**\n     * Material design styled Chip component. Used inside the MatChipList component.\n     */\n    var MatChip = /** @class */ (function (_super) {\n        __extends(MatChip, _super);\n        function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, \n        // @breaking-change 8.0.0 `animationMode` parameter to become required.\n        animationMode, \n        // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n        _changeDetectorRef, tabIndex, \n        // @breaking-change 11.0.0 `_document` parameter to become required.\n        _document) {\n            var _this = _super.call(this, _elementRef) || this;\n            _this._elementRef = _elementRef;\n            _this._ngZone = _ngZone;\n            _this._changeDetectorRef = _changeDetectorRef;\n            /** Whether the chip has focus. */\n            _this._hasFocus = false;\n            /** Whether the chip list is selectable */\n            _this.chipListSelectable = true;\n            /** Whether the chip list is in multi-selection mode. */\n            _this._chipListMultiple = false;\n            _this._selected = false;\n            _this._selectable = true;\n            _this._removable = true;\n            /** Emits when the chip is focused. */\n            _this._onFocus = new rxjs.Subject();\n            /** Emits when the chip is blured. */\n            _this._onBlur = new rxjs.Subject();\n            /** Emitted when the chip is selected or deselected. */\n            _this.selectionChange = new core.EventEmitter();\n            /** Emitted when the chip is destroyed. */\n            _this.destroyed = new core.EventEmitter();\n            /** Emitted when a chip is to be removed. */\n            _this.removed = new core.EventEmitter();\n            _this._addHostClassName();\n            // Dynamically create the ripple target, append it within the chip, and use it as the\n            // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n            // the proper styles.\n            _this._chipRippleTarget = (_document || document).createElement('div');\n            _this._chipRippleTarget.classList.add('mat-chip-ripple');\n            _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n            _this._chipRipple = new core$1.RippleRenderer(_this, _ngZone, _this._chipRippleTarget, platform);\n            _this._chipRipple.setupTriggerEvents(_elementRef);\n            _this.rippleConfig = globalRippleOptions || {};\n            _this._animationsDisabled = animationMode === 'NoopAnimations';\n            _this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n            return _this;\n        }\n        Object.defineProperty(MatChip.prototype, \"rippleDisabled\", {\n            /**\n             * Whether ripples are disabled on interaction\n             * @docs-private\n             */\n            get: function () {\n                return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"selected\", {\n            /** Whether the chip is selected. */\n            get: function () { return this._selected; },\n            set: function (value) {\n                var coercedValue = coercion.coerceBooleanProperty(value);\n                if (coercedValue !== this._selected) {\n                    this._selected = coercedValue;\n                    this._dispatchSelectionChange();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"value\", {\n            /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n            get: function () {\n                return this._value !== undefined\n                    ? this._value\n                    : this._elementRef.nativeElement.textContent;\n            },\n            set: function (value) { this._value = value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"selectable\", {\n            /**\n             * Whether or not the chip is selectable. When a chip is not selectable,\n             * changes to its selected state are always ignored. By default a chip is\n             * selectable, and it becomes non-selectable if its parent chip list is\n             * not selectable.\n             */\n            get: function () { return this._selectable && this.chipListSelectable; },\n            set: function (value) {\n                this._selectable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"removable\", {\n            /**\n             * Determines whether or not the chip displays the remove styling and emits (removed) events.\n             */\n            get: function () { return this._removable; },\n            set: function (value) {\n                this._removable = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChip.prototype, \"ariaSelected\", {\n            /** The ARIA selected applied to the chip. */\n            get: function () {\n                // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n                // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n                return this.selectable && (this._chipListMultiple || this.selected) ?\n                    this.selected.toString() : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChip.prototype._addHostClassName = function () {\n            var basicChipAttrName = 'mat-basic-chip';\n            var element = this._elementRef.nativeElement;\n            if (element.hasAttribute(basicChipAttrName) ||\n                element.tagName.toLowerCase() === basicChipAttrName) {\n                element.classList.add(basicChipAttrName);\n                return;\n            }\n            else {\n                element.classList.add('mat-standard-chip');\n            }\n        };\n        MatChip.prototype.ngOnDestroy = function () {\n            this.destroyed.emit({ chip: this });\n            this._chipRipple._removeTriggerEvents();\n        };\n        /** Selects the chip. */\n        MatChip.prototype.select = function () {\n            if (!this._selected) {\n                this._selected = true;\n                this._dispatchSelectionChange();\n                this._markForCheck();\n            }\n        };\n        /** Deselects the chip. */\n        MatChip.prototype.deselect = function () {\n            if (this._selected) {\n                this._selected = false;\n                this._dispatchSelectionChange();\n                this._markForCheck();\n            }\n        };\n        /** Select this chip and emit selected event */\n        MatChip.prototype.selectViaInteraction = function () {\n            if (!this._selected) {\n                this._selected = true;\n                this._dispatchSelectionChange(true);\n                this._markForCheck();\n            }\n        };\n        /** Toggles the current selected state of this chip. */\n        MatChip.prototype.toggleSelected = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this._selected = !this.selected;\n            this._dispatchSelectionChange(isUserInput);\n            this._markForCheck();\n            return this.selected;\n        };\n        /** Allows for programmatic focusing of the chip. */\n        MatChip.prototype.focus = function () {\n            if (!this._hasFocus) {\n                this._elementRef.nativeElement.focus();\n                this._onFocus.next({ chip: this });\n            }\n            this._hasFocus = true;\n        };\n        /**\n         * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n         * BACKSPACE keys are pressed.\n         *\n         * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n         */\n        MatChip.prototype.remove = function () {\n            if (this.removable) {\n                this.removed.emit({ chip: this });\n            }\n        };\n        /** Handles click events on the chip. */\n        MatChip.prototype._handleClick = function (event) {\n            if (this.disabled) {\n                event.preventDefault();\n            }\n            else {\n                event.stopPropagation();\n            }\n        };\n        /** Handle custom key presses. */\n        MatChip.prototype._handleKeydown = function (event) {\n            if (this.disabled) {\n                return;\n            }\n            switch (event.keyCode) {\n                case keycodes.DELETE:\n                case keycodes.BACKSPACE:\n                    // If we are removable, remove the focused chip\n                    this.remove();\n                    // Always prevent so page navigation does not occur\n                    event.preventDefault();\n                    break;\n                case keycodes.SPACE:\n                    // If we are selectable, toggle the focused chip\n                    if (this.selectable) {\n                        this.toggleSelected(true);\n                    }\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                    break;\n            }\n        };\n        MatChip.prototype._blur = function () {\n            var _this = this;\n            // When animations are enabled, Angular may end up removing the chip from the DOM a little\n            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n            // that moves focus not the next item. To work around the issue, we defer marking the chip\n            // as not focused until the next time the zone stabilizes.\n            this._ngZone.onStable\n                .asObservable()\n                .pipe(operators.take(1))\n                .subscribe(function () {\n                _this._ngZone.run(function () {\n                    _this._hasFocus = false;\n                    _this._onBlur.next({ chip: _this });\n                });\n            });\n        };\n        MatChip.prototype._dispatchSelectionChange = function (isUserInput) {\n            if (isUserInput === void 0) { isUserInput = false; }\n            this.selectionChange.emit({\n                source: this,\n                isUserInput: isUserInput,\n                selected: this._selected\n            });\n        };\n        MatChip.prototype._markForCheck = function () {\n            // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n            if (this._changeDetectorRef) {\n                this._changeDetectorRef.markForCheck();\n            }\n        };\n        MatChip.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n                        inputs: ['color', 'disabled', 'disableRipple', 'tabIndex'],\n                        exportAs: 'matChip',\n                        host: {\n                            'class': 'mat-chip mat-focus-indicator',\n                            '[attr.tabindex]': 'disabled ? null : tabIndex',\n                            'role': 'option',\n                            '[class.mat-chip-selected]': 'selected',\n                            '[class.mat-chip-with-avatar]': 'avatar',\n                            '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                            '[class.mat-chip-disabled]': 'disabled',\n                            '[class._mat-animation-noopable]': '_animationsDisabled',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-selected]': 'ariaSelected',\n                            '(click)': '_handleClick($event)',\n                            '(keydown)': '_handleKeydown($event)',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChip.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.NgZone },\n            { type: platform.Platform },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [core$1.MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: core.ChangeDetectorRef },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        MatChip.propDecorators = {\n            avatar: [{ type: core.ContentChild, args: [MatChipAvatar,] }],\n            trailingIcon: [{ type: core.ContentChild, args: [MatChipTrailingIcon,] }],\n            removeIcon: [{ type: core.ContentChild, args: [core.forwardRef(function () { return MatChipRemove; }),] }],\n            selected: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            selectable: [{ type: core.Input }],\n            removable: [{ type: core.Input }],\n            selectionChange: [{ type: core.Output }],\n            destroyed: [{ type: core.Output }],\n            removed: [{ type: core.Output }]\n        };\n        return MatChip;\n    }(_MatChipMixinBase));\n    /**\n     * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n     * available at https://material.io/icons/#ic_cancel.\n     *\n     * Example:\n     *\n     *     `<mat-chip>\n     *       <mat-icon matChipRemove>cancel</mat-icon>\n     *     </mat-chip>`\n     *\n     * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n     * styles to properly center the icon within the chip.\n     */\n    var MatChipRemove = /** @class */ (function () {\n        function MatChipRemove(_parentChip, \n        // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n        elementRef) {\n            this._parentChip = _parentChip;\n            // @breaking-change 11.0.0 Remove null check for `elementRef`.\n            if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n                elementRef.nativeElement.setAttribute('type', 'button');\n            }\n        }\n        /** Calls the parent chip's public `remove()` method if applicable. */\n        MatChipRemove.prototype._handleClick = function (event) {\n            var parentChip = this._parentChip;\n            if (parentChip.removable && !parentChip.disabled) {\n                parentChip.remove();\n            }\n            // We need to stop event propagation because otherwise the event will bubble up to the\n            // form field and cause the `onContainerClick` method to be invoked. This method would then\n            // reset the focused chip that has been focused after chip removal. Usually the parent\n            // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n            // that the chip is being removed before the event bubbles up.\n            event.stopPropagation();\n        };\n        MatChipRemove.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matChipRemove]',\n                        host: {\n                            'class': 'mat-chip-remove mat-chip-trailing-icon',\n                            '(click)': '_handleClick($event)',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipRemove.ctorParameters = function () { return [\n            { type: MatChip },\n            { type: core.ElementRef }\n        ]; };\n        return MatChipRemove;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token to be used to override the default options for the chips module. */\n    var MAT_CHIPS_DEFAULT_OPTIONS = new core.InjectionToken('mat-chips-default-options');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Boilerplate for applying mixins to MatChipList.\n    /** @docs-private */\n    var MatChipListBase = /** @class */ (function () {\n        function MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n        /** @docs-private */\n        ngControl) {\n            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n            this._parentForm = _parentForm;\n            this._parentFormGroup = _parentFormGroup;\n            this.ngControl = ngControl;\n        }\n        return MatChipListBase;\n    }());\n    var _MatChipListMixinBase = core$1.mixinErrorState(MatChipListBase);\n    // Increasing integer for generating unique ids for chip-list components.\n    var nextUniqueId = 0;\n    /** Change event object that is emitted when the chip list value has changed. */\n    var MatChipListChange = /** @class */ (function () {\n        function MatChipListChange(\n        /** Chip list that emitted the event. */\n        source, \n        /** Value of the chip list when the event was emitted. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatChipListChange;\n    }());\n    /**\n     * A material design chips component (named ChipList for its similarity to the List component).\n     */\n    var MatChipList = /** @class */ (function (_super) {\n        __extends(MatChipList, _super);\n        function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n        /** @docs-private */\n        ngControl) {\n            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n            _this._elementRef = _elementRef;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._dir = _dir;\n            _this.ngControl = ngControl;\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            _this.controlType = 'mat-chip-list';\n            /**\n             * When a chip is destroyed, we store the index of the destroyed chip until the chips\n             * query list notifies about the update. This is necessary because we cannot determine an\n             * appropriate chip that should receive focus until the array of chips updated completely.\n             */\n            _this._lastDestroyedChipIndex = null;\n            /** Subject that emits when the component has been destroyed. */\n            _this._destroyed = new rxjs.Subject();\n            /** Uid of the chip list */\n            _this._uid = \"mat-chip-list-\" + nextUniqueId++;\n            /** Tab index for the chip list. */\n            _this._tabIndex = 0;\n            /**\n             * User defined tab index.\n             * When it is not null, use user defined tab index. Otherwise use _tabIndex\n             */\n            _this._userTabIndex = null;\n            /** Function when touched */\n            _this._onTouched = function () { };\n            /** Function when changed */\n            _this._onChange = function () { };\n            _this._multiple = false;\n            _this._compareWith = function (o1, o2) { return o1 === o2; };\n            _this._required = false;\n            _this._disabled = false;\n            /** Orientation of the chip list. */\n            _this.ariaOrientation = 'horizontal';\n            _this._selectable = true;\n            /** Event emitted when the selected chip list value has been changed by the user. */\n            _this.change = new core.EventEmitter();\n            /**\n             * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n             * to facilitate the two-way binding for the `value` input.\n             * @docs-private\n             */\n            _this.valueChange = new core.EventEmitter();\n            if (_this.ngControl) {\n                _this.ngControl.valueAccessor = _this;\n            }\n            return _this;\n        }\n        Object.defineProperty(MatChipList.prototype, \"selected\", {\n            /** The array of selected chips inside chip list. */\n            get: function () {\n                return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"role\", {\n            /** The ARIA role applied to the chip list. */\n            get: function () { return this.empty ? null : 'listbox'; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"multiple\", {\n            /** Whether the user should be allowed to select multiple chips. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                this._multiple = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"compareWith\", {\n            /**\n             * A function to compare the option values with the selected values. The first argument\n             * is a value from an option. The second is a value from the selection. A boolean\n             * should be returned.\n             */\n            get: function () { return this._compareWith; },\n            set: function (fn) {\n                this._compareWith = fn;\n                if (this._selectionModel) {\n                    // A different comparator means the selection could change.\n                    this._initializeSelection();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"value\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._value; },\n            set: function (value) {\n                this.writeValue(value);\n                this._value = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"id\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return this._chipInput ? this._chipInput.id : this._uid;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"required\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"placeholder\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n            },\n            set: function (value) {\n                this._placeholder = value;\n                this.stateChanges.next();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"focused\", {\n            /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n            get: function () {\n                return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"empty\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () {\n                return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"shouldLabelFloat\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return !this.empty || this.focused; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"disabled\", {\n            /**\n             * Implemented as part of MatFormFieldControl.\n             * @docs-private\n             */\n            get: function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._syncChipsState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"selectable\", {\n            /**\n             * Whether or not this chip list is selectable. When a chip list is not selectable,\n             * the selected states for all the chips inside the chip list are always ignored.\n             */\n            get: function () { return this._selectable; },\n            set: function (value) {\n                var _this = this;\n                this._selectable = coercion.coerceBooleanProperty(value);\n                if (this.chips) {\n                    this.chips.forEach(function (chip) { return chip.chipListSelectable = _this._selectable; });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"tabIndex\", {\n            set: function (value) {\n                this._userTabIndex = value;\n                this._tabIndex = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"chipSelectionChanges\", {\n            /** Combined stream of all of the child chips' selection change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.selectionChange; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"chipFocusChanges\", {\n            /** Combined stream of all of the child chips' focus change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onFocus; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"chipBlurChanges\", {\n            /** Combined stream of all of the child chips' blur change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onBlur; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipList.prototype, \"chipRemoveChanges\", {\n            /** Combined stream of all of the child chips' remove change events. */\n            get: function () {\n                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.destroyed; })));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipList.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._keyManager = new a11y.FocusKeyManager(this.chips)\n                .withWrap()\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n            if (this._dir) {\n                this._dir.change\n                    .pipe(operators.takeUntil(this._destroyed))\n                    .subscribe(function (dir) { return _this._keyManager.withHorizontalOrientation(dir); });\n            }\n            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {\n                _this._allowFocusEscape();\n            });\n            // When the list changes, re-subscribe\n            this.chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {\n                if (_this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(function () {\n                        _this._syncChipsState();\n                    });\n                }\n                _this._resetChips();\n                // Reset chips selected/deselected status\n                _this._initializeSelection();\n                // Check to see if we need to update our tab index\n                _this._updateTabIndex();\n                // Check to see if we have a destroyed chip and need to refocus\n                _this._updateFocusForDestroyedChips();\n                _this.stateChanges.next();\n            });\n        };\n        MatChipList.prototype.ngOnInit = function () {\n            this._selectionModel = new collections.SelectionModel(this.multiple, undefined, false);\n            this.stateChanges.next();\n        };\n        MatChipList.prototype.ngDoCheck = function () {\n            if (this.ngControl) {\n                // We need to re-evaluate this on every change detection cycle, because there are some\n                // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n                // that whatever logic is in here has to be super lean or we risk destroying the performance.\n                this.updateErrorState();\n                if (this.ngControl.disabled !== this._disabled) {\n                    this.disabled = !!this.ngControl.disabled;\n                }\n            }\n        };\n        MatChipList.prototype.ngOnDestroy = function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this.stateChanges.complete();\n            this._dropSubscriptions();\n        };\n        /** Associates an HTML input element with this chip list. */\n        MatChipList.prototype.registerInput = function (inputElement) {\n            this._chipInput = inputElement;\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipList.prototype.setDescribedByIds = function (ids) { this._ariaDescribedby = ids.join(' '); };\n        // Implemented as part of ControlValueAccessor.\n        MatChipList.prototype.writeValue = function (value) {\n            if (this.chips) {\n                this._setSelectionByValue(value, false);\n            }\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatChipList.prototype.registerOnChange = function (fn) {\n            this._onChange = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatChipList.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatChipList.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this.stateChanges.next();\n        };\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        MatChipList.prototype.onContainerClick = function (event) {\n            if (!this._originatesFromChip(event)) {\n                this.focus();\n            }\n        };\n        /**\n         * Focuses the first non-disabled chip in this chip list, or the associated input when there\n         * are no eligible chips.\n         */\n        MatChipList.prototype.focus = function (options) {\n            if (this.disabled) {\n                return;\n            }\n            // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n            // Focus on first element if there's no chipInput inside chip-list\n            if (this._chipInput && this._chipInput.focused) {\n                // do nothing\n            }\n            else if (this.chips.length > 0) {\n                this._keyManager.setFirstItemActive();\n                this.stateChanges.next();\n            }\n            else {\n                this._focusInput(options);\n                this.stateChanges.next();\n            }\n        };\n        /** Attempt to focus an input if we have one. */\n        MatChipList.prototype._focusInput = function (options) {\n            if (this._chipInput) {\n                this._chipInput.focus(options);\n            }\n        };\n        /**\n         * Pass events to the keyboard manager. Available here for tests.\n         */\n        MatChipList.prototype._keydown = function (event) {\n            var target = event.target;\n            // If they are on an empty input and hit backspace, focus the last chip\n            if (event.keyCode === keycodes.BACKSPACE && this._isInputEmpty(target)) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else if (target && target.classList.contains('mat-chip')) {\n                if (event.keyCode === keycodes.HOME) {\n                    this._keyManager.setFirstItemActive();\n                    event.preventDefault();\n                }\n                else if (event.keyCode === keycodes.END) {\n                    this._keyManager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    this._keyManager.onKeydown(event);\n                }\n                this.stateChanges.next();\n            }\n        };\n        /**\n         * Check the tab index as you should not be allowed to focus an empty list.\n         */\n        MatChipList.prototype._updateTabIndex = function () {\n            // If we have 0 chips, we should not allow keyboard focus\n            this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n        };\n        /**\n         * If the amount of chips changed, we need to update the\n         * key manager state and focus the next closest chip.\n         */\n        MatChipList.prototype._updateFocusForDestroyedChips = function () {\n            // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n            if (this._lastDestroyedChipIndex != null) {\n                if (this.chips.length) {\n                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                    this._keyManager.setActiveItem(newChipIndex);\n                }\n                else {\n                    this.focus();\n                }\n            }\n            this._lastDestroyedChipIndex = null;\n        };\n        /**\n         * Utility to ensure all indexes are valid.\n         *\n         * @param index The index to be checked.\n         * @returns True if the index is valid for our list of chips.\n         */\n        MatChipList.prototype._isValidIndex = function (index) {\n            return index >= 0 && index < this.chips.length;\n        };\n        MatChipList.prototype._isInputEmpty = function (element) {\n            if (element && element.nodeName.toLowerCase() === 'input') {\n                var input = element;\n                return !input.value;\n            }\n            return false;\n        };\n        MatChipList.prototype._setSelectionByValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            this._clearSelection();\n            this.chips.forEach(function (chip) { return chip.deselect(); });\n            if (Array.isArray(value)) {\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });\n                this._sortValues();\n            }\n            else {\n                var correspondingChip = this._selectValue(value, isUserInput);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what chip the user interacted with last.\n                if (correspondingChip) {\n                    if (isUserInput) {\n                        this._keyManager.setActiveItem(correspondingChip);\n                    }\n                }\n            }\n        };\n        /**\n         * Finds and selects the chip based on its value.\n         * @returns Chip that has the corresponding value.\n         */\n        MatChipList.prototype._selectValue = function (value, isUserInput) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = true; }\n            var correspondingChip = this.chips.find(function (chip) {\n                return chip.value != null && _this._compareWith(chip.value, value);\n            });\n            if (correspondingChip) {\n                isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n                this._selectionModel.select(correspondingChip);\n            }\n            return correspondingChip;\n        };\n        MatChipList.prototype._initializeSelection = function () {\n            var _this = this;\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(function () {\n                if (_this.ngControl || _this._value) {\n                    _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value, false);\n                    _this.stateChanges.next();\n                }\n            });\n        };\n        /**\n         * Deselects every chip in the list.\n         * @param skip Chip that should not be deselected.\n         */\n        MatChipList.prototype._clearSelection = function (skip) {\n            this._selectionModel.clear();\n            this.chips.forEach(function (chip) {\n                if (chip !== skip) {\n                    chip.deselect();\n                }\n            });\n            this.stateChanges.next();\n        };\n        /**\n         * Sorts the model values, ensuring that they keep the same\n         * order that they have in the panel.\n         */\n        MatChipList.prototype._sortValues = function () {\n            var _this = this;\n            if (this._multiple) {\n                this._selectionModel.clear();\n                this.chips.forEach(function (chip) {\n                    if (chip.selected) {\n                        _this._selectionModel.select(chip);\n                    }\n                });\n                this.stateChanges.next();\n            }\n        };\n        /** Emits change event to set the model value. */\n        MatChipList.prototype._propagateChanges = function (fallbackValue) {\n            var valueToEmit = null;\n            if (Array.isArray(this.selected)) {\n                valueToEmit = this.selected.map(function (chip) { return chip.value; });\n            }\n            else {\n                valueToEmit = this.selected ? this.selected.value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.change.emit(new MatChipListChange(this, valueToEmit));\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this._changeDetectorRef.markForCheck();\n        };\n        /** When blurred, mark the field as touched when focus moved outside the chip list. */\n        MatChipList.prototype._blur = function () {\n            var _this = this;\n            if (!this._hasFocusedChip()) {\n                this._keyManager.setActiveItem(-1);\n            }\n            if (!this.disabled) {\n                if (this._chipInput) {\n                    // If there's a chip input, we should check whether the focus moved to chip input.\n                    // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                    // to chip input, do nothing.\n                    // Timeout is needed to wait for the focus() event trigger on chip input.\n                    setTimeout(function () {\n                        if (!_this.focused) {\n                            _this._markAsTouched();\n                        }\n                    });\n                }\n                else {\n                    // If there's no chip input, then mark the field as touched.\n                    this._markAsTouched();\n                }\n            }\n        };\n        /** Mark the field as touched */\n        MatChipList.prototype._markAsTouched = function () {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        };\n        /**\n         * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n         * user to tab out of it. This prevents the list from capturing focus and redirecting\n         * it back to the first chip, creating a focus trap, if it user tries to tab away.\n         */\n        MatChipList.prototype._allowFocusEscape = function () {\n            var _this = this;\n            if (this._tabIndex !== -1) {\n                this._tabIndex = -1;\n                setTimeout(function () {\n                    _this._tabIndex = _this._userTabIndex || 0;\n                    _this._changeDetectorRef.markForCheck();\n                });\n            }\n        };\n        MatChipList.prototype._resetChips = function () {\n            this._dropSubscriptions();\n            this._listenToChipsFocus();\n            this._listenToChipsSelection();\n            this._listenToChipsRemoved();\n        };\n        MatChipList.prototype._dropSubscriptions = function () {\n            if (this._chipFocusSubscription) {\n                this._chipFocusSubscription.unsubscribe();\n                this._chipFocusSubscription = null;\n            }\n            if (this._chipBlurSubscription) {\n                this._chipBlurSubscription.unsubscribe();\n                this._chipBlurSubscription = null;\n            }\n            if (this._chipSelectionSubscription) {\n                this._chipSelectionSubscription.unsubscribe();\n                this._chipSelectionSubscription = null;\n            }\n            if (this._chipRemoveSubscription) {\n                this._chipRemoveSubscription.unsubscribe();\n                this._chipRemoveSubscription = null;\n            }\n        };\n        /** Listens to user-generated selection events on each chip. */\n        MatChipList.prototype._listenToChipsSelection = function () {\n            var _this = this;\n            this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {\n                event.source.selected\n                    ? _this._selectionModel.select(event.source)\n                    : _this._selectionModel.deselect(event.source);\n                // For single selection chip list, make sure the deselected value is unselected.\n                if (!_this.multiple) {\n                    _this.chips.forEach(function (chip) {\n                        if (!_this._selectionModel.isSelected(chip) && chip.selected) {\n                            chip.deselect();\n                        }\n                    });\n                }\n                if (event.isUserInput) {\n                    _this._propagateChanges();\n                }\n            });\n        };\n        /** Listens to user-generated selection events on each chip. */\n        MatChipList.prototype._listenToChipsFocus = function () {\n            var _this = this;\n            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {\n                var chipIndex = _this.chips.toArray().indexOf(event.chip);\n                if (_this._isValidIndex(chipIndex)) {\n                    _this._keyManager.updateActiveItem(chipIndex);\n                }\n                _this.stateChanges.next();\n            });\n            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {\n                _this._blur();\n                _this.stateChanges.next();\n            });\n        };\n        MatChipList.prototype._listenToChipsRemoved = function () {\n            var _this = this;\n            this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {\n                var chip = event.chip;\n                var chipIndex = _this.chips.toArray().indexOf(event.chip);\n                // In case the chip that will be removed is currently focused, we temporarily store\n                // the index in order to be able to determine an appropriate sibling chip that will\n                // receive focus.\n                if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\n                    _this._lastDestroyedChipIndex = chipIndex;\n                }\n            });\n        };\n        /** Checks whether an event comes from inside a chip element. */\n        MatChipList.prototype._originatesFromChip = function (event) {\n            var currentElement = event.target;\n            while (currentElement && currentElement !== this._elementRef.nativeElement) {\n                if (currentElement.classList.contains('mat-chip')) {\n                    return true;\n                }\n                currentElement = currentElement.parentElement;\n            }\n            return false;\n        };\n        /** Checks whether any of the chips is focused. */\n        MatChipList.prototype._hasFocusedChip = function () {\n            return this.chips.some(function (chip) { return chip._hasFocus; });\n        };\n        /** Syncs the list's state with the individual chips. */\n        MatChipList.prototype._syncChipsState = function () {\n            var _this = this;\n            if (this.chips) {\n                this.chips.forEach(function (chip) {\n                    chip.disabled = _this._disabled;\n                    chip._chipListMultiple = _this.multiple;\n                });\n            }\n        };\n        MatChipList.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-chip-list',\n                        template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n                        exportAs: 'matChipList',\n                        host: {\n                            '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                            '[attr.aria-describedby]': '_ariaDescribedby || null',\n                            '[attr.aria-required]': 'role ? required : null',\n                            '[attr.aria-disabled]': 'disabled.toString()',\n                            '[attr.aria-invalid]': 'errorState',\n                            '[attr.aria-multiselectable]': 'multiple',\n                            '[attr.role]': 'role',\n                            '[class.mat-chip-list-disabled]': 'disabled',\n                            '[class.mat-chip-list-invalid]': 'errorState',\n                            '[class.mat-chip-list-required]': 'required',\n                            '[attr.aria-orientation]': 'ariaOrientation',\n                            'class': 'mat-chip-list',\n                            '(focus)': 'focus()',\n                            '(blur)': '_blur()',\n                            '(keydown)': '_keydown($event)',\n                            '[id]': '_uid',\n                        },\n                        providers: [{ provide: formField.MatFormFieldControl, useExisting: MatChipList }],\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatChipList.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: forms.NgForm, decorators: [{ type: core.Optional }] },\n            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },\n            { type: core$1.ErrorStateMatcher },\n            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] }\n        ]; };\n        MatChipList.propDecorators = {\n            errorStateMatcher: [{ type: core.Input }],\n            multiple: [{ type: core.Input }],\n            compareWith: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            placeholder: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            ariaOrientation: [{ type: core.Input, args: ['aria-orientation',] }],\n            selectable: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            valueChange: [{ type: core.Output }],\n            chips: [{ type: core.ContentChildren, args: [MatChip, {\n                            // We need to use `descendants: true`, because Ivy will no longer match\n                            // indirect descendants if it's left as false.\n                            descendants: true\n                        },] }]\n        };\n        return MatChipList;\n    }(_MatChipListMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Increasing integer for generating unique ids.\n    var nextUniqueId$1 = 0;\n    /**\n     * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n     * May be placed inside or outside of an `<mat-chip-list>`.\n     */\n    var MatChipInput = /** @class */ (function () {\n        function MatChipInput(_elementRef, _defaultOptions) {\n            this._elementRef = _elementRef;\n            this._defaultOptions = _defaultOptions;\n            /** Whether the control is focused. */\n            this.focused = false;\n            this._addOnBlur = false;\n            /**\n             * The list of key codes that will trigger a chipEnd event.\n             *\n             * Defaults to `[ENTER]`.\n             */\n            this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n            /** Emitted when a chip is to be added. */\n            this.chipEnd = new core.EventEmitter();\n            /** The input's placeholder text. */\n            this.placeholder = '';\n            /** Unique id for the input. */\n            this.id = \"mat-chip-list-input-\" + nextUniqueId$1++;\n            this._disabled = false;\n            this._inputElement = this._elementRef.nativeElement;\n        }\n        Object.defineProperty(MatChipInput.prototype, \"chipList\", {\n            /** Register input for chip list */\n            set: function (value) {\n                if (value) {\n                    this._chipList = value;\n                    this._chipList.registerInput(this);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"addOnBlur\", {\n            /**\n             * Whether or not the chipEnd event will be emitted when the input is blurred.\n             */\n            get: function () { return this._addOnBlur; },\n            set: function (value) { this._addOnBlur = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"disabled\", {\n            /** Whether the input is disabled. */\n            get: function () { return this._disabled || (this._chipList && this._chipList.disabled); },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatChipInput.prototype, \"empty\", {\n            /** Whether the input is empty. */\n            get: function () { return !this._inputElement.value; },\n            enumerable: true,\n            configurable: true\n        });\n        MatChipInput.prototype.ngOnChanges = function () {\n            this._chipList.stateChanges.next();\n        };\n        /** Utility method to make host definition/tests more clear. */\n        MatChipInput.prototype._keydown = function (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event && event.keyCode === keycodes.TAB && !keycodes.hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            this._emitChipEnd(event);\n        };\n        /** Checks to see if the blur should emit the (chipEnd) event. */\n        MatChipInput.prototype._blur = function () {\n            if (this.addOnBlur) {\n                this._emitChipEnd();\n            }\n            this.focused = false;\n            // Blur the chip list if it is not focused\n            if (!this._chipList.focused) {\n                this._chipList._blur();\n            }\n            this._chipList.stateChanges.next();\n        };\n        MatChipInput.prototype._focus = function () {\n            this.focused = true;\n            this._chipList.stateChanges.next();\n        };\n        /** Checks to see if the (chipEnd) event needs to be emitted. */\n        MatChipInput.prototype._emitChipEnd = function (event) {\n            if (!this._inputElement.value && !!event) {\n                this._chipList._keydown(event);\n            }\n            if (!event || this._isSeparatorKey(event)) {\n                this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n                if (event) {\n                    event.preventDefault();\n                }\n            }\n        };\n        MatChipInput.prototype._onInput = function () {\n            // Let chip list know whenever the value changes.\n            this._chipList.stateChanges.next();\n        };\n        /** Focuses the input. */\n        MatChipInput.prototype.focus = function (options) {\n            this._inputElement.focus(options);\n        };\n        /** Checks whether a keycode is one of the configured separators. */\n        MatChipInput.prototype._isSeparatorKey = function (event) {\n            if (keycodes.hasModifierKey(event)) {\n                return false;\n            }\n            var separators = this.separatorKeyCodes;\n            var keyCode = event.keyCode;\n            return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n        };\n        MatChipInput.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'input[matChipInputFor]',\n                        exportAs: 'matChipInput, matChipInputFor',\n                        host: {\n                            'class': 'mat-chip-input mat-input-element',\n                            '(keydown)': '_keydown($event)',\n                            '(blur)': '_blur()',\n                            '(focus)': '_focus()',\n                            '(input)': '_onInput()',\n                            '[id]': 'id',\n                            '[attr.disabled]': 'disabled || null',\n                            '[attr.placeholder]': 'placeholder || null',\n                            '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                            '[attr.aria-required]': '_chipList && _chipList.required || null',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatChipInput.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatChipInput.propDecorators = {\n            chipList: [{ type: core.Input, args: ['matChipInputFor',] }],\n            addOnBlur: [{ type: core.Input, args: ['matChipInputAddOnBlur',] }],\n            separatorKeyCodes: [{ type: core.Input, args: ['matChipInputSeparatorKeyCodes',] }],\n            chipEnd: [{ type: core.Output, args: ['matChipInputTokenEnd',] }],\n            placeholder: [{ type: core.Input }],\n            id: [{ type: core.Input }],\n            disabled: [{ type: core.Input }]\n        };\n        return MatChipInput;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CHIP_DECLARATIONS = [\n        MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon,\n    ];\n    var Éµ0 = {\n        separatorKeyCodes: [keycodes.ENTER]\n    };\n    var MatChipsModule = /** @class */ (function () {\n        function MatChipsModule() {\n        }\n        MatChipsModule.decorators = [\n            { type: core.NgModule, args: [{\n                        exports: CHIP_DECLARATIONS,\n                        declarations: CHIP_DECLARATIONS,\n                        providers: [\n                            core$1.ErrorStateMatcher,\n                            {\n                                provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                                useValue: Éµ0\n                            }\n                        ]\n                    },] }\n        ];\n        return MatChipsModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_CHIPS_DEFAULT_OPTIONS = MAT_CHIPS_DEFAULT_OPTIONS;\n    exports.MatChip = MatChip;\n    exports.MatChipAvatar = MatChipAvatar;\n    exports.MatChipInput = MatChipInput;\n    exports.MatChipList = MatChipList;\n    exports.MatChipListChange = MatChipListChange;\n    exports.MatChipRemove = MatChipRemove;\n    exports.MatChipSelectionChange = MatChipSelectionChange;\n    exports.MatChipTrailingIcon = MatChipTrailingIcon;\n    exports.MatChipsModule = MatChipsModule;\n    exports.Éµ0 = Éµ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-chips.umd.js.map\n"]}