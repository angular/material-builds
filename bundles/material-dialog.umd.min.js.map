{"version":3,"sources":["src/material/material-dialog.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","dialog","cdk","overlay","portal","core","bidi","common","rxjs","operators","animations","a11y","keycodes","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","trigger","state","style","opacity","transform","transition","animate","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","EventEmitter","attachDomPortal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","_ariaLabelledBy","__extends","__","constructor","create","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_getFocusTrap","focusInitialElement","nativeElement","focus","_trapFocus","focusInitialElementWhenReady","_restoreFocus","toFocus","activeElement","element","body","contains","_focusTrap","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","decorators","type","Component","args","selector","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","Default","host","class","tabindex","aria-modal","[attr.id]","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","styles","ctorParameters","ElementRef","FocusTrapFactory","ChangeDetectorRef","undefined","Optional","Inject","DOCUMENT","propDecorators","ViewChild","CdkPortalOutlet","static","BasePortalOutlet","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","Subject","_afterClosed","_beforeClosed","_id","pipe","filter","phaseName","take","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","close","backdropClick","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","InjectionToken","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","openDialogs","_afterAllClosed","startWith","_scrollStrategy","defineProperty","get","enumerable","configurable","parent","open","componentOrTemplateRef","config","_applyConfigDefaults","defaultOptions","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","OverlayConfig","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","injector","Injector","viewContainerRef","providers","useValue","containerPortal","ComponentPortal","componentFactoryResolver","attach","instance","TemplateRef","TemplatePortal","$implicit","_createInjector","contentRef","userInjector","Directionality","value","change","of","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","Injectable","Location","SkipSelf","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","Directive","exportAs","(click)","[attr.type]","Input","_matDialogClose","MatDialogTitle","_dialogRef","container","[id]","MatDialogContent","MatDialogActions","classList","MatDialogModule","NgModule","imports","OverlayModule","PortalModule","MatCommonModule","declarations","entryComponents","MAT_DIALOG_SCROLL_STRATEGY_FACTORY"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/bidi'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/animations'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/dialog', ['exports', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/core', '@angular/material/core', '@angular/cdk/bidi', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/animations', '@angular/cdk/a11y', '@angular/cdk/keycodes'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.dialog = {}), global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.core, global.ng.material.core, global.ng.cdk.bidi, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.animations, global.ng.cdk.a11y, global.ng.cdk.keycodes));\n}(this, (function (exports, overlay, portal, core, core$1, bidi, common, rxjs, operators, animations, a11y, keycodes) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Configuration for opening a modal dialog with the MatDialog service.\n     */\n    var MatDialogConfig = /** @class */ (function () {\n        function MatDialogConfig() {\n            /** The ARIA role of the dialog element. */\n            this.role = 'dialog';\n            /** Custom class for the overlay pane. */\n            this.panelClass = '';\n            /** Whether the dialog has a backdrop. */\n            this.hasBackdrop = true;\n            /** Custom class for the backdrop. */\n            this.backdropClass = '';\n            /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n            this.disableClose = false;\n            /** Width of the dialog. */\n            this.width = '';\n            /** Height of the dialog. */\n            this.height = '';\n            /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n            this.maxWidth = '80vw';\n            /** Data being injected into the child component. */\n            this.data = null;\n            /** ID of the element that describes the dialog. */\n            this.ariaDescribedBy = null;\n            /** ID of the element that labels the dialog. */\n            this.ariaLabelledBy = null;\n            /** Aria label to assign to the dialog element. */\n            this.ariaLabel = null;\n            /** Whether the dialog should focus the first focusable element on open. */\n            this.autoFocus = true;\n            /**\n             * Whether the dialog should restore focus to the\n             * previously-focused element, after it's closed.\n             */\n            this.restoreFocus = true;\n            /**\n             * Whether the dialog should close when the user goes backwards/forwards in history.\n             * Note that this usually doesn't include clicking on links (unless the user is using\n             * the `HashLocationStrategy`).\n             */\n            this.closeOnNavigation = true;\n            // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n        }\n        return MatDialogConfig;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by MatDialog.\n     * @docs-private\n     */\n    var matDialogAnimations = {\n        /** Animation that is applied on the dialog container by defalt. */\n        dialogContainer: animations.trigger('dialogContainer', [\n            // Note: The `enter` animation transitions to `transform: none`, because for some reason\n            // specifying the transform explicitly, causes IE both to blur the dialog content and\n            // decimate the animation performance. Leaving it as `none` solves both issues.\n            animations.state('void, exit', animations.style({ opacity: 0, transform: 'scale(0.7)' })),\n            animations.state('enter', animations.style({ transform: 'none' })),\n            animations.transition('* => enter', animations.animate('150ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ transform: 'none', opacity: 1 }))),\n            animations.transition('* => void, * => exit', animations.animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', animations.style({ opacity: 0 }))),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Throws an exception for the case when a ComponentPortal is\n     * attached to a DomPortalOutlet without an origin.\n     * @docs-private\n     */\n    function throwMatDialogContentAlreadyAttachedError() {\n        throw Error('Attempting to attach dialog content after content is already attached');\n    }\n    /**\n     * Internal component that wraps user-provided dialog content.\n     * Animation is based on https://material.io/guidelines/motion/choreography.html.\n     * @docs-private\n     */\n    var MatDialogContainer = /** @class */ (function (_super) {\n        __extends(MatDialogContainer, _super);\n        function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n        /** The dialog configuration. */\n        _config) {\n            var _this = _super.call(this) || this;\n            _this._elementRef = _elementRef;\n            _this._focusTrapFactory = _focusTrapFactory;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._config = _config;\n            /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n            _this._elementFocusedBeforeDialogWasOpened = null;\n            /** State of the dialog animation. */\n            _this._state = 'enter';\n            /** Emits when an animation state changes. */\n            _this._animationStateChanged = new core.EventEmitter();\n            /**\n             * Attaches a DOM portal to the dialog container.\n             * @param portal Portal to be attached.\n             * @deprecated To be turned into a method.\n             * @breaking-change 10.0.0\n             */\n            _this.attachDomPortal = function (portal) {\n                if (_this._portalOutlet.hasAttached()) {\n                    throwMatDialogContentAlreadyAttachedError();\n                }\n                _this._savePreviouslyFocusedElement();\n                return _this._portalOutlet.attachDomPortal(portal);\n            };\n            _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n            _this._document = _document;\n            return _this;\n        }\n        /**\n         * Attach a ComponentPortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachComponentPortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n        /**\n         * Attach a TemplatePortal as content to this dialog container.\n         * @param portal Portal to be attached as the dialog content.\n         */\n        MatDialogContainer.prototype.attachTemplatePortal = function (portal) {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n        /** Moves focus back into the dialog if it was moved out. */\n        MatDialogContainer.prototype._recaptureFocus = function () {\n            if (!this._containsFocus()) {\n                var focusWasTrapped = this._getFocusTrap().focusInitialElement();\n                if (!focusWasTrapped) {\n                    this._elementRef.nativeElement.focus();\n                }\n            }\n        };\n        /** Moves the focus inside the focus trap. */\n        MatDialogContainer.prototype._trapFocus = function () {\n            // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n            // ready in instances where change detection has to run first. To deal with this, we simply\n            // wait for the microtask queue to be empty.\n            if (this._config.autoFocus) {\n                this._getFocusTrap().focusInitialElementWhenReady();\n            }\n            else if (!this._containsFocus()) {\n                // Otherwise ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                this._elementRef.nativeElement.focus();\n            }\n        };\n        /** Restores focus to the element that was focused before the dialog opened. */\n        MatDialogContainer.prototype._restoreFocus = function () {\n            var toFocus = this._elementFocusedBeforeDialogWasOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n                var activeElement = this._document.activeElement;\n                var element = this._elementRef.nativeElement;\n                // Make sure that focus is still inside the dialog or is on the body (usually because a\n                // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n                // the consumer moved it themselves before the animation was done, in which case we shouldn't\n                // do anything.\n                if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                    element.contains(activeElement)) {\n                    toFocus.focus();\n                }\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        };\n        /** Saves a reference to the element that was focused before the dialog was opened. */\n        MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n            var _this = this;\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n                // Note that there is no focus method when rendering on the server.\n                if (this._elementRef.nativeElement.focus) {\n                    // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                    // opening multiple dialogs at the same time. Needs to be async, because the element\n                    // may not be focusable immediately.\n                    Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });\n                }\n            }\n        };\n        /** Returns whether focus is inside the dialog. */\n        MatDialogContainer.prototype._containsFocus = function () {\n            var element = this._elementRef.nativeElement;\n            var activeElement = this._document.activeElement;\n            return element === activeElement || element.contains(activeElement);\n        };\n        /** Gets the focus trap associated with the dialog. */\n        MatDialogContainer.prototype._getFocusTrap = function () {\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            }\n            return this._focusTrap;\n        };\n        /** Callback, invoked whenever an animation on the host completes. */\n        MatDialogContainer.prototype._onAnimationDone = function (event) {\n            if (event.toState === 'enter') {\n                this._trapFocus();\n            }\n            else if (event.toState === 'exit') {\n                this._restoreFocus();\n            }\n            this._animationStateChanged.emit(event);\n        };\n        /** Callback, invoked when an animation on the host starts. */\n        MatDialogContainer.prototype._onAnimationStart = function (event) {\n            this._animationStateChanged.emit(event);\n        };\n        /** Starts the dialog exit animation. */\n        MatDialogContainer.prototype._startExitAnimation = function () {\n            this._state = 'exit';\n            // Mark the container for check so it can react if the\n            // view container is using OnPush change detection.\n            this._changeDetectorRef.markForCheck();\n        };\n        MatDialogContainer.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-dialog-container',\n                        template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                        // tslint:disable-next-line:validate-decorators\n                        changeDetection: core.ChangeDetectionStrategy.Default,\n                        animations: [matDialogAnimations.dialogContainer],\n                        host: {\n                            'class': 'mat-dialog-container',\n                            'tabindex': '-1',\n                            'aria-modal': 'true',\n                            '[attr.id]': '_id',\n                            '[attr.role]': '_config.role',\n                            '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                            '[attr.aria-label]': '_config.ariaLabel',\n                            '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                            '[@dialogContainer]': '_state',\n                            '(@dialogContainer.start)': '_onAnimationStart($event)',\n                            '(@dialogContainer.done)': '_onAnimationDone($event)',\n                        },\n                        styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatDialogContainer.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: a11y.FocusTrapFactory },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: MatDialogConfig }\n        ]; };\n        MatDialogContainer.propDecorators = {\n            _portalOutlet: [{ type: core.ViewChild, args: [portal.CdkPortalOutlet, { static: true },] }]\n        };\n        return MatDialogContainer;\n    }(portal.BasePortalOutlet));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // TODO(jelbourn): resizing\n    // Counter for unique dialog ids.\n    var uniqueId = 0;\n    /**\n     * Reference to a dialog opened via the MatDialog service.\n     */\n    var MatDialogRef = /** @class */ (function () {\n        function MatDialogRef(_overlayRef, _containerInstance, id) {\n            var _this = this;\n            if (id === void 0) { id = \"mat-dialog-\" + uniqueId++; }\n            this._overlayRef = _overlayRef;\n            this._containerInstance = _containerInstance;\n            this.id = id;\n            /** Whether the user is allowed to close the dialog. */\n            this.disableClose = this._containerInstance._config.disableClose;\n            /** Subject for notifying the user that the dialog has finished opening. */\n            this._afterOpened = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has finished closing. */\n            this._afterClosed = new rxjs.Subject();\n            /** Subject for notifying the user that the dialog has started closing. */\n            this._beforeClosed = new rxjs.Subject();\n            /** Current state of the dialog. */\n            this._state = 0 /* OPEN */;\n            // Pass the id along to the container.\n            _containerInstance._id = id;\n            // Emit when opening animation completes\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'enter'; }), operators.take(1))\n                .subscribe(function () {\n                _this._afterOpened.next();\n                _this._afterOpened.complete();\n            });\n            // Dispose overlay when closing animation is complete\n            _containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'exit'; }), operators.take(1)).subscribe(function () {\n                clearTimeout(_this._closeFallbackTimeout);\n                _this._finishDialogClose();\n            });\n            _overlayRef.detachments().subscribe(function () {\n                _this._beforeClosed.next(_this._result);\n                _this._beforeClosed.complete();\n                _this._afterClosed.next(_this._result);\n                _this._afterClosed.complete();\n                _this.componentInstance = null;\n                _this._overlayRef.dispose();\n            });\n            _overlayRef.keydownEvents()\n                .pipe(operators.filter(function (event) {\n                return event.keyCode === keycodes.ESCAPE && !_this.disableClose && !keycodes.hasModifierKey(event);\n            }))\n                .subscribe(function (event) {\n                event.preventDefault();\n                _this.close();\n            });\n            _overlayRef.backdropClick().subscribe(function () {\n                if (_this.disableClose) {\n                    _this._containerInstance._recaptureFocus();\n                }\n                else {\n                    _this.close();\n                }\n            });\n        }\n        /**\n         * Close the dialog.\n         * @param dialogResult Optional result to return to the dialog opener.\n         */\n        MatDialogRef.prototype.close = function (dialogResult) {\n            var _this = this;\n            this._result = dialogResult;\n            // Transition the backdrop in parallel to the dialog.\n            this._containerInstance._animationStateChanged.pipe(operators.filter(function (event) { return event.phaseName === 'start'; }), operators.take(1))\n                .subscribe(function (event) {\n                _this._beforeClosed.next(dialogResult);\n                _this._beforeClosed.complete();\n                _this._overlayRef.detachBackdrop();\n                // The logic that disposes of the overlay depends on the exit animation completing, however\n                // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n                // timeout which will clean everything up if the animation hasn't fired within the specified\n                // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n                // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n                _this._closeFallbackTimeout = setTimeout(function () { return _this._finishDialogClose(); }, event.totalTime + 100);\n            });\n            this._containerInstance._startExitAnimation();\n            this._state = 1 /* CLOSING */;\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished opening.\n         */\n        MatDialogRef.prototype.afterOpened = function () {\n            return this._afterOpened.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog is finished closing.\n         */\n        MatDialogRef.prototype.afterClosed = function () {\n            return this._afterClosed.asObservable();\n        };\n        /**\n         * Gets an observable that is notified when the dialog has started closing.\n         */\n        MatDialogRef.prototype.beforeClosed = function () {\n            return this._beforeClosed.asObservable();\n        };\n        /**\n         * Gets an observable that emits when the overlay's backdrop has been clicked.\n         */\n        MatDialogRef.prototype.backdropClick = function () {\n            return this._overlayRef.backdropClick();\n        };\n        /**\n         * Gets an observable that emits when keydown events are targeted on the overlay.\n         */\n        MatDialogRef.prototype.keydownEvents = function () {\n            return this._overlayRef.keydownEvents();\n        };\n        /**\n         * Updates the dialog's position.\n         * @param position New dialog position.\n         */\n        MatDialogRef.prototype.updatePosition = function (position) {\n            var strategy = this._getPositionStrategy();\n            if (position && (position.left || position.right)) {\n                position.left ? strategy.left(position.left) : strategy.right(position.right);\n            }\n            else {\n                strategy.centerHorizontally();\n            }\n            if (position && (position.top || position.bottom)) {\n                position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n            }\n            else {\n                strategy.centerVertically();\n            }\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /**\n         * Updates the dialog's width and height.\n         * @param width New width of the dialog.\n         * @param height New height of the dialog.\n         */\n        MatDialogRef.prototype.updateSize = function (width, height) {\n            if (width === void 0) { width = ''; }\n            if (height === void 0) { height = ''; }\n            this._getPositionStrategy().width(width).height(height);\n            this._overlayRef.updatePosition();\n            return this;\n        };\n        /** Add a CSS class or an array of classes to the overlay pane. */\n        MatDialogRef.prototype.addPanelClass = function (classes) {\n            this._overlayRef.addPanelClass(classes);\n            return this;\n        };\n        /** Remove a CSS class or an array of classes from the overlay pane. */\n        MatDialogRef.prototype.removePanelClass = function (classes) {\n            this._overlayRef.removePanelClass(classes);\n            return this;\n        };\n        /** Gets the current state of the dialog's lifecycle. */\n        MatDialogRef.prototype.getState = function () {\n            return this._state;\n        };\n        /**\n         * Finishes the dialog close by updating the state of the dialog\n         * and disposing the overlay.\n         */\n        MatDialogRef.prototype._finishDialogClose = function () {\n            this._state = 2 /* CLOSED */;\n            this._overlayRef.dispose();\n        };\n        /** Fetches the position strategy object from the overlay ref. */\n        MatDialogRef.prototype._getPositionStrategy = function () {\n            return this._overlayRef.getConfig().positionStrategy;\n        };\n        return MatDialogRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Injection token that can be used to access the data that was passed in to a dialog. */\n    var MAT_DIALOG_DATA = new core.InjectionToken('MatDialogData');\n    /** Injection token that can be used to specify default dialog options. */\n    var MAT_DIALOG_DEFAULT_OPTIONS = new core.InjectionToken('mat-dialog-default-options');\n    /** Injection token that determines the scroll handling while the dialog is open. */\n    var MAT_DIALOG_SCROLL_STRATEGY = new core.InjectionToken('mat-dialog-scroll-strategy');\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.block(); };\n    }\n    /** @docs-private */\n    var MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n        provide: MAT_DIALOG_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n    };\n    /**\n     * Service to open Material Design modal dialogs.\n     */\n    var MatDialog = /** @class */ (function () {\n        function MatDialog(_overlay, _injector, \n        /**\n         * @deprecated `_location` parameter to be removed.\n         * @breaking-change 10.0.0\n         */\n        _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._injector = _injector;\n            this._defaultOptions = _defaultOptions;\n            this._parentDialog = _parentDialog;\n            this._overlayContainer = _overlayContainer;\n            this._openDialogsAtThisLevel = [];\n            this._afterAllClosedAtThisLevel = new rxjs.Subject();\n            this._afterOpenedAtThisLevel = new rxjs.Subject();\n            this._ariaHiddenElements = new Map();\n            // TODO (jelbourn): tighten the typing right-hand side of this expression.\n            /**\n             * Stream that emits when all open dialog have finished closing.\n             * Will emit on subscribe if there are no open dialogs to begin with.\n             */\n            this.afterAllClosed = rxjs.defer(function () { return _this.openDialogs.length ?\n                _this._afterAllClosed :\n                _this._afterAllClosed.pipe(operators.startWith(undefined)); });\n            this._scrollStrategy = scrollStrategy;\n        }\n        Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\n            /** Keeps track of the currently-open dialogs. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"afterOpened\", {\n            /** Stream that emits when a dialog has been opened. */\n            get: function () {\n                return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\n            get: function () {\n                var parent = this._parentDialog;\n                return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Opens a modal dialog containing the given component.\n         * @param componentOrTemplateRef Type of the component to load into the dialog,\n         *     or a TemplateRef to instantiate as the dialog content.\n         * @param config Extra configuration options.\n         * @returns Reference to the newly-opened dialog.\n         */\n        MatDialog.prototype.open = function (componentOrTemplateRef, config) {\n            var _this = this;\n            config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n            if (config.id && this.getDialogById(config.id)) {\n                throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n            }\n            var overlayRef = this._createOverlay(config);\n            var dialogContainer = this._attachDialogContainer(overlayRef, config);\n            var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n            // If this is the first dialog that we're opening, hide all the non-overlay content.\n            if (!this.openDialogs.length) {\n                this._hideNonDialogContentFromAssistiveTechnology();\n            }\n            this.openDialogs.push(dialogRef);\n            dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n            this.afterOpened.next(dialogRef);\n            return dialogRef;\n        };\n        /**\n         * Closes all of the currently-open dialogs.\n         */\n        MatDialog.prototype.closeAll = function () {\n            this._closeDialogs(this.openDialogs);\n        };\n        /**\n         * Finds an open dialog by its id.\n         * @param id ID to use when looking up the dialog.\n         */\n        MatDialog.prototype.getDialogById = function (id) {\n            return this.openDialogs.find(function (dialog) { return dialog.id === id; });\n        };\n        MatDialog.prototype.ngOnDestroy = function () {\n            // Only close the dialogs at this level on destroy\n            // since the parent service may still be active.\n            this._closeDialogs(this._openDialogsAtThisLevel);\n            this._afterAllClosedAtThisLevel.complete();\n            this._afterOpenedAtThisLevel.complete();\n        };\n        /**\n         * Creates the overlay into which the dialog will be loaded.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the OverlayRef for the created overlay.\n         */\n        MatDialog.prototype._createOverlay = function (config) {\n            var overlayConfig = this._getOverlayConfig(config);\n            return this._overlay.create(overlayConfig);\n        };\n        /**\n         * Creates an overlay config from a dialog config.\n         * @param dialogConfig The dialog configuration.\n         * @returns The overlay configuration.\n         */\n        MatDialog.prototype._getOverlayConfig = function (dialogConfig) {\n            var state = new overlay.OverlayConfig({\n                positionStrategy: this._overlay.position().global(),\n                scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n                panelClass: dialogConfig.panelClass,\n                hasBackdrop: dialogConfig.hasBackdrop,\n                direction: dialogConfig.direction,\n                minWidth: dialogConfig.minWidth,\n                minHeight: dialogConfig.minHeight,\n                maxWidth: dialogConfig.maxWidth,\n                maxHeight: dialogConfig.maxHeight,\n                disposeOnNavigation: dialogConfig.closeOnNavigation\n            });\n            if (dialogConfig.backdropClass) {\n                state.backdropClass = dialogConfig.backdropClass;\n            }\n            return state;\n        };\n        /**\n         * Attaches an MatDialogContainer to a dialog's already-created overlay.\n         * @param overlay Reference to the dialog's underlying overlay.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to a ComponentRef for the attached container.\n         */\n        MatDialog.prototype._attachDialogContainer = function (overlay, config) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var injector = core.Injector.create({\n                parent: userInjector || this._injector,\n                providers: [{ provide: MatDialogConfig, useValue: config }]\n            });\n            var containerPortal = new portal.ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n            var containerRef = overlay.attach(containerPortal);\n            return containerRef.instance;\n        };\n        /**\n         * Attaches the user-provided component to the already-created MatDialogContainer.\n         * @param componentOrTemplateRef The type of component being loaded into the dialog,\n         *     or a TemplateRef to instantiate as the content.\n         * @param dialogContainer Reference to the wrapping MatDialogContainer.\n         * @param overlayRef Reference to the overlay in which the dialog resides.\n         * @param config The dialog configuration.\n         * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n         */\n        MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n            // Create a reference to the dialog we're creating in order to give the user a handle\n            // to modify and close it.\n            var dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n            if (componentOrTemplateRef instanceof core.TemplateRef) {\n                dialogContainer.attachTemplatePortal(new portal.TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef: dialogRef }));\n            }\n            else {\n                var injector = this._createInjector(config, dialogRef, dialogContainer);\n                var contentRef = dialogContainer.attachComponentPortal(new portal.ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n                dialogRef.componentInstance = contentRef.instance;\n            }\n            dialogRef\n                .updateSize(config.width, config.height)\n                .updatePosition(config.position);\n            return dialogRef;\n        };\n        /**\n         * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n         * of a dialog to close itself and, optionally, to return a value.\n         * @param config Config object that is used to construct the dialog.\n         * @param dialogRef Reference to the dialog.\n         * @param container Dialog container element that wraps all of the contents.\n         * @returns The custom injector that can be used inside the dialog.\n         */\n        MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n            // content are created out of the same ViewContainerRef and as such, are siblings for injector\n            // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n            // added to the injection tokens.\n            var providers = [\n                { provide: MatDialogContainer, useValue: dialogContainer },\n                { provide: MAT_DIALOG_DATA, useValue: config.data },\n                { provide: MatDialogRef, useValue: dialogRef }\n            ];\n            if (config.direction &&\n                (!userInjector || !userInjector.get(bidi.Directionality, null))) {\n                providers.push({\n                    provide: bidi.Directionality,\n                    useValue: { value: config.direction, change: rxjs.of() }\n                });\n            }\n            return core.Injector.create({ parent: userInjector || this._injector, providers: providers });\n        };\n        /**\n         * Removes a dialog from the array of open dialogs.\n         * @param dialogRef Dialog to be removed.\n         */\n        MatDialog.prototype._removeOpenDialog = function (dialogRef) {\n            var index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                // If all the dialogs were closed, remove/restore the `aria-hidden`\n                // to a the siblings and emit to the `afterAllClosed` stream.\n                if (!this.openDialogs.length) {\n                    this._ariaHiddenElements.forEach(function (previousValue, element) {\n                        if (previousValue) {\n                            element.setAttribute('aria-hidden', previousValue);\n                        }\n                        else {\n                            element.removeAttribute('aria-hidden');\n                        }\n                    });\n                    this._ariaHiddenElements.clear();\n                    this._afterAllClosed.next();\n                }\n            }\n        };\n        /**\n         * Hides all of the content that isn't an overlay from assistive technology.\n         */\n        MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = function () {\n            var overlayContainer = this._overlayContainer.getContainerElement();\n            // Ensure that the overlay container is attached to the DOM.\n            if (overlayContainer.parentElement) {\n                var siblings = overlayContainer.parentElement.children;\n                for (var i = siblings.length - 1; i > -1; i--) {\n                    var sibling = siblings[i];\n                    if (sibling !== overlayContainer &&\n                        sibling.nodeName !== 'SCRIPT' &&\n                        sibling.nodeName !== 'STYLE' &&\n                        !sibling.hasAttribute('aria-live')) {\n                        this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                        sibling.setAttribute('aria-hidden', 'true');\n                    }\n                }\n            }\n        };\n        /** Closes all of the dialogs in an array. */\n        MatDialog.prototype._closeDialogs = function (dialogs) {\n            var i = dialogs.length;\n            while (i--) {\n                // The `_openDialogs` property isn't updated after close until the rxjs subscription\n                // runs on the next microtask, in addition to modifying the array as we're going\n                // through it. We loop through all of them and call close without assuming that\n                // they'll be removed from the list instantaneously.\n                dialogs[i].close();\n            }\n        };\n        MatDialog.decorators = [\n            { type: core.Injectable }\n        ];\n        /** @nocollapse */\n        MatDialog.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.Injector },\n            { type: common.Location, decorators: [{ type: core.Optional }] },\n            { type: MatDialogConfig, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n            { type: MatDialog, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },\n            { type: overlay.OverlayContainer }\n        ]; };\n        return MatDialog;\n    }());\n    /**\n     * Applies default options to the dialog config.\n     * @param config Config to be modified.\n     * @param defaultOptions Default options provided.\n     * @returns The new configuration object.\n     */\n    function _applyConfigDefaults(config, defaultOptions) {\n        return __assign(__assign({}, defaultOptions), config);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter used to generate unique IDs for dialog elements. */\n    var dialogElementUid = 0;\n    /**\n     * Button that will close the current dialog.\n     */\n    var MatDialogClose = /** @class */ (function () {\n        function MatDialogClose(dialogRef, _elementRef, _dialog) {\n            this.dialogRef = dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            /** Default to \"button\" to prevents accidental form submits. */\n            this.type = 'button';\n        }\n        MatDialogClose.prototype.ngOnInit = function () {\n            if (!this.dialogRef) {\n                // When this directive is included in a dialog via TemplateRef (rather than being\n                // in a Component), the DialogRef isn't available via injection because embedded\n                // views cannot be given a custom injector. Instead, we look up the DialogRef by\n                // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n                // be resolved at constructor time.\n                this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n        };\n        MatDialogClose.prototype.ngOnChanges = function (changes) {\n            var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n            if (proxiedChange) {\n                this.dialogResult = proxiedChange.currentValue;\n            }\n        };\n        MatDialogClose.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-close], [matDialogClose]',\n                        exportAs: 'matDialogClose',\n                        host: {\n                            '(click)': 'dialogRef.close(dialogResult)',\n                            '[attr.aria-label]': 'ariaLabel || null',\n                            '[attr.type]': 'type',\n                        }\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogClose.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogClose.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            type: [{ type: core.Input }],\n            dialogResult: [{ type: core.Input, args: ['mat-dialog-close',] }],\n            _matDialogClose: [{ type: core.Input, args: ['matDialogClose',] }]\n        };\n        return MatDialogClose;\n    }());\n    /**\n     * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n     */\n    var MatDialogTitle = /** @class */ (function () {\n        function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n            this._dialogRef = _dialogRef;\n            this._elementRef = _elementRef;\n            this._dialog = _dialog;\n            this.id = \"mat-dialog-title-\" + dialogElementUid++;\n        }\n        MatDialogTitle.prototype.ngOnInit = function () {\n            var _this = this;\n            if (!this._dialogRef) {\n                this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n            }\n            if (this._dialogRef) {\n                Promise.resolve().then(function () {\n                    var container = _this._dialogRef._containerInstance;\n                    if (container && !container._ariaLabelledBy) {\n                        container._ariaLabelledBy = _this.id;\n                    }\n                });\n            }\n        };\n        MatDialogTitle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[mat-dialog-title], [matDialogTitle]',\n                        exportAs: 'matDialogTitle',\n                        host: {\n                            'class': 'mat-dialog-title',\n                            '[id]': 'id',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatDialogTitle.ctorParameters = function () { return [\n            { type: MatDialogRef, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: MatDialog }\n        ]; };\n        MatDialogTitle.propDecorators = {\n            id: [{ type: core.Input }]\n        };\n        return MatDialogTitle;\n    }());\n    /**\n     * Scrollable content container of a dialog.\n     */\n    var MatDialogContent = /** @class */ (function () {\n        function MatDialogContent() {\n        }\n        MatDialogContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n                        host: { 'class': 'mat-dialog-content' }\n                    },] }\n        ];\n        return MatDialogContent;\n    }());\n    /**\n     * Container for the bottom action buttons in a dialog.\n     * Stays fixed to the bottom when scrolling.\n     */\n    var MatDialogActions = /** @class */ (function () {\n        function MatDialogActions() {\n        }\n        MatDialogActions.decorators = [\n            { type: core.Directive, args: [{\n                        selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n                        host: { 'class': 'mat-dialog-actions' }\n                    },] }\n        ];\n        return MatDialogActions;\n    }());\n    /**\n     * Finds the closest MatDialogRef to an element by looking at the DOM.\n     * @param element Element relative to which to look for a dialog.\n     * @param openDialogs References to the currently-open dialogs.\n     */\n    function getClosestDialog(element, openDialogs) {\n        var parent = element.nativeElement.parentElement;\n        while (parent && !parent.classList.contains('mat-dialog-container')) {\n            parent = parent.parentElement;\n        }\n        return parent ? openDialogs.find(function (dialog) { return dialog.id === parent.id; }) : null;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatDialogModule = /** @class */ (function () {\n        function MatDialogModule() {\n        }\n        MatDialogModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            overlay.OverlayModule,\n                            portal.PortalModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogContent,\n                            MatDialogActions,\n                            core$1.MatCommonModule,\n                        ],\n                        declarations: [\n                            MatDialogContainer,\n                            MatDialogClose,\n                            MatDialogTitle,\n                            MatDialogActions,\n                            MatDialogContent,\n                        ],\n                        providers: [\n                            MatDialog,\n                            MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                        ],\n                        entryComponents: [MatDialogContainer],\n                    },] }\n        ];\n        return MatDialogModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_DIALOG_DATA = MAT_DIALOG_DATA;\n    exports.MAT_DIALOG_DEFAULT_OPTIONS = MAT_DIALOG_DEFAULT_OPTIONS;\n    exports.MAT_DIALOG_SCROLL_STRATEGY = MAT_DIALOG_SCROLL_STRATEGY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_FACTORY;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER;\n    exports.MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY = MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;\n    exports.MatDialog = MatDialog;\n    exports.MatDialogActions = MatDialogActions;\n    exports.MatDialogClose = MatDialogClose;\n    exports.MatDialogConfig = MatDialogConfig;\n    exports.MatDialogContainer = MatDialogContainer;\n    exports.MatDialogContent = MatDialogContent;\n    exports.MatDialogModule = MatDialogModule;\n    exports.MatDialogRef = MatDialogRef;\n    exports.MatDialogTitle = MatDialogTitle;\n    exports.matDialogAnimations = matDialogAnimations;\n    exports.throwMatDialogContentAlreadyAttachedError = throwMatDialogContentAlreadyAttachedError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-dialog.umd.js.map\n"]}