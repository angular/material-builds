{"version":3,"sources":["src/material/material-radio.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","radio","core","cdk","a11y","coercion","collections","forms","platformBrowser","animations","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","MAT_RADIO_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MatRadioChange","source","value","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","defineProperty","get","set","_updateRadioButtonNames","enumerable","configurable","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","coerceBooleanProperty","ngAfterContentInit","_touch","_this","_radios","forEach","name","_markForCheck","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","decorators","type","Directive","args","selector","exportAs","providers","host","role","class","ctorParameters","ChangeDetectorRef","propDecorators","Output","ContentChildren","MatRadioButton","descendants","Input","labelPosition","required","_MatRadioButtonBase","_super","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","call","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","focus","options","focusVia","_inputElement","ngOnInit","ngAfterViewInit","monitor","_elementRef","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","Optional","ElementRef","FocusMonitor","UniqueSelectionDispatcher","String","Inject","ANIMATION_MODULE_TYPE","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","ViewChild","mixinDisableRipple","mixinTabIndex","MatRadioButtonBase","apply","arguments","Component","template","inputs","encapsulation","ViewEncapsulation","None","[class.mat-radio-checked]","[class.mat-radio-disabled]","[class._mat-animation-noopable]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[attr.tabindex]","[attr.id]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-describedby]","(focus)","changeDetection","ChangeDetectionStrategy","OnPush","styles","MatRadioModule","NgModule","imports","MatRippleModule","MatCommonModule","declarations"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/forms'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/radio', ['exports', '@angular/core', '@angular/material/core', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/forms', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.radio = {}), global.ng.core, global.ng.material.core, global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.forms, global.ng.platformBrowser.animations));\n}(this, (function (exports, core, core$1, a11y, coercion, collections, forms, animations) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MAT_RADIO_DEFAULT_OPTIONS = new core.InjectionToken('mat-radio-default-options', {\n        providedIn: 'root',\n        factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n    });\n    function MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n        return {\n            color: 'accent'\n        };\n    }\n    // Increasing integer for generating unique ids for radio components.\n    var nextUniqueId = 0;\n    /**\n     * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n     * allows it to support [(ngModel)] and ngControl.\n     * @docs-private\n     */\n    var MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatRadioGroup; }),\n        multi: true\n    };\n    /** Change event object emitted by MatRadio and MatRadioGroup. */\n    var MatRadioChange = /** @class */ (function () {\n        function MatRadioChange(\n        /** The MatRadioButton that emits the change event. */\n        source, \n        /** The value of the MatRadioButton. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatRadioChange;\n    }());\n    /**\n     * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n     */\n    var MatRadioGroup = /** @class */ (function () {\n        function MatRadioGroup(_changeDetector) {\n            this._changeDetector = _changeDetector;\n            /** Selected value for the radio group. */\n            this._value = null;\n            /** The HTML name attribute applied to radio buttons in this group. */\n            this._name = \"mat-radio-group-\" + nextUniqueId++;\n            /** The currently selected radio button. Should match value. */\n            this._selected = null;\n            /** Whether the `value` has been set to its initial value. */\n            this._isInitialized = false;\n            /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n            this._labelPosition = 'after';\n            /** Whether the radio group is disabled. */\n            this._disabled = false;\n            /** Whether the radio group is required. */\n            this._required = false;\n            /** The method to be called in order to update ngModel */\n            this._controlValueAccessorChangeFn = function () { };\n            /**\n             * onTouch function registered via registerOnTouch (ControlValueAccessor).\n             * @docs-private\n             */\n            this.onTouched = function () { };\n            /**\n             * Event emitted when the group value changes.\n             * Change events are only emitted when the value changes due to user interaction with\n             * a radio button (the same behavior as `<input type-\"radio\">`).\n             */\n            this.change = new core.EventEmitter();\n        }\n        Object.defineProperty(MatRadioGroup.prototype, \"name\", {\n            /** Name of the radio button group. All radio buttons inside this group will use this name. */\n            get: function () { return this._name; },\n            set: function (value) {\n                this._name = value;\n                this._updateRadioButtonNames();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatRadioGroup.prototype, \"labelPosition\", {\n            /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n            get: function () {\n                return this._labelPosition;\n            },\n            set: function (v) {\n                this._labelPosition = v === 'before' ? 'before' : 'after';\n                this._markRadiosForCheck();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatRadioGroup.prototype, \"value\", {\n            /**\n             * Value for the radio-group. Should equal the value of the selected radio button if there is\n             * a corresponding radio button with a matching value. If there is not such a corresponding\n             * radio button, this value persists to be applied in case a new radio button is added with a\n             * matching value.\n             */\n            get: function () { return this._value; },\n            set: function (newValue) {\n                if (this._value !== newValue) {\n                    // Set this before proceeding to ensure no circular loop occurs with selection.\n                    this._value = newValue;\n                    this._updateSelectedRadioFromValue();\n                    this._checkSelectedRadioButton();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatRadioGroup.prototype._checkSelectedRadioButton = function () {\n            if (this._selected && !this._selected.checked) {\n                this._selected.checked = true;\n            }\n        };\n        Object.defineProperty(MatRadioGroup.prototype, \"selected\", {\n            /**\n             * The currently selected radio button. If set to a new radio button, the radio group value\n             * will be updated to match the new selected button.\n             */\n            get: function () { return this._selected; },\n            set: function (selected) {\n                this._selected = selected;\n                this.value = selected ? selected.value : null;\n                this._checkSelectedRadioButton();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatRadioGroup.prototype, \"disabled\", {\n            /** Whether the radio group is disabled */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                this._markRadiosForCheck();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatRadioGroup.prototype, \"required\", {\n            /** Whether the radio group is required */\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n                this._markRadiosForCheck();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Initialize properties once content children are available.\n         * This allows us to propagate relevant attributes to associated buttons.\n         */\n        MatRadioGroup.prototype.ngAfterContentInit = function () {\n            // Mark this component as initialized in AfterContentInit because the initial value can\n            // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n            // NgModel occurs *after* the OnInit of the MatRadioGroup.\n            this._isInitialized = true;\n        };\n        /**\n         * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n         * radio buttons upon their blur.\n         */\n        MatRadioGroup.prototype._touch = function () {\n            if (this.onTouched) {\n                this.onTouched();\n            }\n        };\n        MatRadioGroup.prototype._updateRadioButtonNames = function () {\n            var _this = this;\n            if (this._radios) {\n                this._radios.forEach(function (radio) {\n                    radio.name = _this.name;\n                    radio._markForCheck();\n                });\n            }\n        };\n        /** Updates the `selected` radio button from the internal _value state. */\n        MatRadioGroup.prototype._updateSelectedRadioFromValue = function () {\n            var _this = this;\n            // If the value already matches the selected radio, do nothing.\n            var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n            if (this._radios && !isAlreadySelected) {\n                this._selected = null;\n                this._radios.forEach(function (radio) {\n                    radio.checked = _this.value === radio.value;\n                    if (radio.checked) {\n                        _this._selected = radio;\n                    }\n                });\n            }\n        };\n        /** Dispatch change event with current selection and group value. */\n        MatRadioGroup.prototype._emitChangeEvent = function () {\n            if (this._isInitialized) {\n                this.change.emit(new MatRadioChange(this._selected, this._value));\n            }\n        };\n        MatRadioGroup.prototype._markRadiosForCheck = function () {\n            if (this._radios) {\n                this._radios.forEach(function (radio) { return radio._markForCheck(); });\n            }\n        };\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value\n         */\n        MatRadioGroup.prototype.writeValue = function (value) {\n            this.value = value;\n            this._changeDetector.markForCheck();\n        };\n        /**\n         * Registers a callback to be triggered when the model value changes.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatRadioGroup.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        /**\n         * Registers a callback to be triggered when the control is touched.\n         * Implemented as part of ControlValueAccessor.\n         * @param fn Callback to be registered.\n         */\n        MatRadioGroup.prototype.registerOnTouched = function (fn) {\n            this.onTouched = fn;\n        };\n        /**\n         * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n         * @param isDisabled Whether the control should be disabled.\n         */\n        MatRadioGroup.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetector.markForCheck();\n        };\n        MatRadioGroup.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-radio-group',\n                        exportAs: 'matRadioGroup',\n                        providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                        host: {\n                            'role': 'radiogroup',\n                            'class': 'mat-radio-group',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatRadioGroup.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef }\n        ]; };\n        MatRadioGroup.propDecorators = {\n            change: [{ type: core.Output }],\n            _radios: [{ type: core.ContentChildren, args: [core.forwardRef(function () { return MatRadioButton; }), { descendants: true },] }],\n            color: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            labelPosition: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            selected: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            required: [{ type: core.Input }]\n        };\n        return MatRadioGroup;\n    }());\n    // Boilerplate for applying mixins to MatRadioButton.\n    /** @docs-private */\n    var MatRadioButtonBase = /** @class */ (function () {\n        function MatRadioButtonBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatRadioButtonBase;\n    }());\n    // As per Material design specifications the selection control radio should use the accent color\n    // palette by default. https://material.io/guidelines/components/selection-controls.html\n    var _MatRadioButtonMixinBase = core$1.mixinDisableRipple(core$1.mixinTabIndex(MatRadioButtonBase));\n    /**\n     * Base class with all of the `MatRadioButton` functionality.\n     * @docs-private\n     */\n    var _MatRadioButtonBase = /** @class */ (function (_super) {\n        __extends(_MatRadioButtonBase, _super);\n        function _MatRadioButtonBase(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n            var _this = _super.call(this, elementRef) || this;\n            _this._changeDetector = _changeDetector;\n            _this._focusMonitor = _focusMonitor;\n            _this._radioDispatcher = _radioDispatcher;\n            _this._animationMode = _animationMode;\n            _this._providerOverride = _providerOverride;\n            _this._uniqueId = \"mat-radio-\" + ++nextUniqueId;\n            /** The unique ID for the radio button. */\n            _this.id = _this._uniqueId;\n            /**\n             * Event emitted when the checked state of this radio button changes.\n             * Change events are only emitted when the value changes due to user interaction with\n             * the radio button (the same behavior as `<input type-\"radio\">`).\n             */\n            _this.change = new core.EventEmitter();\n            /** Whether this radio is checked. */\n            _this._checked = false;\n            /** Value assigned to this radio. */\n            _this._value = null;\n            /** Unregister function for _radioDispatcher */\n            _this._removeUniqueSelectionListener = function () { };\n            // Assertions. Ideally these should be stripped out by the compiler.\n            // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n            _this.radioGroup = radioGroup;\n            _this._removeUniqueSelectionListener =\n                _radioDispatcher.listen(function (id, name) {\n                    if (id !== _this.id && name === _this.name) {\n                        _this.checked = false;\n                    }\n                });\n            return _this;\n        }\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"checked\", {\n            /** Whether this radio button is checked. */\n            get: function () { return this._checked; },\n            set: function (value) {\n                var newCheckedState = coercion.coerceBooleanProperty(value);\n                if (this._checked !== newCheckedState) {\n                    this._checked = newCheckedState;\n                    if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                        this.radioGroup.selected = this;\n                    }\n                    else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                        // When unchecking the selected radio button, update the selected radio\n                        // property on the group.\n                        this.radioGroup.selected = null;\n                    }\n                    if (newCheckedState) {\n                        // Notify all radio buttons with the same name to un-check.\n                        this._radioDispatcher.notify(this.id, this.name);\n                    }\n                    this._changeDetector.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"value\", {\n            /** The value of this radio button. */\n            get: function () { return this._value; },\n            set: function (value) {\n                if (this._value !== value) {\n                    this._value = value;\n                    if (this.radioGroup !== null) {\n                        if (!this.checked) {\n                            // Update checked when the value changed to match the radio group's value\n                            this.checked = this.radioGroup.value === value;\n                        }\n                        if (this.checked) {\n                            this.radioGroup.selected = this;\n                        }\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"labelPosition\", {\n            /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n            get: function () {\n                return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n            },\n            set: function (value) {\n                this._labelPosition = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"disabled\", {\n            /** Whether the radio button is disabled. */\n            get: function () {\n                return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n            },\n            set: function (value) {\n                this._setDisabled(coercion.coerceBooleanProperty(value));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"required\", {\n            /** Whether the radio button is required. */\n            get: function () {\n                return this._required || (this.radioGroup && this.radioGroup.required);\n            },\n            set: function (value) {\n                this._required = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"color\", {\n            /** Theme color of the radio button. */\n            get: function () {\n                return this._color ||\n                    (this.radioGroup && this.radioGroup.color) ||\n                    this._providerOverride && this._providerOverride.color || 'accent';\n            },\n            set: function (newValue) { this._color = newValue; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(_MatRadioButtonBase.prototype, \"inputId\", {\n            /** ID of the native input element inside `<mat-radio-button>` */\n            get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n            enumerable: true,\n            configurable: true\n        });\n        /** Focuses the radio button. */\n        _MatRadioButtonBase.prototype.focus = function (options) {\n            this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n        };\n        /**\n         * Marks the radio button as needing checking for change detection.\n         * This method is exposed because the parent radio group will directly\n         * update bound properties of the radio button.\n         */\n        _MatRadioButtonBase.prototype._markForCheck = function () {\n            // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n            // update radio button's status\n            this._changeDetector.markForCheck();\n        };\n        _MatRadioButtonBase.prototype.ngOnInit = function () {\n            if (this.radioGroup) {\n                // If the radio is inside a radio group, determine if it should be checked\n                this.checked = this.radioGroup.value === this._value;\n                // Copy name from parent radio group\n                this.name = this.radioGroup.name;\n            }\n        };\n        _MatRadioButtonBase.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            this._focusMonitor\n                .monitor(this._elementRef, true)\n                .subscribe(function (focusOrigin) {\n                if (!focusOrigin && _this.radioGroup) {\n                    _this.radioGroup._touch();\n                }\n            });\n        };\n        _MatRadioButtonBase.prototype.ngOnDestroy = function () {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            this._removeUniqueSelectionListener();\n        };\n        /** Dispatch change event with current value. */\n        _MatRadioButtonBase.prototype._emitChangeEvent = function () {\n            this.change.emit(new MatRadioChange(this, this._value));\n        };\n        _MatRadioButtonBase.prototype._isRippleDisabled = function () {\n            return this.disableRipple || this.disabled;\n        };\n        _MatRadioButtonBase.prototype._onInputClick = function (event) {\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `radio-button` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n        };\n        /**\n         * Triggered when the radio button received a click or the input recognized any change.\n         * Clicking on a label element, will trigger a change event on the associated input.\n         */\n        _MatRadioButtonBase.prototype._onInputChange = function (event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the `change` output.\n            event.stopPropagation();\n            var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        };\n        /** Sets the disabled state and marks for check if a change occurred. */\n        _MatRadioButtonBase.prototype._setDisabled = function (value) {\n            if (this._disabled !== value) {\n                this._disabled = value;\n                this._changeDetector.markForCheck();\n            }\n        };\n        _MatRadioButtonBase.decorators = [\n            { type: core.Directive }\n        ];\n        /** @nocollapse */\n        _MatRadioButtonBase.ctorParameters = function () { return [\n            { type: MatRadioGroup, decorators: [{ type: core.Optional }] },\n            { type: core.ElementRef },\n            { type: core.ChangeDetectorRef },\n            { type: a11y.FocusMonitor },\n            { type: collections.UniqueSelectionDispatcher },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n        ]; };\n        _MatRadioButtonBase.propDecorators = {\n            id: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            ariaDescribedby: [{ type: core.Input, args: ['aria-describedby',] }],\n            checked: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            labelPosition: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            required: [{ type: core.Input }],\n            color: [{ type: core.Input }],\n            change: [{ type: core.Output }],\n            _inputElement: [{ type: core.ViewChild, args: ['input',] }]\n        };\n        return _MatRadioButtonBase;\n    }(_MatRadioButtonMixinBase));\n    /**\n     * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n     */\n    var MatRadioButton = /** @class */ (function (_super) {\n        __extends(MatRadioButton, _super);\n        function MatRadioButton() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MatRadioButton.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-radio-button',\n                        template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                        inputs: ['disableRipple', 'tabIndex'],\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matRadioButton',\n                        host: {\n                            'class': 'mat-radio-button',\n                            '[class.mat-radio-checked]': 'checked',\n                            '[class.mat-radio-disabled]': 'disabled',\n                            '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                            '[class.mat-primary]': 'color === \"primary\"',\n                            '[class.mat-accent]': 'color === \"accent\"',\n                            '[class.mat-warn]': 'color === \"warn\"',\n                            // Needs to be -1 so the `focus` event still fires.\n                            '[attr.tabindex]': '-1',\n                            '[attr.id]': 'id',\n                            '[attr.aria-label]': 'null',\n                            '[attr.aria-labelledby]': 'null',\n                            '[attr.aria-describedby]': 'null',\n                            // Note: under normal conditions focus shouldn't land on this element, however it may be\n                            // programmatically set, for example inside of a focus trap, in this case we want to forward\n                            // the focus to the native element.\n                            '(focus)': '_inputElement.nativeElement.focus()',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n                    }] }\n        ];\n        return MatRadioButton;\n    }(_MatRadioButtonBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatRadioModule = /** @class */ (function () {\n        function MatRadioModule() {\n        }\n        MatRadioModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatRippleModule, core$1.MatCommonModule],\n                        exports: [MatRadioGroup, MatRadioButton, core$1.MatCommonModule],\n                        declarations: [MatRadioGroup, MatRadioButton],\n                    },] }\n        ];\n        return MatRadioModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_RADIO_DEFAULT_OPTIONS = MAT_RADIO_DEFAULT_OPTIONS;\n    exports.MAT_RADIO_DEFAULT_OPTIONS_FACTORY = MAT_RADIO_DEFAULT_OPTIONS_FACTORY;\n    exports.MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR;\n    exports.MatRadioButton = MatRadioButton;\n    exports.MatRadioChange = MatRadioChange;\n    exports.MatRadioGroup = MatRadioGroup;\n    exports.MatRadioModule = MatRadioModule;\n    exports._MatRadioButtonBase = _MatRadioButtonBase;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-radio.umd.js.map\n"]}