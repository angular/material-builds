{"version":3,"sources":["src/material/material-expansion.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","expansion","cdk","accordion","portal","common","core","coercion","a11y","keycodes","rxjs","operators","animations","collections","platformBrowser","this","animations$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","MAT_ACCORDION","InjectionToken","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","expansionHeaderHeight","height","params","collapsedHeight","expandedHeight","group","query","animateChild","optional","bodyExpansion","visibility","MatExpansionPanelContent","_template","decorators","type","Directive","args","selector","ctorParameters","TemplateRef","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_super","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_this","call","_hideToggle","afterExpand","EventEmitter","afterCollapse","_inputChanges","Subject","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","subscribe","event","emit","hideToggle","defineProperty","get","set","value","coerceBooleanProperty","enumerable","configurable","_togglePosition","togglePosition","_hasSpacing","expanded","displayMode","_getExpandedState","toggle","close","open","ngAfterContentInit","_lazyContent","opened","startWith","filter","_portal","take","TemplatePortal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","Component","exportAs","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","inputs","outputs","providers","provide","useValue","undefined","host","class","[class.mat-expanded]","[class._mat-animation-noopable]","[class.mat-expansion-panel-spacing]","styles","Optional","SkipSelf","Inject","ChangeDetectorRef","UniqueSelectionDispatcher","ViewContainerRef","DOCUMENT","String","ANIMATION_MODULE_TYPE","propDecorators","Input","Output","ContentChild","ViewChild","CdkAccordionItem","MatExpansionPanelActionRow","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","Subscription","EMPTY","_animationsDisabled","accordionHideToggleChange","_stateChanges","merge","closed","markForCheck","focusVia","monitor","origin","_handleHeaderFocus","_animationStarted","disabled","_toggle","_isExpanded","_getPanelId","id","_getTogglePosition","_showToggle","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","options","unsubscribe","stopMonitoring","role","[attr.id]","[attr.tabindex]","[attr.aria-controls]","[attr.aria-expanded]","[attr.aria-disabled]","[class.mat-expansion-toggle-indicator-after]","[class.mat-expansion-toggle-indicator-before]","(click)","(keydown)","[@.disabled]","(@expansionHeight.start)","[@expansionHeight]","Host","ElementRef","FocusMonitor","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","apply","arguments","_ownHeaders","QueryList","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","manager","HOME","setFirstItemActive","END","setLastItemActive","onKeydown","updateActiveItem","useExisting","[class.mat-accordion-multi]","ContentChildren","descendants","CdkAccordion","MatExpansionModule","NgModule","imports","CommonModule","CdkAccordionModule","PortalModule","declarations","EXPANSION_PANEL_ANIMATION_TIMING","Éµ0"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/accordion'), require('@angular/cdk/portal'), require('@angular/common'), require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes'), require('rxjs/operators'), require('rxjs'), require('@angular/animations'), require('@angular/cdk/collections'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/expansion', ['exports', '@angular/cdk/accordion', '@angular/cdk/portal', '@angular/common', '@angular/core', '@angular/cdk/coercion', '@angular/cdk/a11y', '@angular/cdk/keycodes', 'rxjs/operators', 'rxjs', '@angular/animations', '@angular/cdk/collections', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.expansion = {}), global.ng.cdk.accordion, global.ng.cdk.portal, global.ng.common, global.ng.core, global.ng.cdk.coercion, global.ng.cdk.a11y, global.ng.cdk.keycodes, global.rxjs.operators, global.rxjs, global.ng.animations, global.ng.cdk.collections, global.ng.platformBrowser.animations));\n}(this, (function (exports, accordion, portal, common, core, coercion, a11y, keycodes, operators, rxjs, animations, collections, animations$1) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n     * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n     */\n    var MAT_ACCORDION = new core.InjectionToken('MAT_ACCORDION');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Time and timing curve for expansion panel animations. */\n    var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n    /**\n     * Animations used by the Material expansion panel.\n     *\n     * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n     * causes the animation state of moved components to become `void` upon exit, and not update again\n     * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n     * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n     *\n     * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n     * are defined to have the same styles. Since angular animates from the current styles to the\n     * destination state's style definition, in situations where we are moving from `void`'s styles to\n     * `collapsed` this acts a noop since no style values change.\n     *\n     * In the case where angular's animation state is out of sync with the expansion panel's state, the\n     * expansion panel being `expanded` and angular animations being `void`, the animation from the\n     * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n     * occur as expected.\n     *\n     * Angular Bug: https://github.com/angular/angular/issues/18847\n     *\n     * @docs-private\n     */\n    var matExpansionAnimations = {\n        /** Animation that rotates the indicator arrow. */\n        indicatorRotate: animations.trigger('indicatorRotate', [\n            animations.state('collapsed, void', animations.style({ transform: 'rotate(0deg)' })),\n            animations.state('expanded', animations.style({ transform: 'rotate(180deg)' })),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n        ]),\n        /** Animation that expands and collapses the panel header height. */\n        expansionHeaderHeight: animations.trigger('expansionHeight', [\n            animations.state('collapsed, void', animations.style({\n                height: '{{collapsedHeight}}',\n            }), {\n                params: { collapsedHeight: '48px' },\n            }),\n            animations.state('expanded', animations.style({\n                height: '{{expandedHeight}}'\n            }), {\n                params: { expandedHeight: '64px' }\n            }),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.group([\n                animations.query('@indicatorRotate', animations.animateChild(), { optional: true }),\n                animations.animate(EXPANSION_PANEL_ANIMATION_TIMING),\n            ])),\n        ]),\n        /** Animation that expands and collapses the panel content. */\n        bodyExpansion: animations.trigger('bodyExpansion', [\n            animations.state('collapsed, void', animations.style({ height: '0px', visibility: 'hidden' })),\n            animations.state('expanded', animations.style({ height: '*', visibility: 'visible' })),\n            animations.transition('expanded <=> collapsed, void => collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n        ])\n    };\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Expansion panel content that will be rendered lazily\n     * after the panel is opened for the first time.\n     */\n    var MatExpansionPanelContent = /** @class */ (function () {\n        function MatExpansionPanelContent(_template) {\n            this._template = _template;\n        }\n        MatExpansionPanelContent.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'ng-template[matExpansionPanelContent]'\n                    },] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanelContent.ctorParameters = function () { return [\n            { type: core.TemplateRef }\n        ]; };\n        return MatExpansionPanelContent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /** Counter for generating unique element ids. */\n    var uniqueId = 0;\n    /**\n     * Injection token that can be used to configure the defalt\n     * options for the expansion panel component.\n     */\n    var MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new core.InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n    var Éµ0 = undefined;\n    /**\n     * `<mat-expansion-panel>`\n     *\n     * This component can be used as a single element to show expandable content, or as one of\n     * multiple children of an element with the MatAccordion directive attached.\n     */\n    var MatExpansionPanel = /** @class */ (function (_super) {\n        __extends(MatExpansionPanel, _super);\n        function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n            var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n            _this._viewContainerRef = _viewContainerRef;\n            _this._animationMode = _animationMode;\n            _this._hideToggle = false;\n            /** An event emitted after the body's expansion animation happens. */\n            _this.afterExpand = new core.EventEmitter();\n            /** An event emitted after the body's collapse animation happens. */\n            _this.afterCollapse = new core.EventEmitter();\n            /** Stream that emits for changes in `@Input` properties. */\n            _this._inputChanges = new rxjs.Subject();\n            /** ID for the associated header element. Used for a11y labelling. */\n            _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n            /** Stream of body animation done events. */\n            _this._bodyAnimationDone = new rxjs.Subject();\n            _this.accordion = accordion;\n            _this._document = _document;\n            // We need a Subject with distinctUntilChanged, because the `done` event\n            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n            _this._bodyAnimationDone.pipe(operators.distinctUntilChanged(function (x, y) {\n                return x.fromState === y.fromState && x.toState === y.toState;\n            })).subscribe(function (event) {\n                if (event.fromState !== 'void') {\n                    if (event.toState === 'expanded') {\n                        _this.afterExpand.emit();\n                    }\n                    else if (event.toState === 'collapsed') {\n                        _this.afterCollapse.emit();\n                    }\n                }\n            });\n            if (defaultOptions) {\n                _this.hideToggle = defaultOptions.hideToggle;\n            }\n            return _this;\n        }\n        Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n            /** Whether the toggle indicator should be hidden. */\n            get: function () {\n                return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n            },\n            set: function (value) {\n                this._hideToggle = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatExpansionPanel.prototype, \"togglePosition\", {\n            /** The position of the expansion indicator. */\n            get: function () {\n                return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n            },\n            set: function (value) {\n                this._togglePosition = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Determines whether the expansion panel should have spacing between it and its siblings. */\n        MatExpansionPanel.prototype._hasSpacing = function () {\n            if (this.accordion) {\n                return this.expanded && this.accordion.displayMode === 'default';\n            }\n            return false;\n        };\n        /** Gets the expanded state string. */\n        MatExpansionPanel.prototype._getExpandedState = function () {\n            return this.expanded ? 'expanded' : 'collapsed';\n        };\n        /** Toggles the expanded state of the expansion panel. */\n        MatExpansionPanel.prototype.toggle = function () {\n            this.expanded = !this.expanded;\n        };\n        /** Sets the expanded state of the expansion panel to false. */\n        MatExpansionPanel.prototype.close = function () {\n            this.expanded = false;\n        };\n        /** Sets the expanded state of the expansion panel to true. */\n        MatExpansionPanel.prototype.open = function () {\n            this.expanded = true;\n        };\n        MatExpansionPanel.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(operators.startWith(null), operators.filter(function () { return _this.expanded && !_this._portal; }), operators.take(1)).subscribe(function () {\n                    _this._portal = new portal.TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n                });\n            }\n        };\n        MatExpansionPanel.prototype.ngOnChanges = function (changes) {\n            this._inputChanges.next(changes);\n        };\n        MatExpansionPanel.prototype.ngOnDestroy = function () {\n            _super.prototype.ngOnDestroy.call(this);\n            this._bodyAnimationDone.complete();\n            this._inputChanges.complete();\n        };\n        /** Checks whether the expansion panel's content contains the currently-focused element. */\n        MatExpansionPanel.prototype._containsFocus = function () {\n            if (this._body) {\n                var focusedElement = this._document.activeElement;\n                var bodyElement = this._body.nativeElement;\n                return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n            }\n            return false;\n        };\n        MatExpansionPanel.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-expansion-panel',\n                        exportAs: 'matExpansionPanel',\n                        template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        inputs: ['disabled', 'expanded'],\n                        outputs: ['opened', 'closed', 'expandedChange'],\n                        animations: [matExpansionAnimations.bodyExpansion],\n                        providers: [\n                            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                            // to the same accordion.\n                            { provide: MAT_ACCORDION, useValue: Éµ0 },\n                        ],\n                        host: {\n                            'class': 'mat-expansion-panel',\n                            '[class.mat-expanded]': 'expanded',\n                            '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                            '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                        },\n                        styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanel.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.SkipSelf }, { type: core.Inject, args: [MAT_ACCORDION,] }] },\n            { type: core.ChangeDetectorRef },\n            { type: collections.UniqueSelectionDispatcher },\n            { type: core.ViewContainerRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: core.Optional }] }\n        ]; };\n        MatExpansionPanel.propDecorators = {\n            hideToggle: [{ type: core.Input }],\n            togglePosition: [{ type: core.Input }],\n            afterExpand: [{ type: core.Output }],\n            afterCollapse: [{ type: core.Output }],\n            _lazyContent: [{ type: core.ContentChild, args: [MatExpansionPanelContent,] }],\n            _body: [{ type: core.ViewChild, args: ['body',] }]\n        };\n        return MatExpansionPanel;\n    }(accordion.CdkAccordionItem));\n    var MatExpansionPanelActionRow = /** @class */ (function () {\n        function MatExpansionPanelActionRow() {\n        }\n        MatExpansionPanelActionRow.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-action-row',\n                        host: {\n                            class: 'mat-action-row'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelActionRow;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `<mat-expansion-panel-header>`\n     *\n     * This component corresponds to the header element of an `<mat-expansion-panel>`.\n     */\n    var MatExpansionPanelHeader = /** @class */ (function () {\n        function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n            var _this = this;\n            this.panel = panel;\n            this._element = _element;\n            this._focusMonitor = _focusMonitor;\n            this._changeDetectorRef = _changeDetectorRef;\n            this._parentChangeSubscription = rxjs.Subscription.EMPTY;\n            /** Whether Angular animations in the panel header should be disabled. */\n            this._animationsDisabled = true;\n            var accordionHideToggleChange = panel.accordion ?\n                panel.accordion._stateChanges.pipe(operators.filter(function (changes) { return !!(changes['hideToggle'] || changes['togglePosition']); })) :\n                rxjs.EMPTY;\n            // Since the toggle state depends on an @Input on the panel, we\n            // need to subscribe and trigger change detection manually.\n            this._parentChangeSubscription =\n                rxjs.merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(operators.filter(function (changes) {\n                    return !!(changes['hideToggle'] ||\n                        changes['disabled'] ||\n                        changes['togglePosition']);\n                })))\n                    .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n            // Avoids focus being lost if the panel contained the focused element and was closed.\n            panel.closed\n                .pipe(operators.filter(function () { return panel._containsFocus(); }))\n                .subscribe(function () { return _focusMonitor.focusVia(_element, 'program'); });\n            _focusMonitor.monitor(_element).subscribe(function (origin) {\n                if (origin && panel.accordion) {\n                    panel.accordion._handleHeaderFocus(_this);\n                }\n            });\n            if (defaultOptions) {\n                this.expandedHeight = defaultOptions.expandedHeight;\n                this.collapsedHeight = defaultOptions.collapsedHeight;\n            }\n        }\n        MatExpansionPanelHeader.prototype._animationStarted = function () {\n            // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n            // there to work around a bug in Angular (see #13088), however this introduces a different\n            // issue. The new transition will cause the header to animate in on init (see #16067), if the\n            // consumer has set a header height that is different from the default one. We work around it\n            // by disabling animations on the header and re-enabling them after the first animation has run.\n            // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n            // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n            // for https://github.com/angular/angular/issues/18847 to be resolved.\n            this._animationsDisabled = false;\n        };\n        Object.defineProperty(MatExpansionPanelHeader.prototype, \"disabled\", {\n            /**\n             * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n             * @docs-private\n             */\n            get: function () {\n                return this.panel.disabled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Toggles the expanded state of the panel. */\n        MatExpansionPanelHeader.prototype._toggle = function () {\n            if (!this.disabled) {\n                this.panel.toggle();\n            }\n        };\n        /** Gets whether the panel is expanded. */\n        MatExpansionPanelHeader.prototype._isExpanded = function () {\n            return this.panel.expanded;\n        };\n        /** Gets the expanded state string of the panel. */\n        MatExpansionPanelHeader.prototype._getExpandedState = function () {\n            return this.panel._getExpandedState();\n        };\n        /** Gets the panel id. */\n        MatExpansionPanelHeader.prototype._getPanelId = function () {\n            return this.panel.id;\n        };\n        /** Gets the toggle position for the header. */\n        MatExpansionPanelHeader.prototype._getTogglePosition = function () {\n            return this.panel.togglePosition;\n        };\n        /** Gets whether the expand indicator should be shown. */\n        MatExpansionPanelHeader.prototype._showToggle = function () {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        };\n        /** Handle keydown event calling to toggle() if appropriate. */\n        MatExpansionPanelHeader.prototype._keydown = function (event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case keycodes.SPACE:\n                case keycodes.ENTER:\n                    if (!keycodes.hasModifierKey(event)) {\n                        event.preventDefault();\n                        this._toggle();\n                    }\n                    break;\n                default:\n                    if (this.panel.accordion) {\n                        this.panel.accordion._handleHeaderKeydown(event);\n                    }\n                    return;\n            }\n        };\n        /**\n         * Focuses the panel header. Implemented as a part of `FocusableOption`.\n         * @param origin Origin of the action that triggered the focus.\n         * @docs-private\n         */\n        MatExpansionPanelHeader.prototype.focus = function (origin, options) {\n            if (origin === void 0) { origin = 'program'; }\n            this._focusMonitor.focusVia(this._element, origin, options);\n        };\n        MatExpansionPanelHeader.prototype.ngOnDestroy = function () {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element);\n        };\n        MatExpansionPanelHeader.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-expansion-panel-header',\n                        template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        animations: [\n                            matExpansionAnimations.indicatorRotate,\n                            matExpansionAnimations.expansionHeaderHeight\n                        ],\n                        host: {\n                            'class': 'mat-expansion-panel-header mat-focus-indicator',\n                            'role': 'button',\n                            '[attr.id]': 'panel._headerId',\n                            '[attr.tabindex]': 'disabled ? -1 : 0',\n                            '[attr.aria-controls]': '_getPanelId()',\n                            '[attr.aria-expanded]': '_isExpanded()',\n                            '[attr.aria-disabled]': 'panel.disabled',\n                            '[class.mat-expanded]': '_isExpanded()',\n                            '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n                            '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n                            '(click)': '_toggle()',\n                            '(keydown)': '_keydown($event)',\n                            '[@.disabled]': '_animationsDisabled',\n                            '(@expansionHeight.start)': '_animationStarted()',\n                            '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\",\n                        },\n                        styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatExpansionPanelHeader.ctorParameters = function () { return [\n            { type: MatExpansionPanel, decorators: [{ type: core.Host }] },\n            { type: core.ElementRef },\n            { type: a11y.FocusMonitor },\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: core.Optional }] }\n        ]; };\n        MatExpansionPanelHeader.propDecorators = {\n            expandedHeight: [{ type: core.Input }],\n            collapsedHeight: [{ type: core.Input }]\n        };\n        return MatExpansionPanelHeader;\n    }());\n    /**\n     * `<mat-panel-description>`\n     *\n     * This directive is to be used inside of the MatExpansionPanelHeader component.\n     */\n    var MatExpansionPanelDescription = /** @class */ (function () {\n        function MatExpansionPanelDescription() {\n        }\n        MatExpansionPanelDescription.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-panel-description',\n                        host: {\n                            class: 'mat-expansion-panel-header-description'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelDescription;\n    }());\n    /**\n     * `<mat-panel-title>`\n     *\n     * This directive is to be used inside of the MatExpansionPanelHeader component.\n     */\n    var MatExpansionPanelTitle = /** @class */ (function () {\n        function MatExpansionPanelTitle() {\n        }\n        MatExpansionPanelTitle.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-panel-title',\n                        host: {\n                            class: 'mat-expansion-panel-header-title'\n                        }\n                    },] }\n        ];\n        return MatExpansionPanelTitle;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Directive for a Material Design Accordion.\n     */\n    var MatAccordion = /** @class */ (function (_super) {\n        __extends(MatAccordion, _super);\n        function MatAccordion() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            /** Headers belonging to this accordion. */\n            _this._ownHeaders = new core.QueryList();\n            _this._hideToggle = false;\n            /**\n             * Display mode used for all expansion panels in the accordion. Currently two display\n             * modes exist:\n             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n             *     panel at a different elevation from the rest of the accordion.\n             *  flat - no spacing is placed around expanded panels, showing all panels at the same\n             *     elevation.\n             */\n            _this.displayMode = 'default';\n            /** The position of the expansion indicator. */\n            _this.togglePosition = 'after';\n            return _this;\n        }\n        Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n            /** Whether the expansion indicator should be hidden. */\n            get: function () { return this._hideToggle; },\n            set: function (show) { this._hideToggle = coercion.coerceBooleanProperty(show); },\n            enumerable: true,\n            configurable: true\n        });\n        MatAccordion.prototype.ngAfterContentInit = function () {\n            var _this = this;\n            this._headers.changes\n                .pipe(operators.startWith(this._headers))\n                .subscribe(function (headers) {\n                _this._ownHeaders.reset(headers.filter(function (header) { return header.panel.accordion === _this; }));\n                _this._ownHeaders.notifyOnChanges();\n            });\n            this._keyManager = new a11y.FocusKeyManager(this._ownHeaders).withWrap();\n        };\n        /** Handles keyboard events coming in from the panel headers. */\n        MatAccordion.prototype._handleHeaderKeydown = function (event) {\n            var keyCode = event.keyCode;\n            var manager = this._keyManager;\n            if (keyCode === keycodes.HOME) {\n                if (!keycodes.hasModifierKey(event)) {\n                    manager.setFirstItemActive();\n                    event.preventDefault();\n                }\n            }\n            else if (keyCode === keycodes.END) {\n                if (!keycodes.hasModifierKey(event)) {\n                    manager.setLastItemActive();\n                    event.preventDefault();\n                }\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n        };\n        MatAccordion.prototype._handleHeaderFocus = function (header) {\n            this._keyManager.updateActiveItem(header);\n        };\n        MatAccordion.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-accordion',\n                        exportAs: 'matAccordion',\n                        inputs: ['multi'],\n                        providers: [{\n                                provide: MAT_ACCORDION,\n                                useExisting: MatAccordion\n                            }],\n                        host: {\n                            class: 'mat-accordion',\n                            // Class binding which is only used by the test harness as there is no other\n                            // way for the harness to detect if multiple panel support is enabled.\n                            '[class.mat-accordion-multi]': 'this.multi',\n                        }\n                    },] }\n        ];\n        MatAccordion.propDecorators = {\n            _headers: [{ type: core.ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n            hideToggle: [{ type: core.Input }],\n            displayMode: [{ type: core.Input }],\n            togglePosition: [{ type: core.Input }]\n        };\n        return MatAccordion;\n    }(accordion.CdkAccordion));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatExpansionModule = /** @class */ (function () {\n        function MatExpansionModule() {\n        }\n        MatExpansionModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [common.CommonModule, accordion.CdkAccordionModule, portal.PortalModule],\n                        exports: [\n                            MatAccordion,\n                            MatExpansionPanel,\n                            MatExpansionPanelActionRow,\n                            MatExpansionPanelHeader,\n                            MatExpansionPanelTitle,\n                            MatExpansionPanelDescription,\n                            MatExpansionPanelContent,\n                        ],\n                        declarations: [\n                            MatAccordion,\n                            MatExpansionPanel,\n                            MatExpansionPanelActionRow,\n                            MatExpansionPanelHeader,\n                            MatExpansionPanelTitle,\n                            MatExpansionPanelDescription,\n                            MatExpansionPanelContent,\n                        ],\n                    },] }\n        ];\n        return MatExpansionModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.EXPANSION_PANEL_ANIMATION_TIMING = EXPANSION_PANEL_ANIMATION_TIMING;\n    exports.MAT_ACCORDION = MAT_ACCORDION;\n    exports.MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = MAT_EXPANSION_PANEL_DEFAULT_OPTIONS;\n    exports.MatAccordion = MatAccordion;\n    exports.MatExpansionModule = MatExpansionModule;\n    exports.MatExpansionPanel = MatExpansionPanel;\n    exports.MatExpansionPanelActionRow = MatExpansionPanelActionRow;\n    exports.MatExpansionPanelContent = MatExpansionPanelContent;\n    exports.MatExpansionPanelDescription = MatExpansionPanelDescription;\n    exports.MatExpansionPanelHeader = MatExpansionPanelHeader;\n    exports.MatExpansionPanelTitle = MatExpansionPanelTitle;\n    exports.matExpansionAnimations = matExpansionAnimations;\n    exports.Éµ0 = Éµ0;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-expansion.umd.js.map\n"]}