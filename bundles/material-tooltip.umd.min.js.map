{"version":3,"sources":["src/material/material-tooltip.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","tooltip","cdk","overlay","a11y","common","core","scrolling","bidi","coercion","keycodes","layout","platform","portal","rxjs","operators","animations","this","core$1","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","matTooltipAnimations","tooltipState","trigger","state","style","opacity","transform","transition","animate","keyframes","offset","SCROLL_THROTTLE_MS","passiveListenerOptions","normalizePassiveListenerOptions","passive","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_hammerLoader","_this","_position","_disabled","touchGestures","_message","_passiveListeners","Map","_destroyed","Subject","_handleKeydown","event","_isTooltipVisible","keyCode","ESCAPE","hasModifierKey","preventDefault","stopPropagation","run","hide","_scrollStrategy","monitor","pipe","takeUntil","subscribe","origin","show","runOutsideAngular","nativeElement","addEventListener","defineProperty","get","set","value","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","enumerable","configurable","coerceBooleanProperty","removeDescription","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","ngOnInit","_setupPointerEvents","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","clear","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","ComponentPortal","TooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","_a","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","take","tooltipClass","IOS","ANDROID","_disableNativeGesturesIfNecessary","touchendListener","setTimeout","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","decorators","type","Directive","args","selector","exportAs","ctorParameters","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","Inject","Directionality","Optional","propDecorators","Input","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Breakpoints","Handset","_animationStart","_animationDone","toState","_handleBodyInteraction","markForCheck","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[style.zoom]","(body:click)","aria-hidden","styles","ChangeDetectorRef","BreakpointObserver","MatTooltipModule","NgModule","imports","A11yModule","CommonModule","OverlayModule","MatCommonModule","CdkScrollableModule","declarations","entryComponents","providers","TOOLTIP_PANEL_CLASS"],"mappings":"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","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/overlay'), require('@angular/cdk/a11y'), require('@angular/common'), require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/scrolling'), require('@angular/cdk/bidi'), require('@angular/cdk/coercion'), require('@angular/cdk/keycodes'), require('@angular/cdk/layout'), require('@angular/cdk/platform'), require('@angular/cdk/portal'), require('rxjs'), require('rxjs/operators'), require('@angular/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/tooltip', ['exports', '@angular/cdk/overlay', '@angular/cdk/a11y', '@angular/common', '@angular/core', '@angular/material/core', '@angular/cdk/scrolling', '@angular/cdk/bidi', '@angular/cdk/coercion', '@angular/cdk/keycodes', '@angular/cdk/layout', '@angular/cdk/platform', '@angular/cdk/portal', 'rxjs', 'rxjs/operators', '@angular/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.tooltip = {}), global.ng.cdk.overlay, global.ng.cdk.a11y, global.ng.common, global.ng.core, global.ng.material.core, global.ng.cdk.scrolling, global.ng.cdk.bidi, global.ng.cdk.coercion, global.ng.cdk.keycodes, global.ng.cdk.layout, global.ng.cdk.platform, global.ng.cdk.portal, global.rxjs, global.rxjs.operators, global.ng.animations));\n}(this, (function (exports, overlay, a11y, common, core, core$1, scrolling, bidi, coercion, keycodes, layout, platform, portal, rxjs, operators, animations) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Animations used by MatTooltip.\n     * @docs-private\n     */\n    var matTooltipAnimations = {\n        /** Animation that transitions a tooltip in and out. */\n        tooltipState: animations.trigger('state', [\n            animations.state('initial, void, hidden', animations.style({ opacity: 0, transform: 'scale(0)' })),\n            animations.state('visible', animations.style({ transform: 'scale(1)' })),\n            animations.transition('* => visible', animations.animate('200ms cubic-bezier(0, 0, 0.2, 1)', animations.keyframes([\n                animations.style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n                animations.style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n                animations.style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n            ]))),\n            animations.transition('* => hidden', animations.animate('100ms cubic-bezier(0, 0, 0.2, 1)', animations.style({ opacity: 0 }))),\n        ])\n    };\n\n    /** Time in ms to throttle repositioning after scroll events. */\n    var SCROLL_THROTTLE_MS = 20;\n    /** CSS class that will be attached to the overlay panel. */\n    var TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n    /** Options used to bind passive event listeners. */\n    var passiveListenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\n    /**\n     * Time between the user putting the pointer on a tooltip\n     * trigger and the long press event being fired.\n     */\n    var LONGPRESS_DELAY = 500;\n    /**\n     * Creates an error to be thrown if the user supplied an invalid tooltip position.\n     * @docs-private\n     */\n    function getMatTooltipInvalidPositionError(position) {\n        return Error(\"Tooltip position \\\"\" + position + \"\\\" is invalid.\");\n    }\n    /** Injection token that determines the scroll handling while a tooltip is visible. */\n    var MAT_TOOLTIP_SCROLL_STRATEGY = new core.InjectionToken('mat-tooltip-scroll-strategy');\n    /** @docs-private */\n    function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n        return function () { return overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }); };\n    }\n    /** @docs-private */\n    var MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n        provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n        deps: [overlay.Overlay],\n        useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n    };\n    /** Injection token to be used to override the default options for `matTooltip`. */\n    var MAT_TOOLTIP_DEFAULT_OPTIONS = new core.InjectionToken('mat-tooltip-default-options', {\n        providedIn: 'root',\n        factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n    /** @docs-private */\n    function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n        return {\n            showDelay: 0,\n            hideDelay: 0,\n            touchendHideDelay: 1500,\n        };\n    }\n    /**\n     * Directive that attaches a material design tooltip to the host element. Animates the showing and\n     * hiding of a tooltip provided position (defaults to below the element).\n     *\n     * https://material.io/design/components/tooltips.html\n     */\n    var MatTooltip = /** @class */ (function () {\n        function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n        /**\n         * @deprecated _hammerLoader parameter to be removed.\n         * @breaking-change 9.0.0\n         */\n        // Note that we need to give Angular something to inject here so it doesn't throw.\n        _hammerLoader) {\n            var _this = this;\n            this._overlay = _overlay;\n            this._elementRef = _elementRef;\n            this._scrollDispatcher = _scrollDispatcher;\n            this._viewContainerRef = _viewContainerRef;\n            this._ngZone = _ngZone;\n            this._platform = _platform;\n            this._ariaDescriber = _ariaDescriber;\n            this._focusMonitor = _focusMonitor;\n            this._dir = _dir;\n            this._defaultOptions = _defaultOptions;\n            this._position = 'below';\n            this._disabled = false;\n            /** The default delay in ms before showing the tooltip after show is called */\n            this.showDelay = this._defaultOptions.showDelay;\n            /** The default delay in ms before hiding the tooltip after hide is called */\n            this.hideDelay = this._defaultOptions.hideDelay;\n            /**\n             * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n             * uses a long press gesture to show and hide, however it can conflict with the native browser\n             * gestures. To work around the conflict, Angular Material disables native gestures on the\n             * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n             * elements). The different values for this option configure the touch event handling as follows:\n             * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n             *   browser gestures on particular elements. In particular, it allows text selection on inputs\n             *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n             * - `on` - Enables touch gestures for all elements and disables native\n             *   browser gestures with no exceptions.\n             * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n             *   showing on touch devices.\n             */\n            this.touchGestures = 'auto';\n            this._message = '';\n            /** Manually-bound passive event listeners. */\n            this._passiveListeners = new Map();\n            /** Emits when the component is destroyed. */\n            this._destroyed = new rxjs.Subject();\n            /**\n             * Handles the keydown events on the host element.\n             * Needs to be an arrow function so that we can use it in addEventListener.\n             */\n            this._handleKeydown = function (event) {\n                if (_this._isTooltipVisible() && event.keyCode === keycodes.ESCAPE && !keycodes.hasModifierKey(event)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    _this._ngZone.run(function () { return _this.hide(0); });\n                }\n            };\n            this._scrollStrategy = scrollStrategy;\n            if (_defaultOptions) {\n                if (_defaultOptions.position) {\n                    this.position = _defaultOptions.position;\n                }\n                if (_defaultOptions.touchGestures) {\n                    this.touchGestures = _defaultOptions.touchGestures;\n                }\n            }\n            _focusMonitor.monitor(_elementRef)\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function (origin) {\n                // Note that the focus monitor runs outside the Angular zone.\n                if (!origin) {\n                    _ngZone.run(function () { return _this.hide(0); });\n                }\n                else if (origin === 'keyboard') {\n                    _ngZone.run(function () { return _this.show(); });\n                }\n            });\n            _ngZone.runOutsideAngular(function () {\n                _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n            });\n        }\n        Object.defineProperty(MatTooltip.prototype, \"position\", {\n            /** Allows the user to define the position of the tooltip relative to the parent element */\n            get: function () { return this._position; },\n            set: function (value) {\n                if (value !== this._position) {\n                    this._position = value;\n                    if (this._overlayRef) {\n                        this._updatePosition();\n                        if (this._tooltipInstance) {\n                            this._tooltipInstance.show(0);\n                        }\n                        this._overlayRef.updatePosition();\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"disabled\", {\n            /** Disables the display of the tooltip. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                // If tooltip is disabled, hide immediately.\n                if (this._disabled) {\n                    this.hide(0);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"message\", {\n            /** The message to be displayed in the tooltip */\n            get: function () { return this._message; },\n            set: function (value) {\n                var _this = this;\n                this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n                // If the message is not a string (e.g. number), convert it to a string and trim it.\n                this._message = value != null ? (\"\" + value).trim() : '';\n                if (!this._message && this._isTooltipVisible()) {\n                    this.hide(0);\n                }\n                else {\n                    this._updateTooltipMessage();\n                    this._ngZone.runOutsideAngular(function () {\n                        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                        Promise.resolve().then(function () {\n                            _this._ariaDescriber.describe(_this._elementRef.nativeElement, _this.message);\n                        });\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatTooltip.prototype, \"tooltipClass\", {\n            /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n            get: function () { return this._tooltipClass; },\n            set: function (value) {\n                this._tooltipClass = value;\n                if (this._tooltipInstance) {\n                    this._setTooltipClass(this._tooltipClass);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Setup styling-specific things\n         */\n        MatTooltip.prototype.ngOnInit = function () {\n            // This needs to happen in `ngOnInit` so the initial values for all inputs have been set.\n            this._setupPointerEvents();\n        };\n        /**\n         * Dispose the tooltip when destroyed.\n         */\n        MatTooltip.prototype.ngOnDestroy = function () {\n            var nativeElement = this._elementRef.nativeElement;\n            clearTimeout(this._touchstartTimeout);\n            if (this._overlayRef) {\n                this._overlayRef.dispose();\n                this._tooltipInstance = null;\n            }\n            // Clean up the event listeners set in the constructor\n            nativeElement.removeEventListener('keydown', this._handleKeydown);\n            this._passiveListeners.forEach(function (listener, event) {\n                nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n            });\n            this._passiveListeners.clear();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._ariaDescriber.removeDescription(nativeElement, this.message);\n            this._focusMonitor.stopMonitoring(nativeElement);\n        };\n        /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n        MatTooltip.prototype.show = function (delay) {\n            var _this = this;\n            if (delay === void 0) { delay = this.showDelay; }\n            if (this.disabled || !this.message || (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n                return;\n            }\n            var overlayRef = this._createOverlay();\n            this._detach();\n            this._portal = this._portal || new portal.ComponentPortal(TooltipComponent, this._viewContainerRef);\n            this._tooltipInstance = overlayRef.attach(this._portal).instance;\n            this._tooltipInstance.afterHidden()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this._detach(); });\n            this._setTooltipClass(this._tooltipClass);\n            this._updateTooltipMessage();\n            this._tooltipInstance.show(delay);\n        };\n        /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n        MatTooltip.prototype.hide = function (delay) {\n            if (delay === void 0) { delay = this.hideDelay; }\n            if (this._tooltipInstance) {\n                this._tooltipInstance.hide(delay);\n            }\n        };\n        /** Shows/hides the tooltip */\n        MatTooltip.prototype.toggle = function () {\n            this._isTooltipVisible() ? this.hide() : this.show();\n        };\n        /** Returns true if the tooltip is currently visible to the user */\n        MatTooltip.prototype._isTooltipVisible = function () {\n            return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n        };\n        /** Create the overlay config and position strategy */\n        MatTooltip.prototype._createOverlay = function () {\n            var _this = this;\n            if (this._overlayRef) {\n                return this._overlayRef;\n            }\n            var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n            // Create connected position strategy that listens for scroll events to reposition.\n            var strategy = this._overlay.position()\n                .flexibleConnectedTo(this._elementRef)\n                .withTransformOriginOn('.mat-tooltip')\n                .withFlexibleDimensions(false)\n                .withViewportMargin(8)\n                .withScrollableContainers(scrollableAncestors);\n            strategy.positionChanges.pipe(operators.takeUntil(this._destroyed)).subscribe(function (change) {\n                if (_this._tooltipInstance) {\n                    if (change.scrollableViewProperties.isOverlayClipped && _this._tooltipInstance.isVisible()) {\n                        // After position changes occur and the overlay is clipped by\n                        // a parent scrollable then close the tooltip.\n                        _this._ngZone.run(function () { return _this.hide(0); });\n                    }\n                }\n            });\n            this._overlayRef = this._overlay.create({\n                direction: this._dir,\n                positionStrategy: strategy,\n                panelClass: TOOLTIP_PANEL_CLASS,\n                scrollStrategy: this._scrollStrategy()\n            });\n            this._updatePosition();\n            this._overlayRef.detachments()\n                .pipe(operators.takeUntil(this._destroyed))\n                .subscribe(function () { return _this._detach(); });\n            return this._overlayRef;\n        };\n        /** Detaches the currently-attached tooltip. */\n        MatTooltip.prototype._detach = function () {\n            if (this._overlayRef && this._overlayRef.hasAttached()) {\n                this._overlayRef.detach();\n            }\n            this._tooltipInstance = null;\n        };\n        /** Updates the position of the current tooltip. */\n        MatTooltip.prototype._updatePosition = function () {\n            var position = this._overlayRef.getConfig().positionStrategy;\n            var origin = this._getOrigin();\n            var overlay = this._getOverlayPosition();\n            position.withPositions([\n                __assign(__assign({}, origin.main), overlay.main),\n                __assign(__assign({}, origin.fallback), overlay.fallback)\n            ]);\n        };\n        /**\n         * Returns the origin position and a fallback position based on the user's position preference.\n         * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n         */\n        MatTooltip.prototype._getOrigin = function () {\n            var isLtr = !this._dir || this._dir.value == 'ltr';\n            var position = this.position;\n            var originPosition;\n            if (position == 'above' || position == 'below') {\n                originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                originPosition = { originX: 'start', originY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                originPosition = { originX: 'end', originY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            var _a = this._invertPosition(originPosition.originX, originPosition.originY), x = _a.x, y = _a.y;\n            return {\n                main: originPosition,\n                fallback: { originX: x, originY: y }\n            };\n        };\n        /** Returns the overlay position and a fallback position based on the user's preference */\n        MatTooltip.prototype._getOverlayPosition = function () {\n            var isLtr = !this._dir || this._dir.value == 'ltr';\n            var position = this.position;\n            var overlayPosition;\n            if (position == 'above') {\n                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n            }\n            else if (position == 'below') {\n                overlayPosition = { overlayX: 'center', overlayY: 'top' };\n            }\n            else if (position == 'before' ||\n                (position == 'left' && isLtr) ||\n                (position == 'right' && !isLtr)) {\n                overlayPosition = { overlayX: 'end', overlayY: 'center' };\n            }\n            else if (position == 'after' ||\n                (position == 'right' && isLtr) ||\n                (position == 'left' && !isLtr)) {\n                overlayPosition = { overlayX: 'start', overlayY: 'center' };\n            }\n            else {\n                throw getMatTooltipInvalidPositionError(position);\n            }\n            var _a = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY), x = _a.x, y = _a.y;\n            return {\n                main: overlayPosition,\n                fallback: { overlayX: x, overlayY: y }\n            };\n        };\n        /** Updates the tooltip message and repositions the overlay according to the new message length */\n        MatTooltip.prototype._updateTooltipMessage = function () {\n            var _this = this;\n            // Must wait for the message to be painted to the tooltip so that the overlay can properly\n            // calculate the correct positioning based on the size of the text.\n            if (this._tooltipInstance) {\n                this._tooltipInstance.message = this.message;\n                this._tooltipInstance._markForCheck();\n                this._ngZone.onMicrotaskEmpty.asObservable().pipe(operators.take(1), operators.takeUntil(this._destroyed)).subscribe(function () {\n                    if (_this._tooltipInstance) {\n                        _this._overlayRef.updatePosition();\n                    }\n                });\n            }\n        };\n        /** Updates the tooltip class */\n        MatTooltip.prototype._setTooltipClass = function (tooltipClass) {\n            if (this._tooltipInstance) {\n                this._tooltipInstance.tooltipClass = tooltipClass;\n                this._tooltipInstance._markForCheck();\n            }\n        };\n        /** Inverts an overlay position. */\n        MatTooltip.prototype._invertPosition = function (x, y) {\n            if (this.position === 'above' || this.position === 'below') {\n                if (y === 'top') {\n                    y = 'bottom';\n                }\n                else if (y === 'bottom') {\n                    y = 'top';\n                }\n            }\n            else {\n                if (x === 'end') {\n                    x = 'start';\n                }\n                else if (x === 'start') {\n                    x = 'end';\n                }\n            }\n            return { x: x, y: y };\n        };\n        /** Binds the pointer events to the tooltip trigger. */\n        MatTooltip.prototype._setupPointerEvents = function () {\n            var _this = this;\n            // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n            // first tap from firing its click event or can cause the tooltip to open for clicks.\n            if (!this._platform.IOS && !this._platform.ANDROID) {\n                this._passiveListeners\n                    .set('mouseenter', function () { return _this.show(); })\n                    .set('mouseleave', function () { return _this.hide(); });\n            }\n            else if (this.touchGestures !== 'off') {\n                this._disableNativeGesturesIfNecessary();\n                var touchendListener = function () {\n                    clearTimeout(_this._touchstartTimeout);\n                    _this.hide(_this._defaultOptions.touchendHideDelay);\n                };\n                this._passiveListeners\n                    .set('touchend', touchendListener)\n                    .set('touchcancel', touchendListener)\n                    .set('touchstart', function () {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    clearTimeout(_this._touchstartTimeout);\n                    _this._touchstartTimeout = setTimeout(function () { return _this.show(); }, LONGPRESS_DELAY);\n                });\n            }\n            this._passiveListeners.forEach(function (listener, event) {\n                _this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n            });\n        };\n        /** Disables the native browser gestures, based on how the tooltip has been configured. */\n        MatTooltip.prototype._disableNativeGesturesIfNecessary = function () {\n            var element = this._elementRef.nativeElement;\n            var style = element.style;\n            var gestures = this.touchGestures;\n            if (gestures !== 'off') {\n                // If gestures are set to `auto`, we don't disable text selection on inputs and\n                // textareas, because it prevents the user from typing into them on iOS Safari.\n                if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                    style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                        style.MozUserSelect = 'none';\n                }\n                // If we have `auto` gestures and the element uses native HTML dragging,\n                // we don't set `-webkit-user-drag` because it prevents the native behavior.\n                if (gestures === 'on' || !element.draggable) {\n                    style.webkitUserDrag = 'none';\n                }\n                style.touchAction = 'none';\n                style.webkitTapHighlightColor = 'transparent';\n            }\n        };\n        MatTooltip.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matTooltip]',\n                        exportAs: 'matTooltip',\n                    },] }\n        ];\n        /** @nocollapse */\n        MatTooltip.ctorParameters = function () { return [\n            { type: overlay.Overlay },\n            { type: core.ElementRef },\n            { type: scrolling.ScrollDispatcher },\n            { type: core.ViewContainerRef },\n            { type: core.NgZone },\n            { type: platform.Platform },\n            { type: a11y.AriaDescriber },\n            { type: a11y.FocusMonitor },\n            { type: undefined, decorators: [{ type: core.Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n            { type: bidi.Directionality, decorators: [{ type: core.Optional }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n            { type: undefined, decorators: [{ type: core.Inject, args: [core.ElementRef,] }] }\n        ]; };\n        MatTooltip.propDecorators = {\n            position: [{ type: core.Input, args: ['matTooltipPosition',] }],\n            disabled: [{ type: core.Input, args: ['matTooltipDisabled',] }],\n            showDelay: [{ type: core.Input, args: ['matTooltipShowDelay',] }],\n            hideDelay: [{ type: core.Input, args: ['matTooltipHideDelay',] }],\n            touchGestures: [{ type: core.Input, args: ['matTooltipTouchGestures',] }],\n            message: [{ type: core.Input, args: ['matTooltip',] }],\n            tooltipClass: [{ type: core.Input, args: ['matTooltipClass',] }]\n        };\n        return MatTooltip;\n    }());\n    /**\n     * Internal component that wraps the tooltip's content.\n     * @docs-private\n     */\n    var TooltipComponent = /** @class */ (function () {\n        function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n            this._changeDetectorRef = _changeDetectorRef;\n            this._breakpointObserver = _breakpointObserver;\n            /** Property watched by the animation framework to show or hide the tooltip */\n            this._visibility = 'initial';\n            /** Whether interactions on the page should close the tooltip */\n            this._closeOnInteraction = false;\n            /** Subject for notifying that the tooltip has been hidden from the view */\n            this._onHide = new rxjs.Subject();\n            /** Stream that emits whether the user has a handset-sized display.  */\n            this._isHandset = this._breakpointObserver.observe(layout.Breakpoints.Handset);\n        }\n        /**\n         * Shows the tooltip with an animation originating from the provided origin\n         * @param delay Amount of milliseconds to the delay showing the tooltip.\n         */\n        TooltipComponent.prototype.show = function (delay) {\n            var _this = this;\n            // Cancel the delayed hide if it is scheduled\n            if (this._hideTimeoutId) {\n                clearTimeout(this._hideTimeoutId);\n                this._hideTimeoutId = null;\n            }\n            // Body interactions should cancel the tooltip if there is a delay in showing.\n            this._closeOnInteraction = true;\n            this._showTimeoutId = setTimeout(function () {\n                _this._visibility = 'visible';\n                _this._showTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                _this._markForCheck();\n            }, delay);\n        };\n        /**\n         * Begins the animation to hide the tooltip after the provided delay in ms.\n         * @param delay Amount of milliseconds to delay showing the tooltip.\n         */\n        TooltipComponent.prototype.hide = function (delay) {\n            var _this = this;\n            // Cancel the delayed show if it is scheduled\n            if (this._showTimeoutId) {\n                clearTimeout(this._showTimeoutId);\n                this._showTimeoutId = null;\n            }\n            this._hideTimeoutId = setTimeout(function () {\n                _this._visibility = 'hidden';\n                _this._hideTimeoutId = null;\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                _this._markForCheck();\n            }, delay);\n        };\n        /** Returns an observable that notifies when the tooltip has been hidden from view. */\n        TooltipComponent.prototype.afterHidden = function () {\n            return this._onHide.asObservable();\n        };\n        /** Whether the tooltip is being displayed. */\n        TooltipComponent.prototype.isVisible = function () {\n            return this._visibility === 'visible';\n        };\n        TooltipComponent.prototype.ngOnDestroy = function () {\n            this._onHide.complete();\n        };\n        TooltipComponent.prototype._animationStart = function () {\n            this._closeOnInteraction = false;\n        };\n        TooltipComponent.prototype._animationDone = function (event) {\n            var toState = event.toState;\n            if (toState === 'hidden' && !this.isVisible()) {\n                this._onHide.next();\n            }\n            if (toState === 'visible' || toState === 'hidden') {\n                this._closeOnInteraction = true;\n            }\n        };\n        /**\n         * Interactions on the HTML body should close the tooltip immediately as defined in the\n         * material design spec.\n         * https://material.io/design/components/tooltips.html#behavior\n         */\n        TooltipComponent.prototype._handleBodyInteraction = function () {\n            if (this._closeOnInteraction) {\n                this.hide(0);\n            }\n        };\n        /**\n         * Marks that the tooltip needs to be checked in the next change detection run.\n         * Mainly used for rendering the initial text before positioning a tooltip, which\n         * can be problematic in components with OnPush change detection.\n         */\n        TooltipComponent.prototype._markForCheck = function () {\n            this._changeDetectorRef.markForCheck();\n        };\n        TooltipComponent.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-tooltip-component',\n                        template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        animations: [matTooltipAnimations.tooltipState],\n                        host: {\n                            // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                            // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                            '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                            '(body:click)': 'this._handleBodyInteraction()',\n                            'aria-hidden': 'true',\n                        },\n                        styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        TooltipComponent.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: layout.BreakpointObserver }\n        ]; };\n        return TooltipComponent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatTooltipModule = /** @class */ (function () {\n        function MatTooltipModule() {\n        }\n        MatTooltipModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            a11y.A11yModule,\n                            common.CommonModule,\n                            overlay.OverlayModule,\n                            core$1.MatCommonModule,\n                        ],\n                        exports: [MatTooltip, TooltipComponent, core$1.MatCommonModule, scrolling.CdkScrollableModule],\n                        declarations: [MatTooltip, TooltipComponent],\n                        entryComponents: [TooltipComponent],\n                        providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                    },] }\n        ];\n        return MatTooltipModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_TOOLTIP_DEFAULT_OPTIONS = MAT_TOOLTIP_DEFAULT_OPTIONS;\n    exports.MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY = MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY = MAT_TOOLTIP_SCROLL_STRATEGY;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY = MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n    exports.MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER;\n    exports.MatTooltip = MatTooltip;\n    exports.MatTooltipModule = MatTooltipModule;\n    exports.SCROLL_THROTTLE_MS = SCROLL_THROTTLE_MS;\n    exports.TOOLTIP_PANEL_CLASS = TOOLTIP_PANEL_CLASS;\n    exports.TooltipComponent = TooltipComponent;\n    exports.getMatTooltipInvalidPositionError = getMatTooltipInvalidPositionError;\n    exports.matTooltipAnimations = matTooltipAnimations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-tooltip.umd.js.map\n"]}