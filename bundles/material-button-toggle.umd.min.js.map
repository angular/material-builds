{"version":3,"sources":["src/material/material-button-toggle.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","material","buttonToggle","cdk","a11y","coercion","collections","core","forms","this","core$1","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","source","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","defineProperty","prototype","get","set","_this","_buttonToggles","forEach","toggle","name","_markForCheck","enumerable","configurable","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","ngOnInit","SelectionModel","ngAfterContentInit","_a","select","apply","__spread","arguments","length","concat","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_emitChangeEvent","isArray","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","decorators","type","Directive","args","selector","providers","host","role","class","[attr.aria-disabled]","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","exportAs","ctorParameters","ChangeDetectorRef","Optional","Inject","propDecorators","ContentChildren","MatButtonToggle","descendants","Input","vertical","Output","_super","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","__extends","__","constructor","create","id","_appearance","_type","monitor","ngOnDestroy","group","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","Component","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","inputs","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","[attr.tabindex]","[attr.id]","[attr.name]","(focus)","styles","ElementRef","FocusMonitor","String","Attribute","ariaLabel","ViewChild","mixinDisableRipple","MatButtonToggleBase","MatButtonToggleModule","NgModule","imports","MatCommonModule","MatRippleModule","declarations"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,qBAAsBA,QAAQ,yBAA0BA,QAAQ,4BAA6BA,QAAQ,iBAAkBA,QAAQ,kBAAmBA,QAAQ,2BAChO,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,kCAAmC,CAAC,UAAW,oBAAqB,wBAAyB,2BAA4B,gBAAiB,iBAAkB,0BAA2BJ,GACjNA,IAAzBD,EAASA,GAAUO,MAAsBC,GAAKR,EAAOQ,IAAM,GAAIR,EAAOQ,GAAGC,SAAWT,EAAOQ,GAAGC,UAAY,GAAIT,EAAOQ,GAAGC,SAASC,aAAe,IAAKV,EAAOQ,GAAGG,IAAIC,KAAMZ,EAAOQ,GAAGG,IAAIE,SAAUb,EAAOQ,GAAGG,IAAIG,YAAad,EAAOQ,GAAGO,KAAMf,EAAOQ,GAAGQ,MAAOhB,EAAOQ,GAAGC,SAASM,MAHrR,CAIEE,MAAM,SAAWf,EAASU,EAAMC,EAAUC,EAAaC,EAAMC,EAAOE,GAAU;;;;;;;;;;;;;;oFAkB5E,IAAIC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAmG5B,SAASO,EAAOC,EAAGC,GACf,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEM,KAAKR,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAAMF,EAAGG,KAAKP,EAAEQ,OAExE,MAAOC,GAASR,EAAI,CAAEQ,MAAOA,GAC7B,QACI,IACQT,IAAMA,EAAEM,OAAST,EAAIK,EAAU,SAAIL,EAAEM,KAAKD,GAElD,QAAU,GAAID,EAAG,MAAMA,EAAEQ,OAE7B,OAAOL;;;;;;;;AA2EX,IAAIM,EAAoC,IAAI7B,EAAK8B,eAAe,qCAM5DC,EAAyC,CACzCC,QAAS/B,EAAMgC,kBACfC,YAAalC,EAAKmC,YAAW,WAAc,OAAOC,KAClDC,OAAO,GAMPC,EACA,SAASA,MAITC,EAAmB,EAEnBC,EACA,SAASA,EAETC,EAEAd,GACIzB,KAAKuC,OAASA,EACdvC,KAAKyB,MAAQA,GAKjBS,EAAsC,WACtC,SAASA,EAAqBM,EAAiBC,GAC3CzC,KAAKwC,gBAAkBA,EACvBxC,KAAK0C,WAAY,EACjB1C,KAAK2C,WAAY,EACjB3C,KAAK4C,WAAY,EAKjB5C,KAAK6C,8BAAgC,aAErC7C,KAAK8C,WAAa,aAClB9C,KAAK+C,MAAQ,2BAA6BV,IAM1CrC,KAAKgD,YAAc,IAAIlD,EAAKmD,aAE5BjD,KAAKkD,OAAS,IAAIpD,EAAKmD,aACvBjD,KAAKmD,WACDV,GAAkBA,EAAeU,WAAaV,EAAeU,WAAa,WAgPlF,OA9OA9C,OAAO+C,eAAelB,EAAqBmB,UAAW,OAAQ,CAE1DC,IAAK,WAAc,OAAOtD,KAAK+C,OAC/BQ,IAAK,SAAU9B,GACX,IAAI+B,EAAQxD,KACZA,KAAK+C,MAAQtB,EACTzB,KAAKyD,gBACLzD,KAAKyD,eAAeC,SAAQ,SAAUC,GAClCA,EAAOC,KAAOJ,EAAMT,MACpBY,EAAOE,oBAInBC,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAelB,EAAqBmB,UAAW,WAAY,CAE9DC,IAAK,WAAc,OAAOtD,KAAK0C,WAC/Ba,IAAK,SAAU9B,GACXzB,KAAK0C,UAAY9C,EAASoE,sBAAsBvC,IAEpDqC,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAelB,EAAqBmB,UAAW,QAAS,CAE3DC,IAAK,WACD,IAAIW,EAAWjE,KAAKkE,gBAAkBlE,KAAKkE,gBAAgBD,SAAW,GACtE,OAAIjE,KAAKmE,SACEF,EAASG,KAAI,SAAUT,GAAU,OAAOA,EAAOlC,SAEnDwC,EAAS,GAAKA,EAAS,GAAGxC,WAAQ4C,GAE7Cd,IAAK,SAAUe,GACXtE,KAAKuE,qBAAqBD,GAC1BtE,KAAKgD,YAAYwB,KAAKxE,KAAKyB,QAE/BqC,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAelB,EAAqBmB,UAAW,WAAY,CAE9DC,IAAK,WACD,IAAIW,EAAWjE,KAAKkE,gBAAkBlE,KAAKkE,gBAAgBD,SAAW,GACtE,OAAOjE,KAAKmE,SAAWF,EAAYA,EAAS,IAAM,MAEtDH,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAelB,EAAqBmB,UAAW,WAAY,CAE9DC,IAAK,WAAc,OAAOtD,KAAK2C,WAC/BY,IAAK,SAAU9B,GACXzB,KAAK2C,UAAY/C,EAASoE,sBAAsBvC,IAEpDqC,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAelB,EAAqBmB,UAAW,WAAY,CAE9DC,IAAK,WAAc,OAAOtD,KAAK4C,WAC/BW,IAAK,SAAU9B,GACXzB,KAAK4C,UAAYhD,EAASoE,sBAAsBvC,GAC5CzB,KAAKyD,gBACLzD,KAAKyD,eAAeC,SAAQ,SAAUC,GAAU,OAAOA,EAAOE,oBAGtEC,YAAY,EACZC,cAAc,IAElB7B,EAAqBmB,UAAUoB,SAAW,WACtCzE,KAAKkE,gBAAkB,IAAIrE,EAAY6E,eAAe1E,KAAKmE,cAAUE,GAAW,IAEpFnC,EAAqBmB,UAAUsB,mBAAqB,WAChD,IAAIC,GACHA,EAAK5E,KAAKkE,iBAAiBW,OAAOC,MAAMF,EA/MjD,SAASG,IACL,IAAK,IAAI1D,EAAK,GAAIF,EAAI,EAAGA,EAAI6D,UAAUC,OAAQ9D,IAC3CE,EAAKA,EAAG6D,OAAOvE,EAAOqE,UAAU7D,KACpC,OAAOE,EA4M0C0D,CAAS/E,KAAKyD,eAAe0B,QAAO,SAAUxB,GAAU,OAAOA,EAAOyB,cAMvHlD,EAAqBmB,UAAUgC,WAAa,SAAU5D,GAClDzB,KAAKyB,MAAQA,EACbzB,KAAKwC,gBAAgB8C,gBAGzBpD,EAAqBmB,UAAUkC,iBAAmB,SAAUC,GACxDxF,KAAK6C,8BAAgC2C,GAGzCtD,EAAqBmB,UAAUoC,kBAAoB,SAAUD,GACzDxF,KAAK8C,WAAa0C,GAGtBtD,EAAqBmB,UAAUqC,iBAAmB,SAAUC,GACxD3F,KAAK4F,SAAWD,GAGpBzD,EAAqBmB,UAAUwC,iBAAmB,WAC9C,IAAI5B,EAAWjE,KAAKiE,SAChB1B,EAAS/B,MAAMsF,QAAQ7B,GAAYA,EAASA,EAASgB,OAAS,GAAKhB,EACnE8B,EAAQ,IAAIzD,EAAsBC,EAAQvC,KAAKyB,OACnDzB,KAAK6C,8BAA8BkD,EAAMtE,OACzCzB,KAAKkD,OAAOsB,KAAKuB,IASrB7D,EAAqBmB,UAAU2C,kBAAoB,SAAUrC,EAAQkB,EAAQoB,EAAaC,GACtF,IAAI1C,EAAQxD,UACQ,IAAhBiG,IAA0BA,GAAc,QACxB,IAAhBC,IAA0BA,GAAc,GAGvClG,KAAKmE,WAAYnE,KAAKiE,UAAaN,EAAOyB,UAC3CpF,KAAKiE,SAASmB,SAAU,GAExBpF,KAAKkE,gBACDW,EACA7E,KAAKkE,gBAAgBW,OAAOlB,GAG5B3D,KAAKkE,gBAAgBiC,SAASxC,GAIlCuC,GAAc,EAKdA,EACAE,QAAQC,SAAQ,WAAc,OAAO7C,EAAM8C,kBAAkBL,MAG7DjG,KAAKsG,kBAAkBL,IAI/B/D,EAAqBmB,UAAUkD,YAAc,SAAU5C,GACnD,OAAO3D,KAAKkE,iBAAmBlE,KAAKkE,gBAAgBsC,WAAW7C,IAGnEzB,EAAqBmB,UAAUoD,cAAgB,SAAU9C,GACrD,YAA8B,IAAnB3D,KAAK0G,YAGZ1G,KAAKmE,UAAY3D,MAAMsF,QAAQ9F,KAAK0G,WAC7B1G,KAAK0G,UAAUC,MAAK,SAAUlF,GAAS,OAAuB,MAAhBkC,EAAOlC,OAAiBA,IAAUkC,EAAOlC,SAE3FkC,EAAOlC,QAAUzB,KAAK0G,YAGjCxE,EAAqBmB,UAAUkB,qBAAuB,SAAU9C,GAC5D,IAAI+B,EAAQxD,KAEZ,GADAA,KAAK0G,UAAYjF,EACZzB,KAAKyD,eAGV,GAAIzD,KAAKmE,UAAY1C,EAAO,CACxB,IAAKjB,MAAMsF,QAAQrE,GACf,MAAMmF,MAAM,sDAEhB5G,KAAK6G,kBACLpF,EAAMiC,SAAQ,SAAUoD,GAAgB,OAAOtD,EAAMuD,aAAaD,WAGlE9G,KAAK6G,kBACL7G,KAAK+G,aAAatF,IAI1BS,EAAqBmB,UAAUwD,gBAAkB,WAC7C7G,KAAKkE,gBAAgB8C,QACrBhH,KAAKyD,eAAeC,SAAQ,SAAUC,GAAU,OAAOA,EAAOyB,SAAU,MAG5ElD,EAAqBmB,UAAU0D,aAAe,SAAUtF,GACpD,IAAIwF,EAAsBjH,KAAKyD,eAAeyD,MAAK,SAAUvD,GACzD,OAAuB,MAAhBA,EAAOlC,OAAiBkC,EAAOlC,QAAUA,KAEhDwF,IACAA,EAAoB7B,SAAU,EAC9BpF,KAAKkE,gBAAgBW,OAAOoC,KAIpC/E,EAAqBmB,UAAUiD,kBAAoB,SAAUL,GAErDA,GACAjG,KAAK6F,mBAIT7F,KAAKgD,YAAYwB,KAAKxE,KAAKyB,QAE/BS,EAAqBiF,WAAa,CAC9B,CAAEC,KAAMtH,EAAKuH,UAAWC,KAAM,CAAC,CACnBC,SAAU,0BACVC,UAAW,CACP3F,EACA,CAAEC,QAASM,EAA8BJ,YAAaE,IAE1DuF,KAAM,CACFC,KAAQ,QACRC,MAAS,0BACTC,uBAAwB,WACxBC,qCAAsC,WACtCC,sDAAuD,6BAE3DC,SAAU,2BAI1B7F,EAAqB8F,eAAiB,WAAc,MAAO,CACvD,CAAEZ,KAAMtH,EAAKmI,mBACb,CAAEb,UAAM/C,EAAW8C,WAAY,CAAC,CAAEC,KAAMtH,EAAKoI,UAAY,CAAEd,KAAMtH,EAAKqI,OAAQb,KAAM,CAAC3F,QAEzFO,EAAqBkG,eAAiB,CAClC3E,eAAgB,CAAC,CAAE2D,KAAMtH,EAAKuI,gBAAiBf,KAAM,CAACxH,EAAKmC,YAAW,WAAc,OAAOqG,KAAqB,CAGhGC,aAAa,MAE7BpF,WAAY,CAAC,CAAEiE,KAAMtH,EAAK0I,QAC1B5E,KAAM,CAAC,CAAEwD,KAAMtH,EAAK0I,QACpBC,SAAU,CAAC,CAAErB,KAAMtH,EAAK0I,QACxB/G,MAAO,CAAC,CAAE2F,KAAMtH,EAAK0I,QACrBxF,YAAa,CAAC,CAAEoE,KAAMtH,EAAK4I,SAC3BvE,SAAU,CAAC,CAAEiD,KAAMtH,EAAK0I,QACxB5C,SAAU,CAAC,CAAEwB,KAAMtH,EAAK0I,QACxBtF,OAAQ,CAAC,CAAEkE,KAAMtH,EAAK4I,UAEnBxG,EAvQ8B,GAkRrCoG,EAAiC,SAAUK,GAE3C,SAASL,EAAgBM,EAAaC,EAAoBC,EAAaC,EAEvEC,EAAiBvG,GACb,IAAIe,EAAQmF,EAAOvH,KAAKpB,OAASA,KACjCwD,EAAMqF,mBAAqBA,EAC3BrF,EAAMsF,YAAcA,EACpBtF,EAAMuF,cAAgBA,EACtBvF,EAAMyF,mBAAoB,EAC1BzF,EAAM0F,UAAW,EAIjB1F,EAAM2F,eAAiB,KACvB3F,EAAMZ,WAAY,EAElBY,EAAMN,OAAS,IAAIpD,EAAKmD,aACxB,IAAImG,EAAiBC,OAAOL,GAK5B,OAJAxF,EAAM8F,SAAYF,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC7E5F,EAAM+F,kBAAoBX,EAC1BpF,EAAML,WACFV,GAAkBA,EAAeU,WAAaV,EAAeU,WAAa,WACvEK,EA4IX,OAhpBJ,SAASgG,EAAUrJ,EAAGC,GAElB,SAASqJ,IAAOzJ,KAAK0J,YAAcvJ,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEkD,UAAkB,OAANjD,EAAaC,OAAOsJ,OAAOvJ,IAAMqJ,EAAGpG,UAAYjD,EAAEiD,UAAW,IAAIoG,GA2e/ED,CAAUlB,EAAiBK,GAwB3BtI,OAAO+C,eAAekF,EAAgBjF,UAAW,WAAY,CAEzDC,IAAK,WAAc,OAAOtD,KAAK4J,GAAK,WACpC9F,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAekF,EAAgBjF,UAAW,aAAc,CAE3DC,IAAK,WACD,OAAOtD,KAAKuJ,kBAAoBvJ,KAAKuJ,kBAAkBpG,WAAanD,KAAK6J,aAE7EtG,IAAK,SAAU9B,GACXzB,KAAK6J,YAAcpI,GAEvBqC,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAekF,EAAgBjF,UAAW,UAAW,CAExDC,IAAK,WACD,OAAOtD,KAAKuJ,kBAAoBvJ,KAAKuJ,kBAAkBhD,YAAYvG,MAAQA,KAAKkJ,UAEpF3F,IAAK,SAAU9B,GACX,IAAI6C,EAAW1E,EAASoE,sBAAsBvC,GAC1C6C,IAAatE,KAAKkJ,WAClBlJ,KAAKkJ,SAAW5E,EACZtE,KAAKuJ,mBACLvJ,KAAKuJ,kBAAkBvD,kBAAkBhG,KAAMA,KAAKkJ,UAExDlJ,KAAK6I,mBAAmBvD,iBAGhCxB,YAAY,EACZC,cAAc,IAElB1D,OAAO+C,eAAekF,EAAgBjF,UAAW,WAAY,CAEzDC,IAAK,WACD,OAAOtD,KAAK4C,WAAc5C,KAAKuJ,mBAAqBvJ,KAAKuJ,kBAAkB3D,UAE/ErC,IAAK,SAAU9B,GAASzB,KAAK4C,UAAYhD,EAASoE,sBAAsBvC,IACxEqC,YAAY,EACZC,cAAc,IAElBuE,EAAgBjF,UAAUoB,SAAW,WACjCzE,KAAKiJ,kBAAoBjJ,KAAKuJ,oBAAsBvJ,KAAKuJ,kBAAkBpF,SAC3EnE,KAAK8J,MAAQ9J,KAAKiJ,kBAAoB,QAAU,WAChDjJ,KAAK4J,GAAK5J,KAAK4J,IAAM,qBAAuBvH,IACxCrC,KAAKiJ,oBACLjJ,KAAK4D,KAAO5D,KAAKuJ,kBAAkB3F,MAEnC5D,KAAKuJ,mBAAqBvJ,KAAKuJ,kBAAkB9C,cAAczG,QAC/DA,KAAKoF,SAAU,GAEnBpF,KAAK+I,cAAcgB,QAAQ/J,KAAK8I,aAAa,IAEjDR,EAAgBjF,UAAU2G,YAAc,WACpC,IAAIC,EAAQjK,KAAKuJ,kBACjBvJ,KAAK+I,cAAcmB,eAAelK,KAAK8I,aAGnCmB,GAASA,EAAM1D,YAAYvG,OAC3BiK,EAAMjE,kBAAkBhG,MAAM,GAAO,GAAO,IAIpDsI,EAAgBjF,UAAU8G,MAAQ,SAAUC,GACxCpK,KAAKqK,eAAeC,cAAcH,MAAMC,IAG5C9B,EAAgBjF,UAAUkH,eAAiB,WACvC,IAAIC,IAAaxK,KAAKiJ,oBAA4BjJ,KAAKkJ,SACnDsB,IAAexK,KAAKkJ,WACpBlJ,KAAKkJ,SAAWsB,EACZxK,KAAKuJ,oBACLvJ,KAAKuJ,kBAAkBvD,kBAAkBhG,KAAMA,KAAKkJ,UAAU,GAC9DlJ,KAAKuJ,kBAAkBzG,eAI/B9C,KAAKkD,OAAOsB,KAAK,IAAIlC,EAAsBtC,KAAMA,KAAKyB,SAO1D6G,EAAgBjF,UAAUQ,cAAgB,WAGtC7D,KAAK6I,mBAAmBvD,gBAE5BgD,EAAgBnB,WAAa,CACzB,CAAEC,KAAMtH,EAAK2K,UAAWnD,KAAM,CAAC,CACnBC,SAAU,oBACVmD,SAAU,otBACVC,cAAe7K,EAAK8K,kBAAkBC,KACtC9C,SAAU,kBACV+C,gBAAiBhL,EAAKiL,wBAAwBC,OAC9CC,OAAQ,CAAC,iBACTxD,KAAM,CACFyD,uCAAwC,qBACxCC,oCAAqC,UACrCC,qCAAsC,WACtCC,gDAAiD,4BACjD1D,MAAS,oBAGT2D,kBAAmB,KACnBC,YAAa,KACbC,cAAe,OACfC,UAAW,WAEfC,OAAQ,CAAC,mxFAIzBpD,EAAgBN,eAAiB,WAAc,MAAO,CAClD,CAAEZ,KAAMlF,EAAsBiF,WAAY,CAAC,CAAEC,KAAMtH,EAAKoI,YACxD,CAAEd,KAAMtH,EAAKmI,mBACb,CAAEb,KAAMtH,EAAK6L,YACb,CAAEvE,KAAMzH,EAAKiM,cACb,CAAExE,KAAMyE,OAAQ1E,WAAY,CAAC,CAAEC,KAAMtH,EAAKgM,UAAWxE,KAAM,CAAC,eAC5D,CAAEF,UAAM/C,EAAW8C,WAAY,CAAC,CAAEC,KAAMtH,EAAKoI,UAAY,CAAEd,KAAMtH,EAAKqI,OAAQb,KAAM,CAAC3F,QAEzF2G,EAAgBF,eAAiB,CAC7B2D,UAAW,CAAC,CAAE3E,KAAMtH,EAAK0I,MAAOlB,KAAM,CAAC,gBACvC6B,eAAgB,CAAC,CAAE/B,KAAMtH,EAAK0I,MAAOlB,KAAM,CAAC,qBAC5C+C,eAAgB,CAAC,CAAEjD,KAAMtH,EAAKkM,UAAW1E,KAAM,CAAC,YAChDsC,GAAI,CAAC,CAAExC,KAAMtH,EAAK0I,QAClB5E,KAAM,CAAC,CAAEwD,KAAMtH,EAAK0I,QACpB/G,MAAO,CAAC,CAAE2F,KAAMtH,EAAK0I,QACrBc,SAAU,CAAC,CAAElC,KAAMtH,EAAK0I,QACxBrF,WAAY,CAAC,CAAEiE,KAAMtH,EAAK0I,QAC1BpD,QAAS,CAAC,CAAEgC,KAAMtH,EAAK0I,QACvB5C,SAAU,CAAC,CAAEwB,KAAMtH,EAAK0I,QACxBtF,OAAQ,CAAC,CAAEkE,KAAMtH,EAAK4I,UAEnBJ,EAnKyB,CAFJrI,EAAOgM,oBAJnC,SAASC,SAmLTC,EAAuC,WACvC,SAASA,KAST,OAPAA,EAAsBhF,WAAa,CAC/B,CAAEC,KAAMtH,EAAKsM,SAAU9E,KAAM,CAAC,CAClB+E,QAAS,CAACpM,EAAOqM,gBAAiBrM,EAAOsM,iBACzCtN,QAAS,CAACgB,EAAOqM,gBAAiBpK,EAAsBoG,GACxDkE,aAAc,CAACtK,EAAsBoG,OAG9C6D,EAV+B;;;;;;;;AAyB1ClN,EAAQ0C,kCAAoCA,EAC5C1C,EAAQ4C,uCAAyCA,EACjD5C,EAAQqJ,gBAAkBA,EAC1BrJ,EAAQqD,sBAAwBA,EAChCrD,EAAQiD,qBAAuBA,EAC/BjD,EAAQmD,6BAA+BA,EACvCnD,EAAQkN,sBAAwBA,EAEhC9L,OAAO+C,eAAenE,EAAS,aAAc,CAAEwC,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/a11y'), require('@angular/cdk/coercion'), require('@angular/cdk/collections'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/button-toggle', ['exports', '@angular/cdk/a11y', '@angular/cdk/coercion', '@angular/cdk/collections', '@angular/core', '@angular/forms', '@angular/material/core'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.buttonToggle = {}), global.ng.cdk.a11y, global.ng.cdk.coercion, global.ng.cdk.collections, global.ng.core, global.ng.forms, global.ng.material.core));\n}(this, (function (exports, a11y, coercion, collections, core, forms, core$1) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injection token that can be used to configure the\n     * default options for all button toggles within an app.\n     */\n    var MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new core.InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n    /**\n     * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n     * This allows it to support [(ngModel)].\n     * @docs-private\n     */\n    var MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n        provide: forms.NG_VALUE_ACCESSOR,\n        useExisting: core.forwardRef(function () { return MatButtonToggleGroup; }),\n        multi: true\n    };\n    /**\n     * @deprecated Use `MatButtonToggleGroup` instead.\n     * @breaking-change 8.0.0\n     */\n    var MatButtonToggleGroupMultiple = /** @class */ (function () {\n        function MatButtonToggleGroupMultiple() {\n        }\n        return MatButtonToggleGroupMultiple;\n    }());\n    var _uniqueIdCounter = 0;\n    /** Change event object emitted by MatButtonToggle. */\n    var MatButtonToggleChange = /** @class */ (function () {\n        function MatButtonToggleChange(\n        /** The MatButtonToggle that emits the event. */\n        source, \n        /** The value assigned to the MatButtonToggle. */\n        value) {\n            this.source = source;\n            this.value = value;\n        }\n        return MatButtonToggleChange;\n    }());\n    /** Exclusive selection button toggle group that behaves like a radio-button group. */\n    var MatButtonToggleGroup = /** @class */ (function () {\n        function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n            this._changeDetector = _changeDetector;\n            this._vertical = false;\n            this._multiple = false;\n            this._disabled = false;\n            /**\n             * The method to be called in order to update ngModel.\n             * Now `ngModel` binding is not supported in multiple selection mode.\n             */\n            this._controlValueAccessorChangeFn = function () { };\n            /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n            this._onTouched = function () { };\n            this._name = \"mat-button-toggle-group-\" + _uniqueIdCounter++;\n            /**\n             * Event that emits whenever the value of the group changes.\n             * Used to facilitate two-way data binding.\n             * @docs-private\n             */\n            this.valueChange = new core.EventEmitter();\n            /** Event emitted when the group's value changes. */\n            this.change = new core.EventEmitter();\n            this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n        }\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"name\", {\n            /** `name` attribute for the underlying `input` element. */\n            get: function () { return this._name; },\n            set: function (value) {\n                var _this = this;\n                this._name = value;\n                if (this._buttonToggles) {\n                    this._buttonToggles.forEach(function (toggle) {\n                        toggle.name = _this._name;\n                        toggle._markForCheck();\n                    });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"vertical\", {\n            /** Whether the toggle group is vertical. */\n            get: function () { return this._vertical; },\n            set: function (value) {\n                this._vertical = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"value\", {\n            /** Value of the toggle group. */\n            get: function () {\n                var selected = this._selectionModel ? this._selectionModel.selected : [];\n                if (this.multiple) {\n                    return selected.map(function (toggle) { return toggle.value; });\n                }\n                return selected[0] ? selected[0].value : undefined;\n            },\n            set: function (newValue) {\n                this._setSelectionByValue(newValue);\n                this.valueChange.emit(this.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"selected\", {\n            /** Selected button toggles in the group. */\n            get: function () {\n                var selected = this._selectionModel ? this._selectionModel.selected : [];\n                return this.multiple ? selected : (selected[0] || null);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"multiple\", {\n            /** Whether multiple button toggles can be selected. */\n            get: function () { return this._multiple; },\n            set: function (value) {\n                this._multiple = coercion.coerceBooleanProperty(value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggleGroup.prototype, \"disabled\", {\n            /** Whether multiple button toggle group is disabled. */\n            get: function () { return this._disabled; },\n            set: function (value) {\n                this._disabled = coercion.coerceBooleanProperty(value);\n                if (this._buttonToggles) {\n                    this._buttonToggles.forEach(function (toggle) { return toggle._markForCheck(); });\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MatButtonToggleGroup.prototype.ngOnInit = function () {\n            this._selectionModel = new collections.SelectionModel(this.multiple, undefined, false);\n        };\n        MatButtonToggleGroup.prototype.ngAfterContentInit = function () {\n            var _a;\n            (_a = this._selectionModel).select.apply(_a, __spread(this._buttonToggles.filter(function (toggle) { return toggle.checked; })));\n        };\n        /**\n         * Sets the model value. Implemented as part of ControlValueAccessor.\n         * @param value Value to be set to the model.\n         */\n        MatButtonToggleGroup.prototype.writeValue = function (value) {\n            this.value = value;\n            this._changeDetector.markForCheck();\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.registerOnChange = function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.registerOnTouched = function (fn) {\n            this._onTouched = fn;\n        };\n        // Implemented as part of ControlValueAccessor.\n        MatButtonToggleGroup.prototype.setDisabledState = function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n        /** Dispatch change event with current selection and group value. */\n        MatButtonToggleGroup.prototype._emitChangeEvent = function () {\n            var selected = this.selected;\n            var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n            var event = new MatButtonToggleChange(source, this.value);\n            this._controlValueAccessorChangeFn(event.value);\n            this.change.emit(event);\n        };\n        /**\n         * Syncs a button toggle's selected state with the model value.\n         * @param toggle Toggle to be synced.\n         * @param select Whether the toggle should be selected.\n         * @param isUserInput Whether the change was a result of a user interaction.\n         * @param deferEvents Whether to defer emitting the change events.\n         */\n        MatButtonToggleGroup.prototype._syncButtonToggle = function (toggle, select, isUserInput, deferEvents) {\n            var _this = this;\n            if (isUserInput === void 0) { isUserInput = false; }\n            if (deferEvents === void 0) { deferEvents = false; }\n            // Deselect the currently-selected toggle, if we're in single-selection\n            // mode and the button being toggled isn't selected at the moment.\n            if (!this.multiple && this.selected && !toggle.checked) {\n                this.selected.checked = false;\n            }\n            if (this._selectionModel) {\n                if (select) {\n                    this._selectionModel.select(toggle);\n                }\n                else {\n                    this._selectionModel.deselect(toggle);\n                }\n            }\n            else {\n                deferEvents = true;\n            }\n            // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n            // the side-effect is that we may end up updating the model value out of sequence in others\n            // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n            if (deferEvents) {\n                Promise.resolve(function () { return _this._updateModelValue(isUserInput); });\n            }\n            else {\n                this._updateModelValue(isUserInput);\n            }\n        };\n        /** Checks whether a button toggle is selected. */\n        MatButtonToggleGroup.prototype._isSelected = function (toggle) {\n            return this._selectionModel && this._selectionModel.isSelected(toggle);\n        };\n        /** Determines whether a button toggle should be checked on init. */\n        MatButtonToggleGroup.prototype._isPrechecked = function (toggle) {\n            if (typeof this._rawValue === 'undefined') {\n                return false;\n            }\n            if (this.multiple && Array.isArray(this._rawValue)) {\n                return this._rawValue.some(function (value) { return toggle.value != null && value === toggle.value; });\n            }\n            return toggle.value === this._rawValue;\n        };\n        /** Updates the selection state of the toggles in the group based on a value. */\n        MatButtonToggleGroup.prototype._setSelectionByValue = function (value) {\n            var _this = this;\n            this._rawValue = value;\n            if (!this._buttonToggles) {\n                return;\n            }\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw Error('Value must be an array in multiple-selection mode.');\n                }\n                this._clearSelection();\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n            }\n            else {\n                this._clearSelection();\n                this._selectValue(value);\n            }\n        };\n        /** Clears the selected toggles. */\n        MatButtonToggleGroup.prototype._clearSelection = function () {\n            this._selectionModel.clear();\n            this._buttonToggles.forEach(function (toggle) { return toggle.checked = false; });\n        };\n        /** Selects a value if there's a toggle that corresponds to it. */\n        MatButtonToggleGroup.prototype._selectValue = function (value) {\n            var correspondingOption = this._buttonToggles.find(function (toggle) {\n                return toggle.value != null && toggle.value === value;\n            });\n            if (correspondingOption) {\n                correspondingOption.checked = true;\n                this._selectionModel.select(correspondingOption);\n            }\n        };\n        /** Syncs up the group's value with the model and emits the change event. */\n        MatButtonToggleGroup.prototype._updateModelValue = function (isUserInput) {\n            // Only emit the change event for user input.\n            if (isUserInput) {\n                this._emitChangeEvent();\n            }\n            // Note: we emit this one no matter whether it was a user interaction, because\n            // it is used by Angular to sync up the two-way data binding.\n            this.valueChange.emit(this.value);\n        };\n        MatButtonToggleGroup.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-button-toggle-group',\n                        providers: [\n                            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                            { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\n                        ],\n                        host: {\n                            'role': 'group',\n                            'class': 'mat-button-toggle-group',\n                            '[attr.aria-disabled]': 'disabled',\n                            '[class.mat-button-toggle-vertical]': 'vertical',\n                            '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                        },\n                        exportAs: 'matButtonToggleGroup',\n                    },] }\n        ];\n        /** @nocollapse */\n        MatButtonToggleGroup.ctorParameters = function () { return [\n            { type: core.ChangeDetectorRef },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatButtonToggleGroup.propDecorators = {\n            _buttonToggles: [{ type: core.ContentChildren, args: [core.forwardRef(function () { return MatButtonToggle; }), {\n                            // Note that this would technically pick up toggles\n                            // from nested groups, but that's not a case that we support.\n                            descendants: true\n                        },] }],\n            appearance: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            vertical: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            valueChange: [{ type: core.Output }],\n            multiple: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return MatButtonToggleGroup;\n    }());\n    // Boilerplate for applying mixins to the MatButtonToggle class.\n    /** @docs-private */\n    var MatButtonToggleBase = /** @class */ (function () {\n        function MatButtonToggleBase() {\n        }\n        return MatButtonToggleBase;\n    }());\n    var _MatButtonToggleMixinBase = core$1.mixinDisableRipple(MatButtonToggleBase);\n    /** Single button inside of a toggle group. */\n    var MatButtonToggle = /** @class */ (function (_super) {\n        __extends(MatButtonToggle, _super);\n        function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \n        // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n        defaultTabIndex, defaultOptions) {\n            var _this = _super.call(this) || this;\n            _this._changeDetectorRef = _changeDetectorRef;\n            _this._elementRef = _elementRef;\n            _this._focusMonitor = _focusMonitor;\n            _this._isSingleSelector = false;\n            _this._checked = false;\n            /**\n             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n             */\n            _this.ariaLabelledby = null;\n            _this._disabled = false;\n            /** Event emitted when the group value changes. */\n            _this.change = new core.EventEmitter();\n            var parsedTabIndex = Number(defaultTabIndex);\n            _this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n            _this.buttonToggleGroup = toggleGroup;\n            _this.appearance =\n                defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n            return _this;\n        }\n        Object.defineProperty(MatButtonToggle.prototype, \"buttonId\", {\n            /** Unique ID for the underlying `button` element. */\n            get: function () { return this.id + \"-button\"; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"appearance\", {\n            /** The appearance style of the button. */\n            get: function () {\n                return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n            },\n            set: function (value) {\n                this._appearance = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"checked\", {\n            /** Whether the button is checked. */\n            get: function () {\n                return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n            },\n            set: function (value) {\n                var newValue = coercion.coerceBooleanProperty(value);\n                if (newValue !== this._checked) {\n                    this._checked = newValue;\n                    if (this.buttonToggleGroup) {\n                        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n                    }\n                    this._changeDetectorRef.markForCheck();\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatButtonToggle.prototype, \"disabled\", {\n            /** Whether the button is disabled. */\n            get: function () {\n                return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n            },\n            set: function (value) { this._disabled = coercion.coerceBooleanProperty(value); },\n            enumerable: true,\n            configurable: true\n        });\n        MatButtonToggle.prototype.ngOnInit = function () {\n            this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n            this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n            this.id = this.id || \"mat-button-toggle-\" + _uniqueIdCounter++;\n            if (this._isSingleSelector) {\n                this.name = this.buttonToggleGroup.name;\n            }\n            if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n                this.checked = true;\n            }\n            this._focusMonitor.monitor(this._elementRef, true);\n        };\n        MatButtonToggle.prototype.ngOnDestroy = function () {\n            var group = this.buttonToggleGroup;\n            this._focusMonitor.stopMonitoring(this._elementRef);\n            // Remove the toggle from the selection once it's destroyed. Needs to happen\n            // on the next tick in order to avoid \"changed after checked\" errors.\n            if (group && group._isSelected(this)) {\n                group._syncButtonToggle(this, false, false, true);\n            }\n        };\n        /** Focuses the button. */\n        MatButtonToggle.prototype.focus = function (options) {\n            this._buttonElement.nativeElement.focus(options);\n        };\n        /** Checks the button toggle due to an interaction with the underlying native button. */\n        MatButtonToggle.prototype._onButtonClick = function () {\n            var newChecked = this._isSingleSelector ? true : !this._checked;\n            if (newChecked !== this._checked) {\n                this._checked = newChecked;\n                if (this.buttonToggleGroup) {\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                    this.buttonToggleGroup._onTouched();\n                }\n            }\n            // Emit a change event when it's the single selector\n            this.change.emit(new MatButtonToggleChange(this, this.value));\n        };\n        /**\n         * Marks the button toggle as needing checking for change detection.\n         * This method is exposed because the parent button toggle group will directly\n         * update bound properties of the radio button.\n         */\n        MatButtonToggle.prototype._markForCheck = function () {\n            // When the group value changes, the button will not be notified.\n            // Use `markForCheck` to explicit update button toggle's status.\n            this._changeDetectorRef.markForCheck();\n        };\n        MatButtonToggle.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-button-toggle',\n                        template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <div class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</button>\\n\\n<div class=\\\"mat-button-toggle-focus-overlay\\\"></div>\\n<div class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</div>\\n\",\n                        encapsulation: core.ViewEncapsulation.None,\n                        exportAs: 'matButtonToggle',\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        inputs: ['disableRipple'],\n                        host: {\n                            '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                            '[class.mat-button-toggle-checked]': 'checked',\n                            '[class.mat-button-toggle-disabled]': 'disabled',\n                            '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                            'class': 'mat-button-toggle',\n                            // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n                            // but can still receive focus from things like cdkFocusInitial.\n                            '[attr.tabindex]': '-1',\n                            '[attr.id]': 'id',\n                            '[attr.name]': 'null',\n                            '(focus)': 'focus()',\n                        },\n                        styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatButtonToggle.ctorParameters = function () { return [\n            { type: MatButtonToggleGroup, decorators: [{ type: core.Optional }] },\n            { type: core.ChangeDetectorRef },\n            { type: core.ElementRef },\n            { type: a11y.FocusMonitor },\n            { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] },\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n        ]; };\n        MatButtonToggle.propDecorators = {\n            ariaLabel: [{ type: core.Input, args: ['aria-label',] }],\n            ariaLabelledby: [{ type: core.Input, args: ['aria-labelledby',] }],\n            _buttonElement: [{ type: core.ViewChild, args: ['button',] }],\n            id: [{ type: core.Input }],\n            name: [{ type: core.Input }],\n            value: [{ type: core.Input }],\n            tabIndex: [{ type: core.Input }],\n            appearance: [{ type: core.Input }],\n            checked: [{ type: core.Input }],\n            disabled: [{ type: core.Input }],\n            change: [{ type: core.Output }]\n        };\n        return MatButtonToggle;\n    }(_MatButtonToggleMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatButtonToggleModule = /** @class */ (function () {\n        function MatButtonToggleModule() {\n        }\n        MatButtonToggleModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule, core$1.MatRippleModule],\n                        exports: [core$1.MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                        declarations: [MatButtonToggleGroup, MatButtonToggle],\n                    },] }\n        ];\n        return MatButtonToggleModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS;\n    exports.MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;\n    exports.MatButtonToggle = MatButtonToggle;\n    exports.MatButtonToggleChange = MatButtonToggleChange;\n    exports.MatButtonToggleGroup = MatButtonToggleGroup;\n    exports.MatButtonToggleGroupMultiple = MatButtonToggleGroupMultiple;\n    exports.MatButtonToggleModule = MatButtonToggleModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=material-button-toggle.umd.js.map\n"]}