@use 'sass:map';
@use '@material/list/evolution-mixins';
@use '@material/list/list-theme' as mdc-list-theme;

@use '../core/theming/theming';
@use '../core/tokens/m2/mdc/list' as m2-mdc-list;
@use '../core/typography/typography';
@use '../core/typography/typography-utils';
@use '../core/mdc-helpers/mdc-helpers';
@use './list-option-theme';

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $primary: theming.get-color-from-palette(map.get($config, primary));
  $accent: theming.get-color-from-palette(map.get($config, accent));
  $warn: theming.get-color-from-palette(map.get($config, warn));
  $mdc-list-color-tokens: m2-mdc-list.get-color-tokens($config);


  // Add values for MDC list tokens.
  .mat-mdc-list-base {
    @include mdc-list-theme.theme($mdc-list-color-tokens);
  }

  // TODO(mmalerba): This should use MDC checkbox's token API instead.
  @include mdc-helpers.using-mdc-theme($config) {
    .mat-mdc-list-option {
      @include list-option-theme.private-list-option-color-override($config, $primary, primary);
    }
    .mat-mdc-list-option.mat-accent {
      @include list-option-theme.private-list-option-color-override($config, $accent, secondary);
    }
    .mat-mdc-list-option.mat-warn {
      @include list-option-theme.private-list-option-color-override($config, $warn, error);
    }
  }

  // There is no token for activated color on nav list.
  // TODO(mmalerba): Add a token to MDC or make a custom one.
  .mat-mdc-list-base.mat-mdc-list-base {
    @include evolution-mixins.list-selected-ink-color($primary);
  }

  // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can cause
  //  opacity issues, so we need this override for now. We can remove it when all Angular Material
  //  components stop using the old MDC mixins.
  .mat-mdc-list-base .mdc-list-item--disabled {
    .mdc-list-item__start,
    .mdc-list-item__content,
    .mdc-list-item__end {
      opacity: 1;
    }
  }
}

@mixin density($config-or-theme) {
  $density-scale: theming.get-density-config($config-or-theme);
  $mdc-list-density-tokens: m2-mdc-list.get-density-tokens($density-scale);

  // Add values for MDC list tokens.
  .mat-mdc-list-base {
    @include mdc-list-theme.theme($mdc-list-density-tokens);
  }

  // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based API,
  //  to avoid screenshot diffs. We should remove it in favor of following MDC's current style, or
  //  add custom tokens for it.
  $clamped-density-scale: theming.clamp-density($density-scale, -5);
  .mat-mdc-list-item {
    &.mdc-list-item--with-leading-avatar,
    &.mdc-list-item--with-leading-checkbox,
    &.mdc-list-item--with-leading-icon {
      &.mdc-list-item--with-one-line {
        height: map.get((
            0: 56px,
            -1: 52px,
            -2: 48px,
            -3: 44px,
            -4: 40px,
            -5: 40px,
        ), $clamped-density-scale);
      }

      &.mdc-list-item--with-two-lines {
        height: map.get((
            0: 72px,
            -1: 68px,
            -2: 64px,
            -3: 60px,
            -4: 56px,
            -5: 56px,
        ), $clamped-density-scale);
      }
    }
  }
}

@mixin typography($config-or-theme) {
  $config: typography.private-typography-to-2018-config(
      theming.get-typography-config($config-or-theme));
  $mdc-list-typography-tokens: m2-mdc-list.get-typography-tokens($config);

  // Add values for MDC list tokens.
  .mat-mdc-list-base {
    @include mdc-list-theme.theme($mdc-list-typography-tokens);
  }

  // MDC does not have tokens for the subheader.
  // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.
  .mdc-list-group__subheader {
    @include typography-utils.typography-level($config, subtitle-1);
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
